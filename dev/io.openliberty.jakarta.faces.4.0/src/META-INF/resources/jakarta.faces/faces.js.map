{"version":3,"file":"faces.js","mappings":"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","sources":["webpack://myfaces.faces.ajax/./typescript/faces/api/_api.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/AjaxImpl.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/PushImpl.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/core/Const.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/core/ImplTypes.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/i18n/Messages.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/util/Assertions.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/util/AsyncQueue.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/util/ExtDomQuery.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/util/FileUtils.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/util/HiddenInputBuilder.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/util/Lang.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/xhrCore/ErrorData.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/xhrCore/EventData.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/xhrCore/RequestDataResolver.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/xhrCore/ResonseDataResolver.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/xhrCore/Response.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/xhrCore/ResponseProcessor.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/xhrCore/XhrFormData.ts","webpack://myfaces.faces.ajax/./typescript/faces/impl/xhrCore/XhrRequest.ts","webpack://myfaces.faces.ajax/./typescript/faces/myfaces/OamSubmit.ts","webpack://myfaces.faces.ajax/./typescript/mona_dish/DomQuery.ts","webpack://myfaces.faces.ajax/./typescript/mona_dish/Global.ts","webpack://myfaces.faces.ajax/./typescript/mona_dish/Lang.ts","webpack://myfaces.faces.ajax/./typescript/mona_dish/Monad.ts","webpack://myfaces.faces.ajax/./typescript/mona_dish/SourcesCollectors.ts","webpack://myfaces.faces.ajax/./typescript/mona_dish/Stream.ts","webpack://myfaces.faces.ajax/./typescript/mona_dish/XmlQuery.ts","webpack://myfaces.faces.ajax/./typescript/mona_dish/index_core.ts","webpack://myfaces.faces.ajax/webpack/bootstrap","webpack://myfaces.faces.ajax/webpack/runtime/global","webpack://myfaces.faces.ajax/./typescript/faces/api/faces.ts"],"sourcesContent":["/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Implementation} from \"../impl/AjaxImpl\";\nimport {PushImpl} from \"../impl/PushImpl\";\nimport {oam as _oam} from \"../myfaces/OamSubmit\";\nimport {$nsp, CTX_OPTIONS_EXECUTE, CTX_OPTIONS_PARAMS, CTX_PARAM_RENDER, P_BEHAVIOR_EVENT} from \"../impl/core/Const\";\nimport {ErrorData} from \"../impl/xhrCore/ErrorData\";\nimport {EventData} from \"../impl/xhrCore/EventData\";\n\n//we use modules to get a proper jsdoc and static/map structure in the calls\n//as per spec requirement\nexport module faces {\n\n\n    /**\n     * Version of the implementation for the faces.ts.\n     * <p />\n     * as specified within the jsf specifications faces.html:\n     * <ul>\n     * <li>left two digits major release number</li>\n     * <li>middle two digits minor spec release number</li>\n     * <li>right two digits bug release number</li>\n     * </ul>\n     * @constant\n     */\n    export var specversion = 400000;\n    /**\n     * Implementation version as specified within the jsf specification.\n     * <p />\n     * A number increased with every implementation version\n     * and reset by moving to a new spec release number\n     *\n     * @constant\n     */\n    export var implversion = 0;\n\n    /**\n     * SeparatorChar as defined by facesContext.getNamingContainerSeparatorChar()\n     */\n    export var separatorchar: string = getSeparatorChar();\n\n    // noinspection JSUnusedGlobalSymbols\n    /**\n     * Context Path as defined externalContext.requestContextPath\n     */\n    export var contextpath: string = '#{facesContext.externalContext.requestContextPath}';\n    // we do not have a fallback here, for now\n\n    /**\n     * This method is responsible for the return of a given project stage as defined\n     * by the jsf specification.\n     * <p/>\n     * Valid return values are:\n     * <ul>\n     *     <li>&quot;Production&quot;</li>\n     *     <li>&quot;Development&quot;</li>\n     *     <li>&quot;SystemTest&quot;</li>\n     *     <li>&quot;UnitTest&quot;</li>\n     * </li>\n     *\n     * @return {String} the current project state emitted by the server side method:\n     * <i>jakarta.faces.application.Application.getProjectStage()</i>\n     */\n    export function getProjectStage(): string {\n        return Implementation.getProjectStage();\n    }\n\n    /**\n     * collect and encode data for a given form element (must be of type form)\n     * find the jakarta.faces.ViewState element and encode its value as well!\n     * return a concatenated string of the encoded values!\n     *\n     * @throws an exception in case of the given element not being of type form!\n     * https://issues.apache.org/jira/browse/MYFACES-2110\n     */\n    export function getViewState(formElement: Element | string): string {\n        return Implementation.getViewState(formElement);\n    }\n\n    /**\n     * returns the window identifier for the given node / window\n     * @return the window identifier or null if none is found\n     * @param rootNode\n     */\n    export function getClientWindow(rootNode?: Element | string): string {\n        return Implementation.getClientWindow(rootNode);\n    }\n\n    //private helper functions\n    function getSeparatorChar(): string {\n        const sep = '#{facesContext.namingContainerSeparatorChar}';\n        //We now enable standalone mode, the separator char was not mapped we make a fallback to 2.3 behavior\n        //the idea is that the separator char is provided from the underlying container, but if not then we\n        //will perform a fallback (aka 2.3 has the url fallback behavior)\n        return (sep.match(/\\#\\{facesContext.namingContainerSeparatorChar\\}/gi)) ? Implementation.getSeparatorChar() : sep;\n    }\n\n\n\n\n    export module ajax {\n        \"use strict\";\n\n        /**\n         * this function has to send the ajax requests\n         *\n         * following requestInternal conditions must be met:\n         * <ul>\n         *  <li> the requestInternal must be sent asynchronously! </li>\n         *  <li> the requestInternal must be a POST!!! requestInternal </li>\n         *  <li> the requestInternal url must be the form action attribute </li>\n         *  <li> all requests must be queued with a client side requestInternal queue to ensure the requestInternal ordering!</li>\n         * </ul>\n         *\n         * @param {String|Node} element: any dom element no matter being it html or jsf, from which the event is emitted\n         * @param {EVENT} event: any javascript event supported by that object\n         * @param {Map} options : map of options being pushed into the ajax cycle\n         */\n        export function request(element: Element, event?: Event, options?: Context): void {\n            Implementation.request(element, event, options)\n        }\n\n        /**\n         * response handler\n         * @param request the request object having triggered this response\n         * @param context the request context\n         *\n         * TODO add info on what can be in the context\n         */\n        export function response(request: XMLHttpRequest, context?: Context): void {\n            Implementation.response(request, context);\n        }\n\n        /**\n         * Adds an error handler to our global error queue.\n         * the error handler must be of the format <i>function errorListener(&lt;errorData&gt;)</i>\n         * with errorData being of following format:\n         * <ul>\n         *     <li> errorData.type : &quot;error&quot;</li>\n         *     <li> errorData.status : the error status message</li>\n         *     <li> errorData.serverErrorName : the server error name in case of a server error</li>\n         *     <li> errorData.serverErrorMessage : the server error message in case of a server error</li>\n         *     <li> errorData.source  : the issuing source element which triggered the requestInternal </li>\n         *     <li> eventData.responseCode: the response code (aka http requestInternal response code, 401 etc...) </li>\n         *     <li> eventData.responseText: the requestInternal response text </li>\n         *     <li> eventData.responseXML: the requestInternal response xml </li>\n         * </ul>\n         *\n         * @param errorListener error handler must be of the format <i>function errorListener(&lt;errorData&gt;)</i>\n         */\n        export function addOnError(errorFunc: (data: ErrorData) => void): void {\n            Implementation.addOnError(<any>errorFunc);\n        }\n\n        /**\n         * Adds a global event listener to the ajax event queue. The event listener must be a function\n         * of following format: <i>function eventListener(&lt;eventData&gt;)</i>\n         *\n         * @param eventListener event must be of the format <i>function eventListener(&lt;eventData&gt;)</i>\n         */\n        export function addOnEvent(eventFunc: (data: EventData) => void): void {\n            Implementation.addOnEvent(<any>eventFunc);\n        }\n    }\n\n    export module util {\n\n        /**\n         * varargs function which executes a chain of code (functions or any other code)\n         *\n         * if any of the code returns false, the execution\n         * is terminated prematurely skipping the rest of the code!\n         *\n         * @param {DomNode} source, the callee object\n         * @param {Event} event, the event object of the callee event triggering this function\n         * @param funcs ... arbitrary array of functions or strings\n         * @returns true if the chain has succeeded false otherwise\n         */\n        export function chain(source, event, ...funcs: Array<Function | string>): boolean {\n            return Implementation.chain(source, event, ...(funcs as EvalFuncs));\n        }\n    }\n\n    export module push {\n        /**\n         * @param socketClientId the sockets client identifier\n         * @param url the uri to reach the socket\n         * @param channel the channel name/id\n         * @param onopen The function to be invoked when the web socket is opened.\n         * @param onmessage The function to be invoked when a message is received.\n         * @param onerror The function to be invoked when an error occurs.\n         * @param onclose The function to be invoked when the web socket is closed.\n         * @param behaviors functions which are invoked whenever a message is received\n         * @param autoConnect Whether or not to automatically open the socket. Defaults to <code>false</code>.\n         */\n        export function init(socketClientId: string,\n                    url: string,\n                    channel: string,\n                    onopen: Function,\n                    onmessage: Function,\n                    onerror: Function,\n                    onclose: Function,\n                    behaviors: any,\n                    autoConnect: boolean): void {\n            PushImpl.init(socketClientId, url, channel, onopen, onmessage, onerror, onclose, behaviors, autoConnect);\n        }\n\n        /**\n         * Open the web socket on the given channel.\n         * @param  channel The name of the web socket channel.\n         * @throws  Error is thrown, if the channel is unknown.\n         */\n        export function open(socketClientId: string): void {\n            PushImpl.open(socketClientId);\n        }\n\n        /**\n         * Close the web socket on the given channel.\n         * @param  channel The name of the web socket channel.\n         * @throws  Error is thrown, if the channel is unknown.\n         */\n        export function close(socketClientId: string): void {\n            PushImpl.close(socketClientId);\n        }\n\n    }\n}\n\nexport module myfaces {\n    /**\n     * AB function similar to mojarra and Primefaces\n     * not part of the spec but a convenience accessor method\n     * Code provided by Thomas Andraschko\n     *\n     * @param source the event source\n     * @param event the event\n     * @param eventName event name for java.jakarta.faces.behavior.evemnt\n     * @param execute execute list as passed down in faces.ajax.request\n     * @param render\n     * @param options\n     */\n    export function ab(source: Element, event: Event, eventName: string, execute: string, render: string, options: Options = {}): void {\n        if (eventName) {\n           options[CTX_OPTIONS_PARAMS] = options?.[CTX_OPTIONS_PARAMS] ?? {};\n           options[CTX_OPTIONS_PARAMS][$nsp(P_BEHAVIOR_EVENT)] = eventName;\n        }\n        if (execute) {\n            options[CTX_OPTIONS_EXECUTE] = execute;\n        }\n        if (render) {\n            options[CTX_PARAM_RENDER] = render;\n        }\n\n        (window?.faces ?? window.jsf).ajax.request(source, event, options);\n    }\n\n    /**\n     * legacy oam functions\n     */\n    export const oam = _oam;\n}\n\n\n","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {IListener} from \"./util/IListener\";\nimport {Response} from \"./xhrCore/Response\";\nimport {XhrRequest} from \"./xhrCore/XhrRequest\";\nimport {AsynchronousQueue} from \"./util/AsyncQueue\";\nimport {AssocArrayCollector, Config, DQ, Lang, LazyStream, Optional, Stream} from \"mona-dish\";\nimport {Assertions} from \"./util/Assertions\";\nimport {XhrFormData} from \"./xhrCore/XhrFormData\";\nimport {ExtConfig, ExtDomQuery} from \"./util/ExtDomQuery\";\nimport {ErrorData} from \"./xhrCore/ErrorData\";\nimport {EventData} from \"./xhrCore/EventData\";\nimport {ExtLang} from \"./util/Lang\";\n\nimport {\n    CTX_OPTIONS_EXECUTE,\n    CTX_PARAM_REQ_PASS_THR,\n    CTX_PARAM_SRC_CTL_ID,\n    CTX_PARAM_SRC_FRM_ID,\n    IDENT_ALL,\n    IDENT_FORM,\n    IDENT_NONE,\n    IDENT_THIS,\n    MYFACES,\n    ON_ERROR,\n    ON_EVENT,\n    P_AJAX,\n    P_CLIENT_WINDOW,\n    P_EVT,\n    P_EXECUTE,\n    P_PARTIAL_SOURCE,\n    P_RENDER,\n    P_RESET_VALUES,\n    P_WINDOW_ID,\n    CTX_PARAM_RENDER,\n    SOURCE,\n    HTML_TAG_FORM,\n    CTX_OPTIONS_PARAMS,\n    VIEW_ID,\n    $faces,\n    EMPTY_STR,\n    CTX_PARAM_MF_INTERNAL,\n    NAMED_VIEWROOT,\n    NAMING_CONTAINER_ID\n} from \"./core/Const\";\nimport {\n    resolveDefaults,\n    resolveDelay,\n    resolveForm,\n    resolveTimeout, resolveViewId, resolveViewRootId, resoveNamingContainerMapper\n} from \"./xhrCore/RequestDataResolver\";\nimport {encodeFormData} from \"./util/FileUtils\";\n\n/*\n * allowed project stages\n */\nenum ProjectStages {\n    Production = \"Production\",\n    Development = \"Development\",\n    SystemTest = \"SystemTest\",\n    UnitTest = \"UnitTest\"\n}\n\n/*\n *   Block-filter for the pass-through filtering; the attributes given here\n *   will not be transmitted from the options into the pass-through\n */\nenum BlockFilter {\n    onerror = \"onerror\",\n    onevent = \"onevent\",\n    render = \"render\",\n    execute = \"execute\",\n    myfaces = \"myfaces\",\n    delay = \"delay\",\n    timeout = \"timeout\",\n    resetValues = \"resetValues\",\n    windowId = \"windowId\",\n    params = \"params\"\n}\n\n/**\n * Core Implementation\n * to distinct between api and impl\n *\n * The original idea was to make the implementation pluggable\n * but this is pointless, you always can overwrite the thin api layer\n * however a dedicated api makes sense for readability reasons\n */\nexport module Implementation {\n/*\n Small internal explanation, this code is optimized for readability\n and cuts off a ton of old legacy code.\n Aka older browsers are not supported anymore.\n We use a self written helper library to keep the number of exernal\n code dependencies down.\n The library is called mona-dish and started as a small sideproject of mine\n it provides following\n\n a) Monad like structures for querying because this keeps the code denser and adds abstractions\n that always was the strong point of jquery and it still is better in this regard than what ecmascript provides\n\n b) Streams and lazystreams like java has, a pull like construct, ecmascript does not have anything like Lazystreams.\n Another option would have been rxjs but that would have introduced a code dependency and probably more code. We might\n move to RXJS if the need arises however. But for now I would rather stick with my small self grown library which works\n quite well and where I can patch quickly (I have used it in several industrial projects, so it works well\n and is heavily fortified by unit tests (140 testcases as time of writing this))\n\n c) A neutral json like configuration which allows assignments of arbitrary values with reduce code which then can be\n transformed into different data representations\n\n examples:\n internalCtx.assign(MYPARAM, CTX_PARAM_SRC_FRM_ID).value = form.id.value;\n passes a value into context.MYPARAM.CTX_PARAM_SRC_FRM_ID\n\n basically an abbreviation for\n\n internalCtxt[MYPARAM] = internalCtxt?.[MYPARAM] ?  internalCtxt[MYPARAM] : {};\n internalCtxt[MYPARAM][CTX_PARAM_SRC_FRM_ID] = internalCtxt?.[MYPARAM][CTX_PARAM_SRC_FRM_ID] ?  internalCtxt[MYPARAM][CTX_PARAM_SRC_FRM_ID] : {};\n internalCtxt[MYPARAM][CTX_PARAM_SRC_FRM_ID] = form.id.value;\n\n\n internalCtx.assign(condition, MYPARAM, CTX_PARAM_SRC_FRM_ID).value = form.id.value;\n passes a value into context.MYPARAM.CTX_PARAM_SRC_FRM_ID if condition === true otherwise it is ignored\n\n abbreviates:\n if(condition) {\n    internalCtxt[MYPARAM] = internalCtxt?.[MYPARAM] ?  internalCtxt[MYPARAM] : {};\n    internalCtxt[MYPARAM][CTX_PARAM_SRC_FRM_ID] = internalCtxt?.[MYPARAM][CTX_PARAM_SRC_FRM_ID] ?  internalCtxt[MYPARAM][CTX_PARAM_SRC_FRM_ID] : {};\n    internalCtxt[MYPARAM][CTX_PARAM_SRC_FRM_ID] = form.id.value;\n }\n\n\n d) Optional constructs, while under heavy debate we only use them lightly where the api requires it from mona-dish\n\n Note the inclusion of this library uses a reduced build which only includes the part of it, which we really use\n\n */\n\n    import trim = Lang.trim;\n    import getMessage = ExtLang.getMessage;\n    import getGlobalConfig = ExtLang.getGlobalConfig;\n    import assert = Assertions.assert;\n\n    let projectStage: string = null;\n    let separator: string = null;\n    let eventQueue = [];\n    let errorQueue = [];\n    export let requestQueue: AsynchronousQueue<XhrRequest> = null;\n    /*error reporting threshold*/\n    let threshold = \"ERROR\";\n\n    /**\n     * fetches the separator char from the given script tags\n     *\n     * @return {string} the separator char for the given script tags\n     */\n    export function getSeparatorChar(): string {\n        return resolveGlobalConfig()?.separator ??\n            this?.separator ??\n            (separator = ExtDomQuery.searchJsfJsFor(/separator=([^&;]*)/).orElse(\":\").value);\n    }\n\n    /**\n     * this is for testing purposes only, since AjaxImpl is a module\n     * we need to reset for every unit test its internal states\n     */\n    export function reset() {\n        projectStage = null;\n        separator = null;\n        eventQueue = [];\n        errorQueue = [];\n        requestQueue = null;\n    }\n\n    /**\n     * @return the project stage also emitted by the server:\n     * it cannot be cached and must be delivered over the server\n     * The value for it comes from the requestInternal parameter of the faces.js script called \"stage\".\n     */\n    export function getProjectStage(): string | null {\n        return resolveGlobalConfig()?.projectStage ??\n            this?.projectStage ??\n            (projectStage = resolveProjectStateFromURL());\n    }\n\n    /**\n     * resolves the project stage as url parameter\n     * @return the project stage or null\n     */\n    export function resolveProjectStateFromURL(): string | null {\n\n        /* run through all script tags and try to find the one that includes faces.js */\n        const foundStage = ExtDomQuery.searchJsfJsFor(/stage=([^&;]*)/).value as string;\n        return (foundStage in ProjectStages) ? foundStage : ProjectStages.Production; // MYFACES-4572: default is production\n    }\n\n    /**\n     * implementation of the faces.util.chain functionality\n     *\n     * @param source\n     * @param event\n     * @param funcs\n     */\n    export function chain(source: any, event: Event, ...funcs: EvalFuncs): boolean {\n        // we can use our lazy stream each functionality to run our chain here..\n        // by passing a boolean as return value into the onElem call\n        // we can stop early at the first false, just like the spec requests\n\n        return LazyStream.of(...funcs)\n            .map(func => resolveAndExecute(source, event, func))\n            // we use the return false == stop as an early stop, onElem stops at the first false\n            .onElem((opResult: boolean) => opResult)\n            //last ensures we run until the first false is returned\n            .last().value;\n    }\n\n    /**\n     * this function has to send the ajax requests\n     *\n     * following request conditions must be met:\n     * <ul>\n     *  <li> the request must be sent asynchronously! </li>\n     *  <li> the request must be a POST!!! request </li>\n     *  <li> the request url must be the form action attribute </li>\n     *  <li> all requests must be queued with a client side request queue to ensure the request ordering!</li>\n     * </ul>\n     *\n     * @param el any dom element no matter being it html or jsf, from which the event is emitted\n     * @param event any javascript event supported by that object\n     * @param opts  map of options being pushed into the ajax cycle\n     *\n     * a) transformArguments out of the function\n     * b) passThrough handling with a map copy with a filter map block map\n     */\n    export function request(el: ElemDef, event?: Event, opts ?: Options) {\n\n        const {\n            options,\n            elem,\n            elementId,\n            windowId,\n            isResetValues\n        } = resolveDefaults(event, opts, el);\n        const requestCtx = new ExtConfig({});\n        const internalCtx = new ExtConfig({});\n\n        Assertions.assertRequestIntegrity(options, elem);\n\n        /**\n         * fetch the parent form\n         *\n         * note we also add an override possibility here\n         * so that people can use dummy forms and work\n         * with detached objects\n         */\n        const form: DQ = resolveForm(elem, event);\n        const viewId: string = resolveViewId(form);\n        const formId = form.id.value;\n        const delay: number = resolveDelay(options);\n        const timeout: number = resolveTimeout(options);\n\n        requestCtx.assignIf(!!windowId, P_WINDOW_ID).value = windowId;\n\n        // old non spec behavior will be removed after it is clear whether the removal breaks any code\n        requestCtx.assign(CTX_PARAM_REQ_PASS_THR).value = extractLegacyParams(options.value);\n\n        // spec conform behavior, all passthrough params must be under \"passthrough\n        const params = remapArrayToAssocArr(options.getIf(CTX_OPTIONS_PARAMS).orElse({}).value);\n        //we turn off the remapping for the param merge, because we do not want to have\n        //any namespacing to be remapped\n\n        let ctxPassthrough = requestCtx.getIf(CTX_PARAM_REQ_PASS_THR) as ExtConfig;\n        ctxPassthrough.$nspEnabled = false;\n        ctxPassthrough.shallowMerge(new Config(params), true);\n        //now we turn it on again\n        ctxPassthrough.$nspEnabled = true;\n        requestCtx.assignIf(!!event, CTX_PARAM_REQ_PASS_THR, P_EVT).value = event?.type;\n\n        /**\n         * ajax pass through context with the source\n         * onresolved Event and onerror Event\n         */\n        requestCtx.assign(SOURCE).value = elementId;\n\n        requestCtx.assign(VIEW_ID).value = viewId;\n\n        /**\n         * on resolvedEvent and onError...\n         * those values will be traversed later on\n         * also into the response context\n         */\n        requestCtx.assign(ON_EVENT).value = options.value?.onevent;\n        requestCtx.assign(ON_ERROR).value = options.value?.onerror;\n\n        /**\n         * lets drag the myfaces config params also in\n         */\n        requestCtx.assign(MYFACES).value = options.value?.myfaces;\n\n        /**\n         * binding contract the jakarta.faces.source must be set\n         */\n        requestCtx.assign(CTX_PARAM_REQ_PASS_THR, P_PARTIAL_SOURCE).value = elementId;\n\n        /**\n         * jakarta.faces.partial.ajax must be set to true\n         */\n        requestCtx.assign(CTX_PARAM_REQ_PASS_THR, P_AJAX).value = true;\n\n        /**\n         * if resetValues is set to true\n         * then we have to set jakarta.faces.resetValues as well\n         * as pass through parameter\n         * the value has to be explicitly true, according to\n         * the specs jsdoc\n         */\n        requestCtx.assignIf(isResetValues, CTX_PARAM_REQ_PASS_THR, P_RESET_VALUES).value = true;\n\n        // additional meta information to speed things up, note internal non jsf\n        // pass through options are stored under _mfInternal in the context\n        internalCtx.assign(CTX_PARAM_SRC_FRM_ID).value = formId;\n\n        // mojarra compatibility, mojarra is sending the form id as well\n        // this is not documented behavior but can be determined by running\n        // mojarra under blackbox conditions.\n        // I assume it does the same as our formId_submit=1 so leaving it out\n        // won't hurt but for the sake of compatibility we are going to add it\n        requestCtx.assign(CTX_PARAM_REQ_PASS_THR, formId).value = formId;\n        internalCtx.assign(CTX_PARAM_SRC_CTL_ID).value = elementId;\n\n        assignClientWindowId(form, requestCtx);\n        assignExecute(options, requestCtx, form, elementId);\n        assignRender(options, requestCtx, form, elementId);\n        assignNamingContainerData(internalCtx, form);\n\n        //now we enqueue the request as asynchronous runnable into our request\n        //queue and let the queue take over the rest\n        queueHandler.addRequestToQueue(elem, form, requestCtx, internalCtx, delay, timeout);\n    }\n\n    /**\n     * Spec. 13.3.3\n     * Examining the response markup and updating the DOM tree\n     * @param {XMLHttpRequest} request - the ajax request\n     * @param {Object} context - the ajax context\n     */\n    export function response(request: XMLHttpRequest, context: Context) {\n        Response.processResponse(request, context);\n    }\n\n    /**\n     * adds an error handler to the error queue\n     *\n     * @param errorListener the error listener handler\n     */\n    export function addOnError(errorListener: IListener<ErrorData>) {\n        errorQueue.push(errorListener);\n    }\n\n    /**\n     * adds an event handler to the event queue\n     *\n     * @param eventListener the event listener handler\n     */\n    export function addOnEvent(eventListener: IListener<EventData>) {\n        eventQueue.push(eventListener);\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    /**\n     * sends an event to the event handlers\n     *\n     * @param data the event data object hosting the event data according to the spec @see EventData for what is reachable\n     * @param localHandler an optional event handler, which is processed before the event handler chain\n     */\n    export function sendEvent(data: EventData, localHandler = function (data: EventData) {\n    }) {\n        /*now we serve the queue as well*/\n        localHandler(data);\n        eventQueue.forEach(fn => fn(data));\n    }\n\n    /**\n     * error handler behavior called internally\n     * and only into the impl it takes care of the\n     * internal message transformation to a myfaces internal error\n     * and then uses the standard send error mechanisms\n     * also a double error logging prevention is done as well\n     *\n     * @param request the request currently being processed\n     * @param context the context affected by this error\n     * @param exception the exception being thrown\n     * @param clearRequestQueue if set to true, clears the request queue of all pending requests\n     */\n    export function stdErrorHandler(request: XMLHttpRequest,\n                                    context: Config,\n                                    exception: Error,\n                                    clearRequestQueue = false) {\n        //newer browsers do not allow to hold additional values on native objects like exceptions\n        //we hence capsule it into the request, which is gced automatically\n        //on ie as well, since the stdErrorHandler usually is called between requests\n        //this is a valid approach\n        try {\n            if (threshold == \"ERROR\") {\n                let errorData = ErrorData.fromClient(exception);\n                sendError(errorData);\n            }\n        } finally {\n            if (clearRequestQueue) {\n                requestQueue.cleanup();\n            }\n        }\n    }\n\n    // noinspection JSUnusedLocalSymbols\n    /**\n     * implementation triggering the error chain\n     *\n     *\n     *\n     *  handles the errors, in case of an onError exists within the context the onError is called as local error handler\n     *  the registered error handlers in the queue received an error message to be dealt with\n     *  and if the projectStage is at development an alert box is displayed\n     *\n     *  note: we have additional functionality here, via the global config myfaces.config.defaultErrorOutput a function can be provided\n     *  which changes the default output behavior from alert to something else\n     *\n     * @param errorData the error data to be displayed\n     * @param localHandler an optional local error handler which has to be processed before the error handler queue\n     */\n    export function sendError(errorData: ErrorData, localHandler = function (data: ErrorData) {\n    }) {\n\n        localHandler(errorData);\n        errorQueue.forEach((errorCallback: Function) => {\n            errorCallback(errorData);\n        });\n        let displayError: (string) => void = getGlobalConfig(\"defaultErrorOutput\", (console ? console.error : alert));\n        displayError(errorData);\n    }\n\n    /**\n     * @node optional element or id defining a rootnode where an element with the id \"jakarta.faces.windowId\" is hosted\n     * @return the client window id of the current window, if one is given if none is found, null is returned\n     */\n    export function getClientWindow(node ?: Element | string): string | null {\n        const ALTERED = \"___mf_id_altered__\";\n        const INIT = \"___init____\";\n\n        /*\n         * the search root for the dom element search\n         */\n        let searchRoot = new DQ(node || document.body).querySelectorAll(`form input [name='${P_CLIENT_WINDOW}']`);\n\n        /*\n         * lazy helper to fetch the window id from the window url\n         */\n        let fetchWindowIdFromUrl = () => ExtDomQuery.searchJsfJsFor(/jfwid=([^&;]*)/).orElse(null).value;\n\n        /*\n         * functional double check based on stream reduction\n         * the values should be identical or on INIT value which is a premise to\n         * skip the first check\n         *\n         * @param value1\n         * @param value2\n         */\n        let differenceCheck = (value1: string, value2: string) => {\n            if(value1 == INIT) {\n                return value2;\n            } else if (value1 == ALTERED || value1 != value2) {\n                return ALTERED;\n            }\n            return value2;\n        };\n\n        /*\n         * helper for cleaner code, maps the value from an item\n         *\n         * @param item\n         */\n        let getValue = (item: DQ) => item.attr(\"value\").value;\n        /*\n         * fetch the window id from the forms\n         * window ids must be present in all forms\n         * or non-existent. If they exist all of them must be the same\n         */\n\n        let formWindowId: Optional<string> = searchRoot.stream.map<string>(getValue).reduce(differenceCheck, INIT);\n\n\n        //if the resulting window id is set on altered then we have an unresolvable problem\n        assert(ALTERED != formWindowId.value, \"Multiple different windowIds found in document\");\n\n        /*\n         * return the window id or null\n         */\n        return formWindowId.value != INIT ? formWindowId.value : fetchWindowIdFromUrl();\n    }\n\n    /**\n     * collect and encode data for a given form element (must be of type form)\n     * find the jakarta.faces.ViewState element and encode its value as well!\n     * @return a concatenated string of the encoded values!\n     *\n     * @throws Error in case of the given element not being of type form!\n     * https://issues.apache.org/jira/browse/MYFACES-2110\n     */\n    export function getViewState(form: Element | string): string {\n        /**\n         *  type-check assert!, we opt for strong typing here\n         *  because it makes it easier to detect bugs\n         */\n\n        let element: DQ = DQ.byId(form, true);\n        if (!element.isTag(HTML_TAG_FORM)) {\n            throw new Error(getMessage(\"ERR_VIEWSTATE\"));\n        }\n\n        // determine the naming container scenario\n        const dummyContext = new Config({});\n        assignNamingContainerData(dummyContext, DQ.byId(form))\n        // fetch all non file input form elements\n        let formElements = element.deepElements.encodeFormElement()\n\n        // encode them! (file inputs are handled differently and are not part of the viewstate)\n        return encodeFormData(formElements, resoveNamingContainerMapper(dummyContext));\n    }\n\n    /**\n     * this at the first sight looks like a weird construct, but we need to do it this way\n     * for testing, we cannot proxy addRequestToQueue from the testing frameworks directly,\n     * but we need to keep it under unit tests.\n     */\n    export let queueHandler = {\n        /**\n         * public to make it accessible for tests\n         *\n         * adds a new request to our queue for further processing\n         */\n        addRequestToQueue: function (elem: DQ, form: DQ, reqCtx: ExtConfig, respPassThr: Config, delay = 0, timeout = 0) {\n            requestQueue = requestQueue ?? new AsynchronousQueue<XhrRequest>();\n            requestQueue.enqueue(new XhrRequest(elem, form, reqCtx, respPassThr, [], timeout), delay);\n        }\n    };\n\n    //----------------------------------------------- Methods ---------------------------------------------------------------------\n\n    /**\n     * the idea is to replace some placeholder parameters with their respective values\n     * placeholder params like  @all, @none, @form, @this need to be replaced by\n     * the values defined by the specification\n     *\n     * This function does it for the render parameters\n     *\n     * @param requestOptions the source options coming in as options object from faces.ajax.request (options parameter)\n     * @param targetContext the receiving target context\n     * @param issuingForm the issuing form\n     * @param sourceElementId the executing element triggering the faces.ajax.request (id of it)\n     */\n    function assignRender(requestOptions: Config, targetContext: Config, issuingForm: DQ, sourceElementId: string) {\n        if (requestOptions.getIf(CTX_PARAM_RENDER).isPresent()) {\n            remapDefaultConstants(targetContext.getIf(CTX_PARAM_REQ_PASS_THR).get({}), P_RENDER, <string>requestOptions.getIf(CTX_PARAM_RENDER).value, issuingForm, <any>sourceElementId, targetContext.getIf(VIEW_ID).value);\n        }\n    }\n\n    /**\n     * the idea is to replace some placeholder parameters with their respective values\n     * placeholder params like  @all, @none, @form, @this need to be replaced by\n     * the values defined by the specification\n     *\n     * This function does it for the execute parameters\n     *\n     * @param requestOptions the source options coming in as options object from faces.ajax.request (options parameter)\n     * @param targetContext the receiving target context\n     * @param issuingForm the issuing form\n     * @param sourceElementId the executing element triggering the faces.ajax.request (id of it)\n     */\n    function assignExecute(requestOptions: Config, targetContext: Config, issuingForm: DQ, sourceElementId: string) {\n\n        if (requestOptions.getIf(CTX_OPTIONS_EXECUTE).isPresent()) {\n            /*the options must be a blank delimited list of strings*/\n            /*compliance with Mojarra which automatically adds @this to an execute\n             * the spec rev 2.0a however states, if none is issued nothing at all should be sent down\n             */\n            requestOptions.assign(CTX_OPTIONS_EXECUTE).value = [requestOptions.getIf(CTX_OPTIONS_EXECUTE).value, IDENT_THIS].join(\" \");\n            remapDefaultConstants(targetContext.getIf(CTX_PARAM_REQ_PASS_THR).get({}), P_EXECUTE, <string>requestOptions.getIf(CTX_OPTIONS_EXECUTE).value, issuingForm, <any>sourceElementId, targetContext.getIf(VIEW_ID).value);\n        } else {\n            targetContext.assign(CTX_PARAM_REQ_PASS_THR, P_EXECUTE).value = sourceElementId;\n        }\n    }\n\n    /**\n     * apply the browser tab where the request was originating from\n     *\n     * @param form the form hosting the client window id\n     * @param targetContext the target context receiving the value\n     */\n    function assignClientWindowId(form: DQ, targetContext: Config) {\n\n        let clientWindow = $faces().getClientWindow(form.getAsElem(0).value);\n        if (clientWindow) {\n            targetContext.assign(CTX_PARAM_REQ_PASS_THR, P_CLIENT_WINDOW).value = clientWindow;\n        }\n    }\n\n    /**\n     * determines the current naming container\n     * and assigns it internally\n     *\n     * @param internalContext\n     * @param formElement\n     * @private\n     */\n    function assignNamingContainerData(internalContext: Config, formElement: DQ) {\n        const viewRootId = resolveViewRootId(formElement);\n\n        if(!!viewRootId) {\n            internalContext.assign(NAMED_VIEWROOT).value = true;\n            internalContext.assign(NAMING_CONTAINER_ID).value = viewRootId;\n        }\n    }\n\n    /**\n     * transforms the user values to the expected one\n     * with the proper none all form and this handling\n     * (note we also could use a simple string replace, but then\n     * we would have had double entries under some circumstances)\n     *\n     * there are several standardized constants which need a special treatment\n     * like @all, @none, @form, @this\n     *\n     * @param targetConfig the target configuration receiving the final values\n     * @param targetKey the target key\n     * @param userValues the passed user values (aka input string which needs to be transformed)\n     * @param issuingForm the form where the issuing element originates\n     * @param issuingElementId the issuing element\n     * @param rootNamingContainerId the naming container id (\"\" default if none is given)\n     */\n    function remapDefaultConstants(targetConfig: Config, targetKey: string, userValues: string, issuingForm: DQ, issuingElementId: string, rootNamingContainerId: string = \"\"): Config {\n        //a cleaner implementation of the transform list method\n        const SEP = $faces().separatorchar;\n        let iterValues: string[] = (userValues) ? trim(userValues).split(/\\s+/gi) : [];\n        let ret = [];\n        let processed: {[key: string]: boolean} = {};\n\n        /**\n         * remaps the client ids for the portlet case so that the server\n         * can deal with them either prefixed ir not\n         * also resolves the absolute id case (it was assumed the server does this, but\n         * apparently the RI does not, so we have to follow the RI behavior here)\n         * @param componentIdToTransform the componentId which needs post processing\n         */\n        const remapNamingContainer = componentIdToTransform => {\n            // pattern :<anything> must be prepended by viewRoot if there is one,\n            // otherwise we are in a not namespaced then only the id has to match\n            const rootNamingContainerPrefix = (rootNamingContainerId.length) ? rootNamingContainerId+SEP : EMPTY_STR;\n            let formClientId = issuingForm.id.value;\n            // nearest parent naming container relative to the form\n            const nearestNamingContainer = formClientId.substring(0, formClientId.lastIndexOf(SEP));\n            const nearestNamingContainerPrefix = (nearestNamingContainer.length) ? nearestNamingContainer + SEP : EMPTY_STR;\n            // Absolute search expressions, always start with SEP or the name of the root naming container\n            const hasLeadingSep = componentIdToTransform.indexOf(SEP) === 0;\n            const isAbsolutSearchExpr = hasLeadingSep || (rootNamingContainerId.length\n                && componentIdToTransform.indexOf(rootNamingContainerPrefix) == 0);\n            let finalIdentifier = \"\";\n            if (isAbsolutSearchExpr) {\n                //we cut off the leading sep if there is one\n                componentIdToTransform = hasLeadingSep ? componentIdToTransform.substring(1) : componentIdToTransform;\n                componentIdToTransform = componentIdToTransform.indexOf(rootNamingContainerPrefix) == 0 ? componentIdToTransform.substring(rootNamingContainerPrefix.length) : componentIdToTransform;\n                //now we prepend either the prefix or \"\" from the cut-off string to get the final result\n                finalIdentifier = [rootNamingContainerPrefix, componentIdToTransform].join(EMPTY_STR);\n            } else { //relative search according to the javadoc\n                //we cut off the root naming container id from the form\n                if (formClientId.indexOf(rootNamingContainerPrefix) == 0) {\n                    formClientId = formClientId.substring(rootNamingContainerPrefix.length);\n                }\n\n                //If prependId = true, the outer form id must be present in the id if same form\n                let hasPrependId = componentIdToTransform.indexOf(formClientId) == 0;\n                finalIdentifier = hasPrependId ?\n                    [rootNamingContainerPrefix, componentIdToTransform].join(EMPTY_STR) :\n                    [nearestNamingContainerPrefix,  componentIdToTransform].join(EMPTY_STR);\n            }\n            // We need to double check because we have scenarios where we have a naming container\n            // and no prepend (aka tobago testcase \"must handle ':' in IDs properly\", scenario 3,\n            // in this case we return the component id, and be happy\n            // we can roll a dom check here\n            return (!!document.getElementById(finalIdentifier)) ? finalIdentifier : componentIdToTransform;\n        };\n\n        // in this case we do not use lazy stream because it wont bring any code reduction\n        // or speedup\n        for (let cnt = 0; cnt < iterValues.length; cnt++) {\n            //avoid doubles\n            if (iterValues[cnt] in processed) {\n                continue;\n            }\n            switch (iterValues[cnt]) {\n                //@none no values should be sent\n                case IDENT_NONE:\n                    return targetConfig.delete(targetKey);\n                //@all is a pass through case according to the spec\n                case IDENT_ALL:\n                    targetConfig.assign(targetKey).value = IDENT_ALL;\n                    return targetConfig;\n                //@form pushes the issuing form id into our list\n                case IDENT_FORM:\n                    ret.push(remapNamingContainer(issuingForm.id.value));\n                    processed[issuingForm.id.value] = true;\n                    break;\n                //@this is replaced with the current issuing element id\n                case IDENT_THIS:\n                    if (!(issuingElementId in processed)) {\n                        ret.push(remapNamingContainer(issuingElementId));\n                        processed[issuingElementId] = true;\n                    }\n                    break;\n                default:\n                    ret.push(remapNamingContainer(iterValues[cnt]));\n                    processed[iterValues[cnt]] = true;\n            }\n        }\n\n        targetConfig.assign(targetKey).value = ret.join(\" \");\n        return targetConfig;\n    }\n\n    /**\n     * Filter the options given with a blacklist, so that only\n     * the values required for params-through are processed in the ajax request\n     *\n     * Note this is a bug carried over from the old implementation\n     * the spec conform behavior is to use params for passthrough values\n     * this will be removed soon, after it is cleared up whether removing\n     * it breaks any legacy code\n     *\n     * @param {Context} mappedOpts the options to be filtered\n     * @deprecated\n     */\n    function extractLegacyParams(mappedOpts: Options): Context {\n        //we now can use the full code reduction given by our stream api\n        //to filter\n        return Stream.ofAssoc(mappedOpts)\n            .filter(item => !(item[0] in BlockFilter))\n            .collect(new AssocArrayCollector());\n    }\n\n    function remapArrayToAssocArr(arrayedParams: [[string, any]] | {[key: string]: any}): {[key: string]: any} {\n        if(Array.isArray(arrayedParams)) {\n            return Stream.of(... arrayedParams).collect(new AssocArrayCollector());\n        }\n        return arrayedParams;\n    }\n\n    function resolveGlobalConfig(): any {\n        return  window?.[MYFACES]?.config ?? {};\n    }\n\n    /**\n     * Private helper to execute a function or code fragment\n     * @param source the source of the caller passed into the function as this\n     * @param event an event which needs to be passed down into the function\n     * @param func either a function or code fragment\n     * @return a boolean value, if the passed function returns false, then the\n     * caller is basically notified that the execution can now stop (JSF requirement for chain)\n     * @private\n     */\n    function resolveAndExecute(source: any, event: Event, func: Function | string): boolean {\n        if (\"string\" != typeof func) {\n            //function is passed down as chain parameter, can be executed as is\n            return (<Function>func).call(source, event) !== false;\n        } else {\n            //either a function or a string can be passed in case of a string we have to wrap it into another function\n            //it is not a plain executable code but a definition\n            let sourceCode = trim(<string>func);\n            if (sourceCode.indexOf(\"function \") == 0) {\n                sourceCode = `return ${sourceCode} (event)`;\n            }\n            return new Function(\"event\", sourceCode).call(source, event) !== false;\n        }\n    }\n}\n","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Typescript port of the faces\\.push part in the myfaces implementation\n */\nimport {MAX_RECONNECT_ATTEMPTS, REASON_EXPIRED, RECONNECT_INTERVAL} from \"./core/Const\";\nimport {DQ} from \"mona-dish\";\n\n/**\n * Implementation class for the push functionality\n */\nexport module PushImpl {\n\n    const URL_PROTOCOL = DQ.global().location.protocol.replace(\"http\", \"ws\") + \"//\";\n\n\n    // we expose the member variables for testing purposes\n    // they are not directly touched outside of tests\n\n    /* socket map by token */\n    export let sockets = {};\n    /* component attributes by clientId */\n    export let components = {};\n    /* client ids by token (share websocket connection) */\n    export let clientIdsByTokens = {};\n\n\n    // needed for testing\n    export function reset() {\n        sockets = {};\n        components = {}\n        clientIdsByTokens = {}\n    }\n\n    /*\n     * Api implementations, exposed functions\n     */\n\n    /**\n     * @param socketClientId the sockets client identifier\n     * @param url the uri to reach the socket\n     * @param channel the channel name/id\n     * @param onopen The function to be invoked when the web socket is opened.\n     * @param onmessage The function to be invoked when a message is received.\n     * @param onerror The function to be invoked when an error occurs.\n     * @param onclose The function to be invoked when the web socket is closed.\n     * @param behaviors functions which are invoked whenever a message is received\n     * @param autoConnect Whether or not to automatically open the socket. Defaults to <code>false</code>.\n     */\n    export function init(socketClientId: string,\n                         url: string,\n                         channel: string,\n                         onopen: Function,\n                         onmessage: Function,\n                         onerror: Function,\n                         onclose: Function,\n                         behaviors: any,\n                         autoConnect: boolean) {\n        onclose = resolveFunction(onclose);\n\n        if (!DQ.global().WebSocket) { // IE6-9.\n            onclose(-1, channel);\n            return;\n        }\n\n        let channelToken = url.substr(url.indexOf('?') + 1);\n\n        if (!components[socketClientId]) {\n            components[socketClientId] = {\n                'channelToken': channelToken,\n                'onopen': resolveFunction(onopen),\n                'onmessage' : resolveFunction(onmessage),\n                'onerror' : resolveFunction(onerror),\n                'onclose': onclose,\n                'behaviors': behaviors,\n                'autoconnect': autoConnect};\n            if (!clientIdsByTokens[channelToken]) {\n                clientIdsByTokens[channelToken] = [];\n            }\n            clientIdsByTokens[channelToken].push(socketClientId);\n            if (!sockets[channelToken]){\n                sockets[channelToken] = new Socket(channelToken,\n                    getBaseURL(url), channel);\n            }\n        }\n\n        if (autoConnect) {\n            (DQ.global()?.faces ?? DQ.global()?.jsf).push.open(socketClientId);\n        }\n    }\n\n    export function open(socketClientId: string) {\n        getSocket(components[socketClientId]?.channelToken).open();\n    }\n\n    export function close(socketClientId: string) {\n        getSocket(components[socketClientId].channelToken).close();\n    }\n\n    // Private helper classes\n    // Private classes functions ----------------------------------------------------------------------------------\n    /**\n     * Creates a reconnecting web socket. When the web socket successfully connects on first attempt, then it will\n     * automatically reconnect on timeout with cumulative intervals of 500ms with a maximum of 25 attempts (~3 minutes).\n     * The <code>onclose</code> function will be called with the error code of the last attempt.\n     * @constructor\n     * @param {string} channelToken the channel token associated with this websocket connection\n     * @param {string} url The URL of the web socket\n     * @param {string} channel The name of the web socket channel.\n     */\n\n    class Socket {\n\n        socket: WebSocket;\n        reconnectAttempts = 0;\n\n        constructor(private channelToken: string, private url: string, private channel: string) {\n        }\n\n        open() {\n            if (this.socket && this.socket.readyState == 1) {\n                return;\n            }\n            this.socket = new WebSocket(this.url);\n\n            this.bindCallbacks();\n        }\n\n        // noinspection JSUnusedLocalSymbols\n        onopen(event: any) {\n            if (!this.reconnectAttempts) {\n                let clientIds = clientIdsByTokens[this.channelToken];\n                for (let i = clientIds.length - 1; i >= 0; i--) {\n                    let socketClientId = clientIds[i];\n                    components[socketClientId]?.['onopen']?.(this.channel);\n                }\n            }\n            this.reconnectAttempts = 0;\n        }\n\n        onerror(event: any) {\n            let message = JSON.parse(event.data);\n            //TODO replace this with a more readable Stream code\n            for (let i = clientIdsByTokens[this.channelToken].length - 1; i >= 0; i--) {\n                let socketClientId = clientIdsByTokens[this.channelToken][i];\n                if (document.getElementById(socketClientId)) {\n                    try {\n                        components[socketClientId]?.['onerror']?.(message, this.channel, event);\n                    } catch (e) {\n                        //Ignore\n                    }\n                } else {\n                    clientIdsByTokens[this.channelToken].splice(i, 1);\n                }\n            }\n            if (clientIdsByTokens[this.channelToken].length == 0) {\n                // tag disappeared\n                this.close();\n            }\n        }\n\n        onmmessage(event: any) {\n            let message = JSON.parse(event.data);\n            for (let i = clientIdsByTokens[this.channelToken].length - 1; i >= 0; i--) {\n                let socketClientId = clientIdsByTokens[this.channelToken][i];\n                if (document.getElementById(socketClientId)) {\n                    try {\n                        components[socketClientId]?.['onmessage']?.(message, this.channel, event);\n                    } catch (e) {\n                        //Ignore\n                    }\n                    let behaviors = components?.[socketClientId]?.['behaviors'];\n                    let functions = behaviors?.[message];\n                    if (functions && functions.length) {\n                        for (let j = 0; j < functions.length; j++) {\n                            try {\n                                functions[j](null);\n                            } catch (e) {\n                                //Ignore\n                            }\n                        }\n                    }\n                } else {\n                    clientIdsByTokens[this.channelToken].splice(i, 1);\n                }\n            }\n            if (clientIdsByTokens[this.channelToken].length == 0) {\n                // tag disappeared\n                this.close();\n            }\n        }\n\n        onclose(event: any) {\n            if (!this.socket\n                || (event.code == 1000 && event.reason == REASON_EXPIRED)\n                || (event.code == 1008)\n                || (!this.reconnectAttempts)\n                || (this.reconnectAttempts >= MAX_RECONNECT_ATTEMPTS)) {\n                let clientIds = clientIdsByTokens[this.channelToken];\n                for (let i = clientIds.length - 1; i >= 0; i--) {\n                    let socketClientId = clientIds[i];\n                    components?.[socketClientId]?.['onclose']?.(event?.code, this?.channel, event);\n                }\n            } else {\n                setTimeout(this.open, RECONNECT_INTERVAL * this.reconnectAttempts++);\n            }\n        };\n\n        close() {\n            if (this.socket) {\n                let s = this.socket;\n                this.socket = null;\n                s.close();\n            }\n        }\n\n        /**\n         * bind the callbacks to the socket callbacks\n         */\n        private bindCallbacks() {\n            this.socket.onopen = (event: Event) => this.onopen(event);\n            this.socket.onmessage = (event: Event) => this.onmmessage(event);\n            this.socket.onclose = (event: Event) => this.onclose(event);\n            this.socket.onerror = (event: Event) => this.onerror(event);\n        }\n    }\n\n    // Private static functions ---------------------------------------------------------------------------------------\n\n    function getBaseURL(url: string) {\n        if (url.indexOf(\"://\") < 0) {\n            let base = DQ.global().location.hostname + \":\" + DQ.global().location.port;\n            return URL_PROTOCOL + base + url;\n        } else {\n            return url;\n        }\n    }\n\n    /**\n     * Get socket associated with given channelToken.\n     * @param channelToken The name of the web socket channelToken.\n     * @return Socket associated with given channelToken.\n     * @throws Error, when the channelToken is unknown, you may need to initialize\n     *                 it first via <code>init()</code> function.\n     */\n    function getSocket(channelToken: string): Socket {\n        let socket = sockets[channelToken];\n        if (socket) {\n            return socket;\n        } else {\n            throw new Error(\"Unknown channelToken: \" + channelToken);\n        }\n    }\n\n    function resolveFunction(fn: Function | string = () => {\n    }): Function {\n        return <Function>((typeof fn !== \"function\") && (fn = DQ.global()[fn]), fn);\n    }\n\n}","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * [export const] constants\n */\n\nexport const XML_ATTR_NAMED_VIEWROOT = \"namedViewRoot\";\nexport const NAMED_VIEWROOT = \"namedViewRoot\";\n\nexport const P_PARTIAL_SOURCE = \"jakarta.faces.source\";\nexport const NAMING_CONTAINER_ID = \"myfaces.partialId\";\n\nexport const VIEW_ID = \"myfaces.viewId\";\nexport const P_VIEWSTATE = \"jakarta.faces.ViewState\";\nexport const P_CLIENT_WINDOW = \"jakarta.faces.ClientWindow\";\nexport const P_VIEWROOT = \"jakarta.faces.ViewRoot\";\nexport const P_VIEWHEAD = \"jakarta.faces.ViewHead\";\nexport const P_VIEWBODY = \"jakarta.faces.ViewBody\";\n\nexport const P_RESOURCE = \"jakarta.faces.Resource\";\n\n/*some useful definitions*/\n\nexport const EMPTY_FUNC = Object.freeze(() => {\n});\nexport const EMPTY_STR = \"\";\nexport const EMPTY_MAP = Object.freeze({});\n\nexport const HTML_VIEWSTATE = [\"<input type='hidden'\", \"name='\", P_VIEWSTATE, \"' value='' />\"].join(EMPTY_STR);\nexport const HTML_CLIENT_WINDOW = [\"<input type='hidden'\", \"' name='\", P_CLIENT_WINDOW, \"' value='' />\"].join(EMPTY_STR);\n\n\n/*internal identifiers for options*/\nexport const IDENT_ALL = \"@all\";\nexport const IDENT_NONE = \"@none\";\nexport const IDENT_THIS = \"@this\";\nexport const IDENT_FORM = \"@form\";\n\n\nexport const P_AJAX = \"jakarta.faces.partial.ajax\";\nexport const P_EXECUTE = \"jakarta.faces.partial.execute\";\nexport const P_RENDER = \"jakarta.faces.partial.render\";\n/*render override for viewbody or viewroot, in both cases an all is performed*/\nexport const P_RENDER_OVERRIDE = \"_myfaces.rendeOverride\";\nexport const P_EVT = \"jakarta.faces.partial.event\";\n\nexport const P_RESET_VALUES = \"jakarta.faces.partial.resetValues\";\nexport const P_WINDOW_ID = \"jakarta.faces.windowId\";\n\nexport const P_BEHAVIOR_EVENT = \"jakarta.faces.behavior.event\";\n\nexport const CTX_PARAM_RENDER = \"render\";\nexport const WINDOW_ID = \"windowId\";\n\n/* message types */\nexport const ERROR = \"error\";\nexport const EVENT = \"event\";\n\nexport const ON_ERROR = \"onerror\";\nexport const ON_EVENT = \"onevent\";\n\n/* event emitting stages */\nexport const BEGIN = \"begin\";\nexport const COMPLETE = \"complete\";\nexport const SUCCESS = \"success\";\n\nexport const SOURCE = \"source\";\nexport const STATUS = \"status\";\n\n\nexport const ERROR_NAME = \"error-name\";\nexport const ERROR_MESSAGE = \"error-message\";\n\n\nexport const RESPONSE_TEXT = \"responseText\";\nexport const RESPONSE_XML = \"responseXML\";\n\n/*ajax errors spec 14.4.2*/\nexport const HTTPERROR = \"httpError\";\nexport const EMPTY_RESPONSE = \"emptyResponse\";\nexport const MALFORMEDXML = \"malformedXML\";\nexport const SERVER_ERROR = \"serverError\";\nexport const CLIENT_ERROR = \"clientError\";\nexport const TIMEOUT_EVENT = \"timeout\";\n\nexport const CTX_OPTIONS_PARAMS = \"params\";\nexport const CTX_OPTIONS_DELAY = \"delay\";\nexport const DELAY_NONE = 'none';\nexport const CTX_OPTIONS_TIMEOUT = \"timeout\";\nexport const CTX_OPTIONS_RESET = \"resetValues\";\nexport const CTX_OPTIONS_EXECUTE = \"execute\";\n\nexport const CTX_PARAM_MF_INTERNAL = \"myfaces.internal\";\nexport const CTX_PARAM_SRC_FRM_ID = \"myfaces.source.formId\";\nexport const CTX_PARAM_SRC_CTL_ID = \"myfaces.source.controlId\";\nexport const CTX_PARAM_REQ_PASS_THR = \"myfaces.request.passThrough\";\n\nexport const CONTENT_TYPE = \"Content-Type\";\nexport const HEAD_FACES_REQ = \"Faces-Request\";\nexport const REQ_ACCEPT = \"Accept\";\nexport const VAL_AJAX = \"partial/ajax\";\nexport const ENCODED_URL = \"jakarta.faces.encodedURL\";\nexport const REQ_TYPE_GET = \"GET\";\nexport const REQ_TYPE_POST = \"POST\";\nexport const STATE_EVT_BEGIN = \"begin\"; //TODO remove this\nexport const STATE_EVT_TIMEOUT = \"TIMEOUT_EVENT\";\nexport const STATE_EVT_COMPLETE = \"complete\"; //TODO remove this\nexport const URL_ENCODED = \"application/x-www-form-urlencoded\";\nexport const MULTIPART = \"multipart/form-data\";\nexport const NO_TIMEOUT = 0;\nexport const STD_ACCEPT = \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\";\n\nexport const HTML_TAG_HEAD = \"HEAD\";\nexport const HTML_TAG_FORM = \"FORM\";\nexport const HTML_TAG_BODY = \"BODY\";\nexport const HTML_TAG_LINK = \"LINK\";\nexport const HTML_TAG_SCRIPT = \"SCRIPT\";\nexport const HTML_TAG_STYLE = \"STYLE\";\n\n\nexport const SEL_VIEWSTATE_ELEM = \"[name='\" + P_VIEWSTATE + \"']\";\nexport const SEL_CLIENT_WINDOW_ELEM = \"[name='\" + P_CLIENT_WINDOW + \"']\";\nexport const SEL_RESPONSE_XML = \"responseXML\";\n\nexport const PHASE_PROCESS_RESPONSE = \"processResponse\";\n\n\nexport const ERR_NO_PARTIAL_RESPONSE = \"Partial response not set\";\n\nexport const ATTR_URL = \"url\";\nexport const ATTR_NAME = \"name\";\nexport const ATTR_VALUE = \"value\";\nexport const ATTR_ID = \"id\";\n\n/*partial response types*/\nexport const XML_TAG_PARTIAL_RESP = \"partial-response\";\n\n/*partial commands*/\nexport const XML_TAG_CHANGES = \"changes\";\nexport const XML_TAG_UPDATE = \"update\";\nexport const XML_TAG_DELETE = \"delete\";\nexport const XML_TAG_INSERT = \"insert\";\nexport const XML_TAG_EVAL = \"eval\";\nexport const XML_TAG_ERROR = \"error\";\nexport const XML_TAG_ATTRIBUTES = \"attributes\";\nexport const XML_TAG_EXTENSION = \"extension\";\nexport const XML_TAG_REDIRECT = \"redirect\";\nexport const XML_TAG_BEFORE = \"before\";\nexport const XML_TAG_AFTER = \"after\";\nexport const XML_TAG_ATTR = \"attribute\";\n\n\n/*other constants*/\n\nexport const UPDATE_FORMS = \"myfaces.updateForms\";\nexport const UPDATE_ELEMS = \"myfaces.updateElems\";\n\n//we want the head elements to be processed before we process the body\n//but after the inner html is done\nexport const DEFERRED_HEAD_INSERTS = \"myfaces.headElems\";\n\nexport const MYFACES = \"myfaces\";\n\nexport const MF_NONE = \"__mf_none__\";\n\nexport const REASON_EXPIRED = \"Expired\";\n\nexport const APPLIED_VST = \"myfaces.appliedViewState\";\nexport const APPLIED_CLIENT_WINDOW = \"myfaces.appliedClientWindow\";\n\nexport const RECONNECT_INTERVAL = 500;\nexport const MAX_RECONNECT_ATTEMPTS = 25;\n\nexport const UNKNOWN = \"UNKNOWN\";\n\n/**\n * helper to remap the namespaces variables for 2.3\n * from 2.3 to 4.0 every javax namespace has been changed\n * to faces\n * To take the compatibility layer out this method just has to be\n * changed to a simple value passthrough\n */\n\nexport function $faces(): FacesAPI {\n     return (window?.faces ?? window?.jsf) as FacesAPI;\n}\n\nexport function $nsp(inputNamespace?: any): any {\n     if((!inputNamespace) || !inputNamespace?.replace) {\n          return inputNamespace;\n     }\n     return (!!window?.faces) ? inputNamespace.replace(/javax\\.faces/gi,\"jakarta.faces\"): inputNamespace.replace(/jakarta\\.faces/gi, \"javax.faces\");\n}\n\n","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {EMPTY_STR, P_VIEWSTATE} from \"./Const\";\n\nexport interface IdValueHolder {\n\n    readonly id: string;\n    readonly value: string;\n\n}\n\n/**\n * a helper class to isolate the\n * view state and client window and other\n * future states which follow a similar pattern\n */\nexport class StateHolder implements IdValueHolder {\n\n    nameSpace: string;\n\n    constructor(public id: string, public value: string) {\n        let viewStatePos = id.indexOf(P_VIEWSTATE);\n        this.nameSpace = viewStatePos > 0 ? id.substr(0, viewStatePos - 1) : EMPTY_STR;\n    }\n\n    get hasNameSpace(): boolean {\n        return !!(this?.nameSpace ?? EMPTY_STR).length;\n    }\n}\n","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Messages {\n    MSG_TEST = \"Testmessage\";\n\n    /*Messages*/\n    /** @constant */\n    MSG_DEV_MODE = \"Note, this message is only sent, because project stage is development and no \" +\n        \"other error listeners are registered.\";\n    /** @constant */\n    MSG_AFFECTED_CLASS = \"Affected Class=\";\n    /** @constant */\n    MSG_AFFECTED_METHOD = \"Affected Method=\";\n    /** @constant */\n    MSG_ERROR_NAME = \"Error Name=\";\n    /** @constant */\n    MSG_ERROR_MESSAGE = \"Error Message=\";\n    /** @constant */\n    MSG_SERVER_ERROR_NAME = \"Server Error Name=\";\n\n    /** @constant */\n    MSG_ERROR_DESC = \"Error Description=\";\n    /** @constant */\n    MSG_ERROR_NO = \"Error Number=\";\n    /** @constant */\n    MSG_ERROR_LINENO = \"Error Line Number=\";\n\n    /*Errors and messages*/\n    /** @constant */\n    ERR_FORM = \"Sourceform could not be determined, either because element is not attached to a form or we have multiple forms with named elements of the same identifier or name, stopping the ajax processing\";\n    /** @constant */\n    ERR_VIEWSTATE = \"faces.viewState= param value not of type form!\";\n    /** @constant */\n    ERR_TRANSPORT = \"Transport type {0} does not exist\";\n    /** @constant */\n    ERR_EVT_PASS = \"an event must be passed down (either a an event object null or undefined) \";\n    /** @constant */\n    ERR_CONSTRUCT = \"Parts of the response couldn't be retrieved when constructing the event data= {0} \";\n    /** @constant */\n    ERR_MALFORMEDXML = \"The server response could not be parsed, the server has returned with a response which is not xml !\";\n    /** @constant */\n    ERR_SOURCE_FUNC = \"source cannot be a function (probably source and event were not defined or set to null\";\n    /** @constant */\n    ERR_EV_OR_UNKNOWN = \"An event object or unknown must be passed as second parameter\";\n    /** @constant */\n    ERR_SOURCE_NOSTR = \"source cannot be a string\";\n    /** @constant */\n    ERR_SOURCE_DEF_NULL = \"source must be defined or null\";\n\n    //_Lang.js\n    /** @constant */\n    ERR_MUST_STRING = \"{0}: {1} namespace must be of type String\";\n    /** @constant */\n    ERR_REF_OR_ID = \"{0}: {1} a reference node or identifier must be provided\";\n    /** @constant */\n    ERR_PARAM_GENERIC = \"{0}: parameter {1} must be of type {2}\";\n    /** @constant */\n    ERR_PARAM_STR = \"{0}: {1} param must be of type string\";\n    /** @constant */\n    ERR_PARAM_STR_RE = \"{0}: {1} param must be of type string or a regular expression\";\n    /** @constant */\n    ERR_PARAM_MIXMAPS = \"{0}: both a source as well as a destination map must be provided\";\n    /** @constant */\n    ERR_MUST_BE_PROVIDED = \"{0}: an {1} and a {2} must be provided\";\n    /** @constant */\n    ERR_MUST_BE_PROVIDED1 = \"{0}: {1} must be set\";\n\n    /** @constant */\n    ERR_REPLACE_EL = \"replaceElements called while evalNodes is not an array\";\n\n    /** @constant */\n    ERR_EMPTY_RESPONSE = \"{0}: The response cannot be null or empty!\";\n    /** @constant */\n    ERR_ITEM_ID_NOTFOUND = \"{0}: item with identifier {1} could not be found\";\n    /** @constant */\n    ERR_PPR_IDREQ = \"{0}: Error in PPR Insert, id must be present\";\n    /** @constant */\n    ERR_PPR_INSERTBEFID = \"{0}: Error in PPR Insert, before id or after id must be present\";\n    /** @constant */\n    ERR_PPR_INSERTBEFID_1 = \"{0}: Error in PPR Insert, before  node of id {1} does not exist in document\";\n    /** @constant */\n    ERR_PPR_INSERTBEFID_2 = \"{0}: Error in PPR Insert, after  node of id {1} does not exist in document\";\n\n    /** @constant */\n    ERR_PPR_DELID = \"{0}: Error in delete, id not in xml markup\";\n    /** @constant */\n    ERR_PPR_UNKNOWNCID = \"{0}:  Unknown Html-Component-ID= {1}\";\n\n    /** @constant */\n    ERR_NO_VIEWROOTATTR = \"{0}: Changing of ViewRoot attributes is not supported\";\n    /** @constant */\n    ERR_NO_HEADATTR = \"{0}: Changing of Head attributes is not supported\";\n    /** @constant */\n    ERR_RED_URL = \"{0}: Redirect without url\";\n\n    /** @constant */\n    ERR_REQ_FAILED_UNKNOWN = \"Request failed with unknown status\";\n\n    /** @constant */\n    ERR_REQU_FAILED = \"Request failed with status {0} and reason {1}\";\n\n    /** @constant */\n    UNKNOWN = \"UNKNOWN\";\n}","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Config, Lang, XMLQuery} from \"mona-dish\";\n\nimport {DQ} from \"mona-dish\";\nimport {\n    ATTR_URL,\n    EMPTY_RESPONSE,\n    EMPTY_STR, ERR_NO_PARTIAL_RESPONSE, MALFORMEDXML,\n    ON_ERROR,\n    ON_EVENT,\n    PHASE_PROCESS_RESPONSE,\n    XML_TAG_PARTIAL_RESP\n} from \"../core/Const\";\nimport {ExtLang} from \"./Lang\";\n\n\n/**\n * a set of internal code assertions\n * which raise an error\n *\n */\nexport module Assertions {\n\n\n\n    export function assertRequestIntegrity(options: Config, elem: DQ): void | never {\n        /*assert if the onerror is set and once if it is set it must be of type function*/\n        assertFunction(options.getIf(ON_ERROR).value);\n        /*assert if the onevent is set and once if it is set it must be of type function*/\n        assertFunction(options.getIf(ON_EVENT).value);\n        //improve the error messages if an empty elem is passed\n        //Assertions.assertElementExists(elem);\n        assert(elem.isPresent(), ExtLang.getMessage(\"ERR_MUST_BE_PROVIDED1\", \"{0}: source  must be provided or exist\", \"source element id\"), \"faces.ajax.request\", \"ArgNotSet\",  )\n    }\n\n    export function assertUrlExists(node: XMLQuery): void | never {\n        if (node.attr(ATTR_URL).isAbsent()) {\n            throw Assertions.raiseError(new Error(), ExtLang.getMessage(\"ERR_RED_URL\", null, \"processRedirect\"), \"processRedirect\");\n        }\n    }\n\n    /**\n     * checks the xml for various issues which can occur\n     * and prevent a proper processing\n     */\n    export function assertValidXMLResponse(responseXML: XMLQuery) : void | never  {\n        assert(!responseXML.isAbsent(), EMPTY_RESPONSE, PHASE_PROCESS_RESPONSE);\n        assert(!responseXML.isXMLParserError(),  responseXML.parserErrorText(EMPTY_STR), PHASE_PROCESS_RESPONSE);\n        assert(responseXML.querySelectorAll(XML_TAG_PARTIAL_RESP).isPresent(), ERR_NO_PARTIAL_RESPONSE, PHASE_PROCESS_RESPONSE);\n    }\n\n    /**\n     * internal helper which raises an error in the\n     * format we need for further processing\n     *\n     * @param error\n     * @param message the message\n     * @param caller\n     * @param title the title of the error (optional)\n     * @param name the name of the error (optional)\n     */\n    export function raiseError(error: any, message: string, caller ?: string, title ?: string, name ?: string): Error {\n\n        let finalTitle = title ?? MALFORMEDXML;\n        let finalName = name ?? MALFORMEDXML;\n        let finalMessage = message ?? EMPTY_STR;\n\n        //TODO clean up the messy makeException, this is a perfect case for encapsulation and sane defaults\n        return ExtLang.makeException(error, finalTitle, finalName, \"Response\", caller || (((<any>arguments).caller) ? (<any>arguments).caller.toString() : \"_raiseError\"), finalMessage);\n    }\n\n    /*\n     * using the new typescript 3.7 compiler assertion functionality to improve compiler hinting\n     * we are not fully there yet, but soon\n     */\n\n    export function assert(value: any, msg = EMPTY_STR, caller=EMPTY_STR, title=\"Assertion Error\"): asserts value {\n        if(!value) {\n            throw Assertions.raiseError(new Error(), msg ,caller, title);\n        }\n    }\n\n\n    export function assertType(value: any, theType: any, msg = EMPTY_STR, caller=EMPTY_STR, title=\"Type Assertion Error\"): asserts value {\n        if((!!value) && !Lang.assertType(value,theType)) {\n            throw Assertions.raiseError(new Error(), msg ,caller, title);\n        }\n    }\n\n    export function assertFunction(value: any, msg = EMPTY_STR, caller=EMPTY_STR, title=\"Assertion Error\"): asserts value is Function {\n        assertType(value, \"function\", msg, caller, title);\n    }\n\n    export function assertDelay(value: any) {\n        if(!(value >= 0)) { // >= 0 abbreviation which covers all cases of non positive values,\n            // including NaN and non numeric strings, no type equality is deliberate here,\n            throw new Error(\"Invalid delay value: \" + value);\n        }\n    }\n}\n\n\n","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {AsyncRunnable} from \"./AsyncRunnable\";\n\n/**\n * Asynchronous queue which starts to work\n * through the callbacks until the queue is empty\n *\n * Every callback must be of async runnable\n * which is sort of an extended promise which has\n * added a dedicated cancel and start point\n *\n * This interface can be used as wrapper contract\n * for normal promises if needed.\n */\nexport class AsynchronousQueue<T extends AsyncRunnable<any>> {\n\n    private runnableQueue = [];\n    private delayTimeout: null | ReturnType<typeof setTimeout>;\n\n    currentlyRunning: AsyncRunnable<any>;\n\n    constructor() {\n    }\n\n    /**\n     * simple is empty accessor, returns true if queue is empty atm\n     */\n    get isEmpty(): boolean {\n        return !this.runnableQueue.length;\n    }\n\n    /**\n     * enqueues an element and starts the\n     * asynchronous work loop if not already running\n     *\n     * @param element the element to be queued and processed\n     * @param delay possible delay after our usual process or drop if something newer is incoming algorithm\n     */\n    enqueue(element: T, delay = 0) {\n        if (this.delayTimeout) {\n            clearTimeout(this.delayTimeout);\n            this.delayTimeout = null;\n        }\n        if (delay) {\n            this.delayTimeout = setTimeout(() => {\n                this.appendElement(element);\n            }) as any;\n        } else {\n            this.appendElement(element);\n        }\n    }\n\n    /**\n     * fetches the next element from the queue (first in first out order)\n     */\n    dequeue(): T | undefined{\n        return this.runnableQueue.shift();\n    }\n\n    /**\n     * clears up all elements from the queue\n     */\n    cleanup() {\n        this.currentlyRunning = null;\n        this.runnableQueue.length = 0;\n    }\n\n    /**\n     * cancels the currently running element and then cleans up the queue\n     * aka cancel the queue entirely\n     */\n    cancel() {\n        try {\n            if (this.currentlyRunning) {\n                this.currentlyRunning.cancel();\n            }\n        } finally {\n            this.cleanup();\n        }\n    }\n\n    private callForNextElementToProcess() {\n        this.runEntry();\n    }\n\n    private appendElement(element: T) {\n        //only if the first element is added we start with a trigger\n        //otherwise a process already is running and not finished yet at that\n        //time\n        this.runnableQueue.push(element);\n        if (!this.currentlyRunning) {\n            this.runEntry();\n        }\n    }\n\n    private runEntry() {\n        if (this.isEmpty) {\n            this.currentlyRunning = null;\n            return;\n        }\n        this.currentlyRunning = this.dequeue();\n        this.currentlyRunning\n            .catch((e) => {\n                //in case of an error we always clean up the remaining calls\n                //to allow a clean recovery of the application\n                this.cleanup();\n                throw e;\n            })\n            .then(\n                //the idea is to trigger the next over an event to reduce\n                //the number of recursive calls (stacks might be limited\n                //compared to ram)\n                //naturally give we have a DOM, the DOM is the natural event dispatch system\n                //which we can use, to decouple the calls from a recursive stack call\n                //(the browser engine will take care of that)\n                () => this.callForNextElementToProcess()\n            ).start();\n    }\n}","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Config, IValueHolder, Optional, DomQuery, DQ, Stream, ArrayCollector} from \"mona-dish\";\nimport {$nsp, P_WINDOW_ID} from \"../core/Const\";\n\n\n/**\n * detects whether a source is a faces.js request\n *\n * @param source the source string for the faces.js request\n * @return true if a faces.js loading pattern is detected\n * @constructor\n */\nconst IS_FACES_SOURCE = (source?: string): boolean => {\n    //spec version smaller 4 we have to deal with the jsf namespace\n\n    return source && !!(source?.search(/\\/jakarta\\.faces\\.resource.*\\/faces\\.js.*/) != -1 ||\n        source?.search(/\\/faces-development\\.js.*/) != -1 ||\n        source?.search(/\\/faces-uncompressed\\.js.*/) != -1 ||\n        source?.search(/\\/faces[^.]*\\.js.*ln=jakarta.faces.*/gi) != -1 ||\n        //fallback without check for jsf, that way we allow both bookmarks\n        source?.search(/\\/javax\\.faces\\.resource.*\\/jsf\\.js.*/) != -1 ||\n            source?.search(/\\/jsf-development\\.js.*/) != -1 ||\n            source?.search(/\\/jsf-uncompressed\\.js.*/) != -1 ||\n            source?.search(/\\/jsf[^.]*\\.js.*ln=javax.faces.*/gi) != -1);\n}\n\n/**\n * namespace myfaces\\.testscripts can be used as extension point for internal\n * tests, those will be handled similarly to faces.js, in regard\n * to reload blocking on ajax requests\n *\n * Note: atm not used, used to be used in the old implementation\n * but still is reserved for now\n *\n * @param source the source to check\n * @constructor\n */\nconst IS_INTERNAL_SOURCE = (source: string): boolean => {\n    return source.search(/\\/faces[^.]*\\.js.*ln=myfaces.testscripts.*/gi) != -1 || source.search(/\\/jsf[^.]*\\.js.*ln=myfaces.testscripts.*/gi) != -1;\n}\n\n\nconst ATTR_SRC = 'src';\n\n/**\n * Extension which adds implementation specific\n * meta-data to our dom query\n *\n * Usage\n * el = new ExtDQ(oldReference)\n * nonce = el.nonce\n * windowId = el.getWindowId\n */\nexport class ExtDomQuery extends DQ {\n\n    static get windowId() {\n        return new ExtDomQuery(document.body).windowId;\n    }\n\n    static get nonce(): string {\n        return new ExtDomQuery(document.body).nonce;\n    }\n\n    get windowId(): string | null {\n\n        const fetchWindowIdFromURL = function (): string | null {\n            let href = window.location.href;\n            let windowId = \"windowId\";\n            let regex = new RegExp(\"[\\\\?&]\" + windowId + \"=([^&#\\\\;]*)\");\n            let results = regex.exec(href);\n            //initial trial over the url and a regexp\n            if (results != null) return results[1];\n            return null;\n        };\n\n        //byId ($)\n        if (this.value.isPresent()) {\n            let result = this.querySelectorAll(\"form input[name='\" + P_WINDOW_ID + \"']\");\n            if (result.length > 1) {\n                throw Error(\"Multiple different windowIds found in document\");\n            }\n\n            return (result.isPresent()) ? (<HTMLInputElement>result.getAsElem(0).value).value : fetchWindowIdFromURL();\n        } else {\n            return fetchWindowIdFromURL();\n        }\n    }\n\n    /*\n    * determines the faces.js nonce and adds them to the namespace\n    * this is done once and only lazily\n    */\n    get nonce(): string | null {\n        //already processed\n        let myfacesConfig = new ExtConfig(window.myfaces);\n        let nonce: IValueHolder<string> = myfacesConfig.getIf(\"config\", \"cspMeta\", \"nonce\");\n        if (nonce.value) {\n            return <string>nonce.value;\n        }\n\n        let curScript = new DQ(document.currentScript);\n        //since our baseline atm is ie11 we cannot use document.currentScript globally\n        if (!!this.extractNonce(curScript)) {\n            // fast-path for modern browsers\n            return this.extractNonce(curScript);\n        }\n        // fallback if the currentScript method fails, we just search the jsf tags for nonce, this is\n        // the last possibility\n        let nonceScript = DQ\n            .querySelectorAll(\"script[src], link[src]\")\n            .lazyStream\n            .filter((item) => this.extractNonce(item)  && item.attr(ATTR_SRC) != null)\n            .filter(item => IS_FACES_SOURCE(item.attr(ATTR_SRC).value))\n            .first();\n\n        if (nonceScript.isPresent()) {\n            return this.extractNonce(nonceScript.value);\n        }\n        return null;\n    }\n\n    static searchJsfJsFor(item: RegExp): Optional<String> {\n        return new ExtDomQuery(document).searchJsfJsFor(item);\n    }\n\n    /**\n     * searches the embedded faces.js for items like separator char etc.\n     * expects a match as variable under position 1 in the result match\n     * @param regExp\n     */\n    searchJsfJsFor(regExp: RegExp): Optional<string> {\n        //perfect application for lazy stream\n        return DQ.querySelectorAll(\"script[src], link[src]\").lazyStream\n            .filter(item => IS_FACES_SOURCE(item.attr(ATTR_SRC).value))\n            .map(item => item.attr(ATTR_SRC).value.match(regExp))\n            .filter(item => item != null && item.length > 1)\n            .map((result: string[]) => {\n                return decodeURIComponent(result[1]);\n            }).first();\n    }\n\n    globalEval(code: string, nonce ?: string): DQ {\n        return new ExtDomQuery(super.globalEval(code, nonce ?? this.nonce));\n    }\n\n    // called from base class runScripts, do not delete\n    // noinspection JSUnusedGlobalSymbols\n    globalEvalSticky(code: string, nonce ?: string): DQ {\n        return new ExtDomQuery(super.globalEvalSticky(code, nonce ?? this.nonce));\n    }\n\n    /**\n     * decorated run scripts which takes our jsf extensions into consideration\n     * (standard DomQuery will let you pass anything)\n     * @param sticky if set to true the internally generated element for the script is left in the dom\n     * @param whiteListed\n     */\n    runScripts(sticky = false, whiteListed?: (src: string) => boolean): DomQuery {\n        const whitelistFunc = (src: string): boolean => {\n            return (whiteListed?.(src) ?? true) && !IS_FACES_SOURCE(src) && !IS_INTERNAL_SOURCE(src);\n        };\n        return super.runScripts(sticky, whitelistFunc);\n    }\n\n    /**\n     * adds the elements in this ExtDomQuery to the head\n     *\n     * @param suppressDoubleIncludes checks for existing elements in the head before running the insert\n     */\n    runHeadInserts(suppressDoubleIncludes = true): void {\n        let head = ExtDomQuery.byId(document.head);\n        //automated nonce handling\n        let processedScripts = [];\n\n        // the idea is only to run head inserts on resources\n        // which do not exist already, that way\n        // we can avoid double includes on subsequent resource\n        // requests.\n        function resourceIsNew(element: DomQuery) {\n            if(!suppressDoubleIncludes) {\n                return true;\n            }\n            const tagName = element.tagName.value;\n            if(!tagName) {\n                // text node they do not have tag names, so we can process them as they are without\n                // any further ado\n                return true;\n            }\n            let reference = element.attr(\"href\")\n                .orElseLazy(() => element.attr(\"src\").value)\n                .orElseLazy(() => element.attr(\"rel\").value);\n\n            if (!reference.isPresent()) {\n                return true;\n            }\n            return !head.querySelectorAll(`${tagName}[href='${reference.value}']`).length &&\n                !head.querySelectorAll(`${tagName}[src='${reference.value}']`).length &&\n                !head.querySelectorAll(`${tagName}[rel='${reference.value}']`).length;\n        }\n\n        this\n            .filter(resourceIsNew)\n            .each(element => {\n                if(element.tagName.value != \"SCRIPT\") {\n                    //we need to run runScripts properly to deal with the rest\n                    new ExtDomQuery(...processedScripts).runScripts(true);\n                    processedScripts = [];\n                    head.append(element);\n                } else {\n                    processedScripts.push(element);\n                }\n            });\n        new ExtDomQuery(...processedScripts).runScripts(true);\n    }\n\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @param deep whether the search should go into embedded shadow dom elements\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): ExtDomQuery {\n        const ret = DomQuery.byId(selector, deep);\n        return new ExtDomQuery(ret);\n    }\n\n    private extractNonce(curScript: DomQuery) {\n        return (curScript.getAsElem(0).value as HTMLElement)?.nonce ?? curScript.attr(\"nonce\").value;\n    }\n\n    filter(func: (item: DomQuery) => boolean): ExtDomQuery {\n        return new ExtDomQuery(super.filter(func));\n    }\n}\n\nexport const ExtDQ = ExtDomQuery;\n\n/**\n * in order to reduce the number of interception points for the fallbacks we add\n * the namespace remapping straight to our config accessors\n */\nexport class ExtConfig extends  Config {\n\n    $nspEnabled = true;\n\n    constructor(root: any) {\n        super(root);\n    }\n\n    assignIf(condition: boolean, ...accessPath): IValueHolder<any> {\n        const accessPathMapped = this.remap(accessPath);\n        return super.assignIf(condition, ...accessPathMapped);\n    }\n\n    assign(...accessPath): IValueHolder<any> {\n        const accessPathMapped = this.remap(accessPath);\n        return super.assign(...accessPathMapped);\n    }\n\n    append(...accessPath): IValueHolder<any> {\n        return super.append(...accessPath);\n    }\n\n    appendIf(condition: boolean, ...accessPath): IValueHolder<any> {\n        const accessPathMapped = this.remap(accessPath);\n        return super.appendIf(condition, ...accessPathMapped);\n    }\n\n    getIf(...accessPath): Config {\n        const accessPathMapped = this.remap(accessPath);\n        return super.getIf(...accessPathMapped);\n    }\n\n    get(defaultVal: any): Config {\n        return super.get($nsp(defaultVal));\n    }\n\n    delete(key: string): Config {\n        return super.delete($nsp(key));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new ExtConfig(value);\n    }\n\n    protected getClass(): any {\n        return ExtConfig;\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    protected shallowCopy$(): Config {\n        const ret = super.shallowCopy$();\n        return new ExtConfig(ret);\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return new ExtConfig(super.deepCopy$());\n    }\n\n    /**\n     * helper to remap the namespaces of an array of access paths\n     * @param accessPath the access paths to be remapped\n     * @private returns an array of access paths with version remapped namespaces\n     */\n    private remap(accessPath: string[]): string[] {\n        if(!this.$nspEnabled) {\n            return accessPath;\n        }\n        return Stream.of(...accessPath).map(key => $nsp(key)).collect(new ArrayCollector());\n    }\n}","import {ArrayCollector, Config, DomQuery, DQ, LazyStream, Stream} from \"mona-dish\";\nimport {ExtDomQuery} from \"./ExtDomQuery\";\nimport {$faces, EMPTY_STR} from \"../core/Const\";\n\n/*\n * various routines for encoding and decoding url parameters\n * into configs and vice versa\n */\n\n\n/**\n * encodes a given form data into a url encoded string\n * @param formData the form data config object\n * @param paramsMapper the params mapper\n * @param defaultStr a default string if nothing comes out of it\n */\nexport function encodeFormData(formData: Config,\n                               paramsMapper = (inStr, inVal) => [inStr, inVal],\n                               defaultStr = EMPTY_STR): string {\n    if (formData.isAbsent()) {\n        return defaultStr;\n    }\n    const assocValues = formData.value;\n\n    const expandValueArrAndRename = key => Stream.of(...assocValues[key]).map(val => paramsMapper(key, val));\n    const isPropertyKey = key => assocValues.hasOwnProperty(key);\n    const isNotFile = ([, value]) => !(value instanceof ExtDomQuery.global().File);\n    const mapIntoUrlParam = keyVal => `${encodeURIComponent(keyVal[0])}=${encodeURIComponent(keyVal[1])}`;\n\n    const entries = LazyStream.of(...Object.keys(assocValues))\n        .filter(isPropertyKey)\n        .flatMap(expandValueArrAndRename)\n        //we cannot encode file elements that is handled by multipart requests anyway\n        .filter(isNotFile)\n        .map(mapIntoUrlParam)\n        .collect(new ArrayCollector());\n\n    return entries.join(\"&\")\n}\n\n/**\n * splits and decodes encoded values into strings containing of key=value\n * @param encoded encoded string\n */\nexport function decodeEncodedValues(encoded: string): Stream<string[]> {\n    const filterBlanks = item => !!(item || '').replace(/\\s+/g, '');\n    const splitKeyValuePair = line => {\n        let index = line.indexOf(\"=\");\n        if (index == -1) {\n            return [line];\n        }\n        return [line.substring(0, index), line.substring(index + 1)];\n    };\n\n    let requestParamEntries = decodeURIComponent(encoded).split(/&/gi);\n    return Stream.of(...requestParamEntries)\n        .filter(filterBlanks)\n        .map(splitKeyValuePair)\n}\n\n\n/**\n * gets all the input files and their corresponding file objects\n * @param dataSource\n */\nexport function resolveFiles(dataSource: DQ): Stream<[string, File]> {\n\n    const expandFilesArr = ([key, files]) => Stream.of(...files).map(file => [key, file]);\n    const remapFileInput = fileInput => [fileInput.name.value || fileInput.id.value, fileInput.filesFromElem(0)];\n    return dataSource\n        .querySelectorAllDeep(\"input[type='file']\")\n        .stream\n        .map(remapFileInput)\n        .flatMap(expandFilesArr);\n}\n\n\nexport function fixEmmptyParameters(keyVal: any[]): [string, any] {\n    return (keyVal.length < 3 ? [keyVal?.[0] ?? [], keyVal?.[1] ?? []] : keyVal) as [string, any];\n}\n\n/**\n * returns the decoded viewState from parentItem\n * @param parentItem\n */\nfunction resolveViewState(parentItem: DomQuery): Stream<string[] | [string, File]> {\n    const viewStateStr = $faces().getViewState(parentItem.getAsElem(0).value);\n\n    // we now need to decode it and then merge it into the target buf\n    // which hosts already our overrides (aka do not override what is already there(\n    // after that we need to deal with form elements on a separate level\n    return decodeEncodedValues(viewStateStr);\n}\n\n/**\n * gets all the inputs under the form parentItem\n * as stream\n * @param parentItem\n */\nexport function getFormInputsAsStream(parentItem: DomQuery): Stream<string[] | [string, File]> {\n    const standardInputs = resolveViewState(parentItem);\n    const fileInputs = resolveFiles(parentItem);\n    return  standardInputs.concat(fileInputs as any)\n}","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {DomQuery, DQ, DQ$} from \"mona-dish\";\nimport {$faces, $nsp, HTML_CLIENT_WINDOW, HTML_VIEWSTATE, P_CLIENT_WINDOW, P_VIEWSTATE} from \"../core/Const\";\n\n/**\n * Builder for hidden inputs.\n * ATM only ViewState and Client window\n * are supported (per spec)\n *\n * Improves readability in the response processor!\n */\nexport class HiddenInputBuilder {\n    private namingContainerId?: string;\n    private parent?: DomQuery;\n    private namedViewRoot: boolean = false;\n    private readonly name: string;\n    private readonly template: string;\n\n    constructor(private selector: string) {\n        const isViewState = selector.indexOf($nsp(P_VIEWSTATE)) != -1;\n        this.name = isViewState ? P_VIEWSTATE : P_CLIENT_WINDOW\n        this.template = isViewState ? HTML_VIEWSTATE : HTML_CLIENT_WINDOW\n    }\n\n    withNamingContainerId(namingContainer: string): HiddenInputBuilder {\n        this.namingContainerId = namingContainer;\n        return this;\n    }\n\n    withParent(parent: DomQuery): HiddenInputBuilder {\n        this.parent = parent;\n        return this;\n    }\n\n    withNamedViewRoot(namedViewRoot: boolean): HiddenInputBuilder {\n        this.namedViewRoot = namedViewRoot;\n        return this;\n    }\n\n\n    build(): DomQuery {\n        const SEP = $faces().separatorchar;\n\n        let existingStates = DQ$(`[name*='${$nsp(this.name)}']`);\n        let cnt = existingStates.stream.map(state => {\n            let ident: string = state.id.orElse(\"-1\").value;\n            ident = ident.substring(ident.lastIndexOf(SEP)+1);\n            return parseInt(ident);\n        })\n            .filter(item => !isNaN(item))\n            .reduce((item1, item2) => Math.max(item1, item2), -1).value;\n        //the maximum  new ident is the current max + 1\n        cnt++;\n\n\n        const newElement = DQ.fromMarkup($nsp(this.template));\n        newElement.id.value = ((this.namingContainerId?.length) ?\n            [this.namingContainerId,  $nsp(this.name),  cnt]:\n            [$nsp(this.name),  cnt]).join(SEP);\n\n        //name must be prefixed with the naming container id as well according to the jsdocs\n        if(this.namedViewRoot) {\n            newElement.name.value = (this.namingContainerId?.length) ?\n                [this.namingContainerId,  $nsp(this.name)].join(SEP): $nsp(this.name);\n        } else {\n            newElement.name.value = $nsp(this.name);\n        }\n\n\n        this?.parent?.append(newElement);\n        return newElement;\n    }\n}","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {Lang as LangBase, Config, Optional, DomQuery, DQ, Stream} from \"mona-dish\";\nimport {Messages} from \"../i18n/Messages\";\nimport {EMPTY_STR, HTML_TAG_FORM} from \"../core/Const\";\nimport {getEventTarget} from \"../xhrCore/RequestDataResolver\";\n\n\nexport module ExtLang {\n\n    let installedLocale: Messages;\n    let nameSpace = \"impl/util/Lang/\";\n\n    export function getLanguage(): string {\n        //TODO global config override\n\n        let language: string = (<any>navigator).languages?.[0] ?? navigator?.language;\n        language = language.split(\"-\")[0];\n        return language;\n    }\n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to safely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional\\.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optional<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer fails to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function failSaveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        return LangBase.saveResolve(resolverProducer, defaultValue);\n    }\n\n    /**\n     * under some conditions it makes sense to swallow errors and return a default value in the error case\n     * classical example the optional resolution of values in a chain (thankfully now covered by Typescript itself)\n     * another example which we have in our system is that some operations fail only under test due to test framework\n     * limitations while they cannot fail in the real world.\n     *\n     * @param resolverProducer a producer function which produces a value in the non error case\n     * @param defaultValue the default value in case of a fail of the function\n     */\n    export function failSaveExecute<T>(resolverProducer: () => any, defaultValue: T = null): void {\n        LangBase.saveResolve(resolverProducer, defaultValue);\n    }\n\n    /**\n     * returns a given localized message upon a given key\n     * basic java log like templating functionality is included\n     *\n     * @param  key the key for the message\n     * @param  defaultMessage optional default message if none was found\n     *\n     * Additionally, you can pass additional arguments, which are used\n     * in the same way java log templates use the params\n     *\n     * @param templateParams the param list to be filled in\n     */\n    export function getMessage(key: string, defaultMessage?: string, ...templateParams: Array<string>): string {\n        installedLocale = installedLocale ?? new Messages();\n\n        let msg = installedLocale[key] ?? defaultMessage ?? key;\n\n        Stream.of(...templateParams).each((param, cnt) => {\n            msg = msg.replace(new RegExp([\"\\\\{\", cnt, \"\\\\}\"].join(EMPTY_STR), \"g\"), param);\n        });\n\n        return msg;\n    }\n\n    /**\n     * transforms a key value pair into a string\n     * @param key the key\n     * @param val the value\n     * @param delimiter the delimiter\n     */\n    export function keyValToStr(key: string, val: string, delimiter: string = \"\\n\") {\n        return [key, val].join(delimiter);\n    }\n\n    /**\n     * creates an exception with additional internal parameters\n     * for extra information\n     *\n     * @param error\n     * @param  title the exception title\n     * @param  name  the exception name\n     * @param  callerCls the caller class\n     * @param  callFunc the caller function\n     * @param  message the message for the exception\n     */\n    export function makeException(error: Error, title: string, name: string, callerCls: string, callFunc: string, message: string): Error {\n\n        return new Error(message + (callerCls ?? nameSpace) + callFunc ?? (EMPTY_STR + (<any>arguments).caller.toString()));\n\n    }\n\n    /**\n     * fetches a global config entry\n     * @param  configName the name of the configuration entry\n     * @param  defaultValue\n     *\n     * @return either the config entry or if none is given the default value\n     */\n    export function getGlobalConfig(configName: string, defaultValue: any): any {\n        /**\n         * note we could use exists but this is a heavy operation, since the config name usually\n         * given this function here is called very often\n         * is a single entry without . in between we can do the lighter shortcut\n         */\n        return window?.myfaces?.config?.[configName] ?? defaultValue;\n    }\n\n    /**\n     * fetches the form in a fuzzy manner depending\n     * on an element or event target.\n     *\n     * The idea is that according to the jsf spec\n     * the enclosing form of the issuing element needs to be fetched.\n     *\n     * This is fine, but since then html5 came into the picture with the form attribute the element\n     * can be anywhere referencing its parent form.\n     *\n     * Also, theoretically you can have the case of an issuing element enclosing a set of forms\n     * (not really often used, but theoretically it could be input button allows to embed html for instance)\n     *\n     * So the idea is not to limit the issuing form determination to the spec case\n     * but also cover the theoretical and html5 corner case.\n     *\n     * @param elem\n     * @param event\n     */\n    export function getForm(elem: Element, event ?: Event): DQ | never {\n\n        let queryElem = new DQ(elem);\n        let eventTarget = (event) ?  new DQ(getEventTarget(event)) : DomQuery.absent;\n\n        if (queryElem.isTag(HTML_TAG_FORM)) {\n            return queryElem;\n        }\n\n        //html 5 for handling\n        if (queryElem.attr(HTML_TAG_FORM).isPresent()) {\n            let formId = queryElem.attr(HTML_TAG_FORM).value;\n            let foundForm = DQ.byId(formId, true);\n            if (foundForm.isPresent()) {\n                return foundForm;\n            }\n        }\n\n        let form = queryElem.firstParent(HTML_TAG_FORM)\n            .orElseLazy(() => queryElem.byTagName(HTML_TAG_FORM, true))\n            .orElseLazy(() => eventTarget.firstParent(HTML_TAG_FORM))\n            .orElseLazy(() => eventTarget.byTagName(HTML_TAG_FORM))\n            .first();\n\n        assertFormExists(form);\n\n        return form;\n    }\n\n    /**\n     * gets the local or global options with local ones having higher priority\n     * if no local or global one was found then the default value is given back\n     *\n     * @param  configName the name of the configuration entry\n     * @param  localOptions the local options root for the configuration myfaces as default marker is added\n     * implicitly\n     *\n     * @param  defaultValue\n     *\n     * @return either the config entry or if none is given the default value\n     */\n    export function getLocalOrGlobalConfig(localOptions: Config, configName: string, defaultValue: any): any {\n        return localOptions.value?.myfaces?.config?.[configName] ??\n            window?.myfaces?.config?.[configName] ??\n            defaultValue;\n    }\n\n    /**\n     * assert that the form exists and throw an exception in the case it does not\n     *\n     * @param form the form to check for\n     */\n    function assertFormExists(form: DomQuery): void | never {\n        if (form.isAbsent()) {\n            throw makeException(new Error(), null, null, \"Impl\", \"getForm\", getMessage(\"ERR_FORM\"));\n        }\n    }\n}","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n    EMPTY_STR, ERROR,\n    ERROR_MESSAGE,\n    ERROR_NAME,\n    RESPONSE_TEXT,\n    RESPONSE_XML, SERVER_ERROR,\n    SOURCE,\n    STATUS,\n    UNKNOWN\n} from \"../core/Const\";\nimport {Config} from \"mona-dish\";\n\nimport {EventData} from \"./EventData\";\nimport {ExtLang} from \"../util/Lang\";\nimport getMessage = ExtLang.getMessage;\n\n\nexport enum ErrorType {\n    SERVER_ERROR = \"serverError\",\n    HTTP_ERROR = \"httpError\",\n    CLIENT_ERROR = \"clientErrror\",\n    TIMEOUT = \"timeout\"\n}\n\n/**\n * the spec has a problem of having the error\n * object somewhat underspecified, there is no clear\n * description of the required contents.\n * I want to streamline it with mojarra here\n * hence we are going to move\n * everything into the same attributes,\n * I will add deprecated myfaces backwards compatibility attributes as well\n */\nexport class ErrorData extends EventData implements IErrorData {\n\n    type: string = \"error\";\n    source: HTMLElement;\n    sourceId: string;\n    errorName: string;\n    errorMessage: string;\n\n    responseText: string;\n    responseXML: any;\n\n    status: string;\n    typeDetails: ErrorType;\n\n    serverErrorName: string;\n    serverErrorMessage: string;\n    message: string;\n\n    constructor(source: string, errorName: string, errorMessage: string, responseText: string = null, responseXML: any = null, responseCode: string = \"200\", status: string = \"\", type = ErrorType.CLIENT_ERROR) {\n        super();\n        this.source = document.getElementById(source);\n        this.sourceId = source;\n        this.type = ERROR;\n        this.errorName = errorName;\n        //tck requires that the type is prefixed to the message itself (jsdoc also) in case of a server error\n        this.message = this.errorMessage = (type == SERVER_ERROR) ? type + \": \" + errorMessage : errorMessage;\n        this.responseCode = responseCode;\n        this.responseText = responseText;\n        this.status = status;\n        this.typeDetails = type;\n\n        if (type == ErrorType.SERVER_ERROR) {\n            this.serverErrorName = this.errorName;\n            this.serverErrorMessage = this.errorMessage;\n        }\n    }\n\n    static fromClient(e: Error): ErrorData {\n        return new ErrorData((e as any)?.source ?? \"client\", e?.name ?? EMPTY_STR, e?.message ?? EMPTY_STR, e?.stack ?? EMPTY_STR);\n    }\n\n    static fromHttpConnection(source: any, name: string, message: string, responseText, responseCode: number, status: string = EMPTY_STR): ErrorData {\n        return new ErrorData(source, name, message, responseText, responseCode, `${responseCode}`, status, ErrorType.HTTP_ERROR);\n    }\n\n    static fromGeneric(context: Config, errorCode: number, errorType: ErrorType = ErrorType.SERVER_ERROR): ErrorData {\n\n        let getMsg = this.getMsg;\n\n        let source = getMsg(context, SOURCE);\n        let errorName = getMsg(context, ERROR_NAME);\n        let errorMessage = getMsg(context, ERROR_MESSAGE);\n        let status = getMsg(context, STATUS);\n        let responseText = getMsg(context, RESPONSE_TEXT);\n        let responseXML = getMsg(context, RESPONSE_XML);\n\n\n        return new ErrorData(source, errorName, errorMessage, responseText, responseXML, errorCode + EMPTY_STR, status, errorType);\n    }\n\n    private static getMsg(context, param) {\n        return getMessage(context.getIf(param).orElse(EMPTY_STR).value);\n    }\n\n    static fromServerError(context: Config): ErrorData {\n        return this.fromGeneric(context, -1);\n    }\n\n}","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Config, DQ} from \"mona-dish\";\nimport {BEGIN, CTX_PARAM_REQ_PASS_THR, EVENT, P_PARTIAL_SOURCE, SOURCE} from \"../core/Const\";\n\nexport class EventData implements IEventData{\n    type: string;\n    status: string;\n    source: any;\n    responseCode: string;\n    responseText: string;\n    responseXML: Document;\n\n    static createFromRequest(request: XMLHttpRequest, context: Config, /*event name*/ name: string): EventData {\n\n        let eventData = new EventData();\n\n        eventData.type = EVENT;\n        eventData.status = name;\n\n        let sourceId: string = context.getIf(SOURCE)\n            .orElseLazy(() => context.getIf(P_PARTIAL_SOURCE).value)\n            .orElseLazy(() => context.getIf(CTX_PARAM_REQ_PASS_THR, P_PARTIAL_SOURCE).value)\n            .value;\n        if (sourceId) {\n            eventData.source = DQ.byId(sourceId, true).first().value.value;\n        }\n\n        if (name !== BEGIN) {\n            eventData.responseCode = request?.status?.toString();\n            eventData.responseText = request?.responseText;\n            eventData.responseXML = request?.responseXML;\n        }\n        return eventData;\n    }\n}\n","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, DomQuery, DQ} from \"mona-dish\";\nimport {\n    $faces,\n    $nsp,\n    CTX_OPTIONS_DELAY,\n    CTX_OPTIONS_TIMEOUT,\n    DELAY_NONE,\n    EMPTY_FUNC,\n    EMPTY_STR,\n    ENCODED_URL, NAMED_VIEWROOT, NAMING_CONTAINER_ID,\n    P_VIEWSTATE,\n    REQ_TYPE_GET,\n    REQ_TYPE_POST\n} from \"../core/Const\";\nimport {XhrFormData} from \"./XhrFormData\";\nimport {ExtLang} from \"../util/Lang\";\nimport {ExtConfig, ExtDomQuery} from \"../util/ExtDomQuery\";\nimport {Assertions} from \"../util/Assertions\";\n\n\n/**\n * Resolver functions for various aspects of the request data\n *\n * stateless because it might be called from various\n * parts of the response classes\n */\n\n/**\n * resolves the event handlers lazily\n * so that if some decoration happens in between we can deal with it\n *\n * @param requestContext\n * @param responseContext\n * @param funcName\n */\nexport function resolveHandlerFunc(requestContext: Config, responseContext: Config, funcName: string) {\n    responseContext = responseContext || new Config({});\n    return responseContext.getIf(funcName)\n        .orElseLazy(() =>requestContext.getIf(funcName).value)\n        .orElse(EMPTY_FUNC).value;\n}\n\nexport function resolveTargetUrl(srcFormElement: HTMLFormElement) {\n    return (typeof srcFormElement.elements[ENCODED_URL] == 'undefined') ?\n        srcFormElement.action :\n        srcFormElement.elements[ENCODED_URL].value;\n}\n\nexport function resolveFinalUrl(sourceForm: DomQuery, formData: XhrFormData, ajaxType = REQ_TYPE_POST) {\n    let targetUrl = resolveTargetUrl(<HTMLFormElement>sourceForm.getAsElem(0).value);\n\n    return targetUrl + (ajaxType == REQ_TYPE_GET ? \"?\" + formData.toString() : EMPTY_STR);\n}\n\n/**\n * form resolution the same way our old implementation did\n * it is either the id or the parent form of the element or an embedded form\n * of the element\n *\n * @param elem\n * @param event\n */\nexport function resolveForm(elem: DQ, event: Event): DQ {\n    return ExtLang.getForm(elem.getAsElem(0).value, event);\n}\n\nexport function resolveViewId(form: DQ): string {\n    const viewState = form.querySelectorAll(`input[type='hidden'][name*='${$nsp(P_VIEWSTATE)}']`).id.orElse(\"\").value;\n    const divider = $faces().separatorchar;\n    const viewId = viewState.split(divider, 2)[0];\n    const viewStateViewId = viewId.indexOf($nsp(P_VIEWSTATE)) === -1 ? viewId : \"\";\n    // myfaces specific, we in non portlet environments prepend the viewId\n    // even without being in a naming container, the other components ignore that\n    return form.id.value.indexOf(viewStateViewId) === 0 ? viewStateViewId : \"\";\n}\n\nexport function resolveViewRootId(form: DQ): string {\n    const viewState = form.querySelectorAll(`input[type='hidden'][name*='${$nsp(P_VIEWSTATE)}']`).attr(\"name\").orElse(\"\").value;\n    const divider = $faces().separatorchar;\n    const viewId = viewState.split(divider, 2)[0];\n    //different to the identifier the form id is never prepended to the viewstate\n    return viewId.indexOf($nsp(P_VIEWSTATE)) === -1 ? viewId : \"\";\n}\n\n/**\n * as per jsdoc before the request it must be ensured that every post argument\n * is prefixed with the naming container id (there is an exception in mojarra with\n * the element=element param, which we have to follow here as well.\n * (inputs are prefixed by name anyway normally this only affects our standard parameters)\n * @private\n */\nexport function resoveNamingContainerMapper(internalContext: Config): (key: string, value: any) => [string, any] {\n    const isNamedViewRoot = internalContext.getIf(NAMED_VIEWROOT).isPresent();\n    if(!isNamedViewRoot) {\n        return (key, value) => [key, value];\n    }\n    const partialId = internalContext.getIf(NAMING_CONTAINER_ID).value;\n    const SEP = $faces().separatorchar;\n    const prefix = partialId + SEP;\n    return (key: string, value: any) => (key.indexOf(prefix) == 0) ? [key, value] : [prefix + key, value];\n}\n\nexport function resolveTimeout(options: Config): number {\n    let getCfg = ExtLang.getLocalOrGlobalConfig;\n    return options.getIf(CTX_OPTIONS_TIMEOUT).value ?? getCfg(options.value, CTX_OPTIONS_TIMEOUT, 0);\n}\n\n/**\n * resolve the delay from the options and/or the request context and or the configuration\n *\n * @param options ... the options object, in most cases it will host the delay value\n */\nexport function resolveDelay(options: Config): number {\n    // null, 'none', or undefined will automatically be mapped to 0 aka no delay\n    // the config delay will be dropped not needed anymore, it does not really\n    // make sense anymore now that it is part of a local spec\n    let ret = options.getIf(CTX_OPTIONS_DELAY).orElse(0).value;\n    // if delay === none, no delay must be used, aka delay 0\n    ret = (DELAY_NONE === ret) ? 0 : ret;\n    // negative, or invalid values will automatically get a js exception\n    Assertions.assertDelay(ret);\n    return ret;\n}\n\n/**\n * resolves the window-id from various sources\n *\n * @param options\n */\nexport function resolveWindowId(options: Config) {\n    return options?.value?.windowId ?? ExtDomQuery.windowId;\n}\n\n/**\n * cross port from the dojo lib\n * browser save event resolution\n * @param evt the event object\n * (with a fallback for ie events if none is present)\n * @deprecated soon will be removed\n */\nexport function getEventTarget(evt: Event): Element {\n    // ie6 and 7 fallback\n    let finalEvent = evt;\n    /*\n     * evt source is defined in the jsf events\n     * seems like some component authors use our code,\n     * so we add it here see also\n     * https://issues.apache.org/jira/browse/MYFACES-2458\n     * not entirely a bug but makes sense to add this\n     * behavior. I don´t use it that way but nevertheless it\n     * does not break anything so why not\n     */\n    let t = finalEvent?.srcElement ?? finalEvent?.target ?? (<any>finalEvent)?.source;\n    while ((t) && (t.nodeType != 1)) {\n        t = t.parentNode;\n    }\n    return t;\n}\n\n/**\n * resolves a bunch of default values\n * which can be further processed from the given\n * call parameters of faces.ajax.request\n *\n * @param event\n * @param opts\n * @param el\n */\nexport function resolveDefaults(event: Event, opts: Options | [[string, any]] , el: Element | string = null): any {\n    //deep copy the options, so that further transformations to not backfire into the callers\n    const elem = DQ.byId(el || <Element>event.target, true);\n    const options = new ExtConfig(opts).deepCopy as ExtConfig;\n    return {\n        options: options,\n        elem: elem,\n        elementId: elem.id.value,\n        windowId: resolveWindowId(options),\n        isResetValues: true === options.value?.resetValues\n    };\n}","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, XMLQuery} from \"mona-dish\";\n\nimport {Assertions} from \"../util/Assertions\";\nimport {DQ} from \"mona-dish\";\nimport {\n    $nsp,\n    CTX_PARAM_MF_INTERNAL,\n    CTX_PARAM_SRC_CTL_ID,\n    CTX_PARAM_SRC_FRM_ID,\n    SEL_RESPONSE_XML,\n    SOURCE,\n    HTML_TAG_FORM,\n    UPDATE_ELEMS,\n    UPDATE_FORMS,\n    DEFERRED_HEAD_INSERTS\n} from \"../core/Const\";\nimport {ExtConfig} from \"../util/ExtDomQuery\";\n\n/**\n * Resolver functions for various aspects of the response data\n *\n * stateless because it might be called from various\n * parts of the response classes\n */\n\n/**\n * fetches the response XML\n * as XML Query object\n *\n * @param request the request hosting the responseXML\n *\n * Throws an error in case of non-existent or wrong xml data\n *\n */\nexport function resolveResponseXML(request: Config): XMLQuery {\n    let ret = new XMLQuery($nsp(request.getIf(SEL_RESPONSE_XML).value));\n    Assertions.assertValidXMLResponse(ret);\n\n    return ret;\n}\n\n/**\n * Splits the incoming pass-through context apart\n * in an internal and an external normalized context\n * the internal one is just for our internal processing\n *\n * @param context the root context as associative array\n */\nexport function resolveContexts(context: { [p: string]: any }): any {\n    /**\n     * we split the context apart into the external one and\n     * some internal values\n     */\n    let externalContext = ExtConfig.fromNullable(context);\n    let internalContext = externalContext.getIf(CTX_PARAM_MF_INTERNAL);\n    if (!internalContext.isPresent()) {\n        internalContext = ExtConfig.fromNullable({});\n    }\n\n    /**\n     * prepare storage for some deferred operations\n     */\n    internalContext.assign(DEFERRED_HEAD_INSERTS).value = [];\n    internalContext.assign(UPDATE_FORMS).value = [];\n    internalContext.assign(UPDATE_ELEMS).value = [];\n    return {externalContext, internalContext};\n}\n\n/**\n * fetches the source element out of our contexts\n *\n * @param context the external context which should host the source id\n * @param internalContext internal pass-through fall back\n *\n */\nexport function resolveSourceElement(context: Config, internalContext: Config): DQ {\n    let elemId = resolveSourceElementId(context, internalContext);\n    return DQ.byId(elemId.value, true);\n}\n\n/**\n * fetches the source form if it still exists\n * also embedded forms and parent forms are taken into consideration\n * as fallbacks\n *\n * @param internalContext\n * @param elem\n */\nexport function resolveSourceForm(internalContext: Config, elem: DQ): DQ {\n    let sourceFormId = internalContext.getIf(CTX_PARAM_SRC_FRM_ID);\n    let sourceForm = new DQ(sourceFormId.isPresent() ? document.forms[sourceFormId.value] : null);\n\n    sourceForm = sourceForm.orElseLazy(() => elem.firstParent(HTML_TAG_FORM))\n        .orElseLazy(() => elem.querySelectorAll(HTML_TAG_FORM))\n        .orElseLazy(() => DQ.querySelectorAll(HTML_TAG_FORM));\n\n    return sourceForm;\n}\n\nfunction resolveSourceElementId(context: Config, internalContext: Config): Optional<string> {\n    //?internal context?? used to be external one\n    return internalContext.getIf(CTX_PARAM_SRC_CTL_ID)\n        .orElseLazy(() => context.getIf(SOURCE, \"id\").value);\n}\n\n","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DQ, XMLQuery} from \"mona-dish\";\nimport {ResponseProcessor} from \"./ResponseProcessor\";\n\nimport {IResponseProcessor} from \"./IResponseProcessor\";\nimport {\n    $nsp,\n    XML_TAG_ATTRIBUTES,\n    XML_TAG_CHANGES,\n    XML_TAG_DELETE,\n    XML_TAG_ERROR,\n    XML_TAG_EVAL,\n    XML_TAG_EXTENSION,\n    XML_TAG_INSERT,\n    XML_TAG_REDIRECT,\n    XML_TAG_UPDATE, P_RESOURCE,\n    P_VIEWBODY,\n    P_VIEWHEAD,\n    P_VIEWROOT,\n    NAMING_CONTAINER_ID,\n    XML_TAG_PARTIAL_RESP,\n    RESPONSE_XML,\n    XML_TAG_AFTER,\n    XML_TAG_BEFORE, NAMED_VIEWROOT, XML_ATTR_NAMED_VIEWROOT, P_VIEWSTATE, $faces\n} from \"../core/Const\";\nimport {resolveContexts, resolveResponseXML} from \"./ResonseDataResolver\";\nimport {ExtConfig} from \"../util/ExtDomQuery\";\n\n\n\nexport module Response {\n\n\n    /**\n     * Standardized faces.ts response\n     * this one is called straight from faces.ts.response\n     *\n     * The processing follows the spec by going for the responseXML\n     * and processing its tags\n     *\n     * @param {XMLHttpRequest} request (xhrRequest) - xhr request object\n     * @param context {Context} context (Map) - AJAX context\n     *\n     */\n    export function processResponse(request: XMLHttpRequest, context: Context) {\n\n        let req = ExtConfig.fromNullable(request);\n        let {externalContext, internalContext} = resolveContexts(context);\n        let responseXML: XMLQuery = resolveResponseXML(req);\n        let responseProcessor = new ResponseProcessor(req, externalContext, internalContext);\n\n        internalContext.assign(RESPONSE_XML).value = responseXML;\n\n        // we now process the partial tags, or in none given raise an error\n        responseXML.querySelectorAll(XML_TAG_PARTIAL_RESP)\n            .each(item => processPartialTag(<XMLQuery>item, responseProcessor, internalContext));\n\n        // We now process the viewStates, client windows and the elements to be evaluated are delayed.\n        // The reason for this is that often it is better\n        // to wait until the document has caught up before\n        // doing any evaluations even on embedded scripts.\n        // Usually this does not matter, the client window comes in almost last always anyway\n        // we maybe drop this deferred assignment in the future, but myfaces did it until now.\n        responseProcessor.updateNamedViewRootState();\n        responseProcessor.fixViewStates();\n        responseProcessor.fixClientWindow();\n        responseProcessor.globalEval();\n\n        responseProcessor.done();\n    }\n\n    /**\n     * highest node partial-response from there the main operations are triggered\n     */\n    function processPartialTag(node: XMLQuery, responseProcessor: IResponseProcessor, internalContext) {\n\n\n        /*\n        https://javaee.github.io/javaserverfaces/docs/2.2/javadocs/web-partialresponse.html#ns_xsd\n        The \"partial-response\" element is the root of the partial response information hierarchy,\n        and contains nested elements for all possible elements that can exist in the response.\n        This element must have an \"id\" attribute whose value is the return from calling getContainerClientId()\n        on the UIViewRoot to which this response pertains.\n         */\n        // we can determine whether we are in a naming container scenario by checking whether the passed view id is present in the page\n        // under or in body as identifier\n\n        let partialId:string = node?.id?.value;\n        internalContext.assignIf(!!partialId, NAMING_CONTAINER_ID).value = partialId; // second case mojarra\n\n        // there must be at least one container viewstate element resembling the viewroot that we know\n        // this is named\n        responseProcessor.updateNamedViewRootState();\n\n        const SEL_SUB_TAGS = [XML_TAG_ERROR, XML_TAG_REDIRECT, XML_TAG_CHANGES].join(\",\");\n\n        // now we can process the main operations\n        node.querySelectorAll(SEL_SUB_TAGS).each((node: XMLQuery) => {\n            switch (node.tagName.value) {\n                case XML_TAG_ERROR:\n                    responseProcessor.error(node);\n                    break;\n                case XML_TAG_REDIRECT:\n                    responseProcessor.redirect(node);\n                    break;\n                case XML_TAG_CHANGES:\n                    processChangesTag(node, responseProcessor);\n                    break;\n            }\n        });\n    }\n\n    let processInsert = function (responseProcessor: IResponseProcessor, node: XMLQuery) {\n        // path1 insert after as child tags\n        if(node.querySelectorAll([XML_TAG_BEFORE, XML_TAG_AFTER].join(\",\")).length) {\n            responseProcessor.insertWithSubTags(node);\n        } else { // insert before after with id\n            responseProcessor.insert(node);\n        }\n\n    };\n\n    /**\n     * next level changes tag\n     *\n     * @param node\n     * @param responseProcessor\n     */\n    function processChangesTag(node: XMLQuery, responseProcessor: IResponseProcessor): boolean {\n        const ALLOWED_TAGS = [XML_TAG_UPDATE, XML_TAG_EVAL, XML_TAG_INSERT, XML_TAG_DELETE, XML_TAG_ATTRIBUTES, XML_TAG_EXTENSION].join(\", \");\n        node.querySelectorAll(ALLOWED_TAGS).each(\n            (node: XMLQuery) => {\n                switch (node.tagName.value) {\n                    case XML_TAG_UPDATE:\n                        processUpdateTag(node, responseProcessor);\n                        break;\n\n                    case XML_TAG_EVAL:\n                        responseProcessor.eval(node);\n                        break;\n\n                    case XML_TAG_INSERT:\n                        processInsert(responseProcessor, node);\n                        break;\n\n                    case XML_TAG_DELETE:\n                        responseProcessor.delete(node);\n                        break;\n\n                    case XML_TAG_ATTRIBUTES:\n                        responseProcessor.attributes(node);\n                        break;\n\n                    case XML_TAG_EXTENSION:\n                        break;\n                }\n            }\n        );\n        return true;\n    }\n\n    /**\n     * checks and stores a state update for delayed processing\n     *\n     * @param responseProcessor the response processor to perform the store operation\n     * @param node the xml node to check for the state\n     *\n     * @private\n     */\n    function storeState(responseProcessor: IResponseProcessor, node: XMLQuery) {\n        return responseProcessor.processViewState(node) || responseProcessor.processClientWindow(node);\n    }\n\n    /**\n     * branch tag update. drill further down into the updates\n     * special case viewState in that case it is a leaf\n     * and the viewState must be processed\n     *\n     * @param node\n     * @param responseProcessor\n     */\n    function processUpdateTag(node: XMLQuery, responseProcessor: IResponseProcessor) {\n        // early state storing, if no state we perform a normal update cycle\n        if (!storeState(responseProcessor, node)) {\n            handleElementUpdate(node, responseProcessor);\n        }\n    }\n\n    /**\n     * element update\n     *\n     * @param node\n     * @param responseProcessor\n     */\n    function handleElementUpdate(node: XMLQuery, responseProcessor: IResponseProcessor) {\n        let cdataBlock = node.cDATAAsString;\n        switch (node.id.value) {\n            case $nsp(P_VIEWROOT) :\n                responseProcessor.replaceViewRoot(DQ.fromMarkup(cdataBlock.substring(cdataBlock.indexOf(\"<html\"))));\n                break;\n\n            case $nsp(P_VIEWHEAD):\n                responseProcessor.replaceHead(DQ.fromMarkup(cdataBlock));\n                break;\n\n            case $nsp(P_VIEWBODY):\n                responseProcessor.replaceBody(DQ.fromMarkup(cdataBlock));\n                break;\n\n            case $nsp(P_RESOURCE):\n                responseProcessor.addToHead(DQ.fromMarkup(cdataBlock))\n                break;\n\n            default:// htmlItem replacement\n                responseProcessor.update(node, cdataBlock);\n                break;\n        }\n    }\n}","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, DomQuery, DomQueryCollector, DQ, DQ$, Lang, LazyStream, Stream, XMLQuery} from \"mona-dish\";\nimport {Implementation} from \"../AjaxImpl\";\nimport {Assertions} from \"../util/Assertions\";\nimport {IResponseProcessor} from \"./IResponseProcessor\";\nimport {ErrorData} from \"./ErrorData\";\nimport {StateHolder} from \"../core/ImplTypes\";\nimport {EventData} from \"./EventData\";\n\nimport {\n    $faces,\n    $nsp,\n    APPLIED_CLIENT_WINDOW,\n    APPLIED_VST,\n    ATTR_ID,\n    ATTR_NAME,\n    ATTR_URL,\n    ATTR_VALUE,\n    DEFERRED_HEAD_INSERTS,\n    EMPTY_FUNC,\n    EMPTY_STR,\n    ERROR_MESSAGE,\n    ERROR_NAME,\n    HTML_TAG_BODY,\n    HTML_TAG_FORM,\n    HTML_TAG_HEAD,\n    HTML_TAG_LINK,\n    HTML_TAG_SCRIPT,\n    HTML_TAG_STYLE, IDENT_ALL, IDENT_NONE, NAMED_VIEWROOT,\n    ON_ERROR,\n    ON_EVENT,\n    P_CLIENT_WINDOW,\n    P_EXECUTE,\n    P_PARTIAL_SOURCE,\n    P_RENDER,\n    P_RENDER_OVERRIDE,\n    P_VIEWSTATE,\n    NAMING_CONTAINER_ID,\n    RESPONSE_XML,\n    SEL_CLIENT_WINDOW_ELEM,\n    SEL_VIEWSTATE_ELEM,\n    SOURCE,\n    SUCCESS,\n    UPDATE_ELEMS,\n    UPDATE_FORMS,\n    XML_TAG_AFTER,\n    XML_TAG_ATTR,\n    XML_TAG_BEFORE\n} from \"../core/Const\";\nimport {ExtConfig, ExtDomQuery} from \"../util/ExtDomQuery\";\nimport {HiddenInputBuilder} from \"../util/HiddenInputBuilder\";\nimport trim = Lang.trim;\n\n\n/**\n * Response processor\n *\n * Each  XML tag is either a node or a leaf\n * or both\n *\n * the processor provides a set of operations\n * which are executed on a single leaf node per operation\n * and present the core functionality of our response\n *\n * Note the response processor is stateful hence we bundle it in a class\n * to reduce code we keep references tot contexts in place\n */\nexport class ResponseProcessor implements IResponseProcessor {\n\n    constructor(private request: Config, private externalContext: Config, private internalContext: Config) {\n    }\n\n    /**\n     * head replacement\n     * @param shadowDocument incoming shadow head data (aka cdata as xml reference or dom element)\n     * the data incoming must represent the html representation of the head itself one way or the other\n     */\n    replaceHead(shadowDocument: XMLQuery | DQ) {\n        const shadowHead = shadowDocument.querySelectorAll(HTML_TAG_HEAD);\n        if (!shadowHead.isPresent()) {\n            return;\n        }\n        const head = ExtDomQuery.querySelectorAll(HTML_TAG_HEAD);\n        // full replace we delete everything\n        head.childNodes.delete();\n        this.addToHead(shadowHead);\n        //we copy the attributes as well (just in case myfaces introduces the id in head)\n        head.copyAttrs(shadowHead);\n    }\n\n    addToHead(shadowHead: XMLQuery | DQ) {\n        const mappedHeadData = new ExtDomQuery(shadowHead);\n        const scriptTags = [HTML_TAG_SCRIPT];\n        const nonExecutables = mappedHeadData.filter(item => scriptTags.indexOf(item.tagName.orElse(\"\").value) == -1);\n        nonExecutables.runHeadInserts(true);\n\n        //incoming either the outer head tag or its children\n        const nodesToAdd = (shadowHead.tagName.value === \"HEAD\") ? shadowHead.childNodes : shadowHead;\n        // this is stored for \"post\" processing\n        // after the rest of the \"physical build up\", head before body\n        const scriptElements = nodesToAdd.stream\n            .filter(item => scriptTags.indexOf(item.tagName.orElse(\"\").value) != -1).collect(new DomQueryCollector());\n\n        this.addToHeadDeferred(scriptElements);\n    }\n\n    addToHeadDeferred(newElements: XMLQuery | DQ) {\n        this.internalContext.assign(DEFERRED_HEAD_INSERTS).value.push(newElements);\n    }\n\n    /**\n     * replaces the body in the expected manner\n     * which means the entire body content is refreshed\n     * however also the body attributes must be transferred\n     * keeping event handlers etc... in place\n     *\n     * @param shadowDocument .. an incoming shadow document hosting the new nodes\n     */\n    replaceBody(shadowDocument: XMLQuery | DQ) {\n\n        const shadowBody = shadowDocument.querySelectorAll(HTML_TAG_BODY);\n        if (!shadowBody.isPresent()) {\n            return;\n        }\n\n        const shadowInnerHTML: string = <string>shadowBody.innerHTML;\n        const resultingBody = <DQ>ExtDomQuery.querySelectorAll(HTML_TAG_BODY);\n        const updateForms = resultingBody.querySelectorAll(HTML_TAG_FORM);\n\n        // main difference, we cannot replace the body itself, but only its content\n        // we need a separate step for post-processing the incoming\n        // attributes, like classes, styles etc...\n        (resultingBody.html(shadowInnerHTML) as DQ).copyAttrs(shadowBody);\n        this.externalContext.assign($nsp(P_RENDER_OVERRIDE)).value = \"@all\";\n        this.storeForPostProcessing(updateForms, resultingBody);\n    }\n\n    /**\n     * Leaf Tag eval... process whatever is in the eval cdata block\n     *\n     * @param node the node to eval\n     */\n    eval(node: XMLQuery) {\n        ExtDomQuery.globalEval(node.cDATAAsString);\n    }\n\n    /**\n     * processes an incoming error from the response\n     * which is hosted under the &lt;error&gt; tag\n     * @param node the node hosting the error in our response xml\n     * @param node the node in the xml hosting the error message\n     */\n    error(node: XMLQuery) {\n        /**\n         * <error>\n         *      <error-name>String</error-name>\n         *      <error-message><![CDATA[message]]></error-message>\n         * <error>\n         */\n\n        const mergedErrorData = new ExtConfig({});\n        mergedErrorData.assign(SOURCE).value = this.externalContext.getIf(P_PARTIAL_SOURCE).get(0).value;\n        mergedErrorData.assign(ERROR_NAME).value = node.querySelectorAll(ERROR_NAME).textContent(EMPTY_STR);\n        mergedErrorData.assign(ERROR_MESSAGE).value = node.querySelectorAll(ERROR_MESSAGE).cDATAAsString;\n\n        const hasResponseXML = this.internalContext.get(RESPONSE_XML).isPresent();\n\n        //we now store the response xml also in the error data for further details\n        mergedErrorData.assignIf(hasResponseXML, RESPONSE_XML).value = this.internalContext.getIf(RESPONSE_XML).value.get(0).value;\n\n        // error post-processing and enrichment (standard messages from keys)\n        const errorData = ErrorData.fromServerError(mergedErrorData);\n\n        // we now trigger an internally stored onError function which might be an attached to the context\n        // either we do not have an internal on error, or an on error has been based via params from the outside.\n        // In both cases they are attached to our contexts\n\n        this.triggerOnError(errorData);\n        Implementation.sendError(errorData);\n    }\n\n    /**\n     * process the redirect operation\n     *\n     * @param node\n     */\n    redirect(node: XMLQuery) {\n        Assertions.assertUrlExists(node);\n\n        const redirectUrl = trim(node.attr(ATTR_URL).value);\n        if (redirectUrl != EMPTY_STR) {\n            window.location.href = redirectUrl;\n        }\n    }\n\n    /**\n     * processes the update operation and updates the node with the cdata block\n     * @param node the xml response node hosting the update info\n     * @param cdataBlock the cdata block with the new html code\n     */\n    update(node: XMLQuery, cdataBlock: string) {\n        const result = ExtDomQuery.byId(node.id.value, true).outerHTML(cdataBlock, false, false);\n        const sourceForm = result?.firstParent(HTML_TAG_FORM).orElseLazy(() => result.byTagName(HTML_TAG_FORM, true));\n        if (sourceForm) {\n            this.storeForPostProcessing(sourceForm, result);\n        }\n    }\n\n    /**\n     * Delete handler, simply deletes the node referenced by the xml data\n     * @param node\n     */\n    delete(node: XMLQuery) {\n        DQ.byId(node.id.value, true).delete();\n    }\n\n    /**\n     * attributes leaf tag... process the attributes\n     *\n     * @param node\n     */\n    attributes(node: XMLQuery) {\n        const elem = DQ.byId(node.id.value, true);\n\n        node.byTagName(XML_TAG_ATTR).each((item: XMLQuery) => {\n            elem.attr(item.attr(ATTR_NAME).value).value = item.attr(ATTR_VALUE).value;\n        });\n    }\n\n    /**\n     * @param shadowDocument a shadow document which is needed for further processing\n     */\n    replaceViewRoot(shadowDocument: XMLQuery) {\n        this.replaceHead(shadowDocument);\n        this.replaceBody(shadowDocument);\n    }\n\n    /**\n     * Insert handling, either before or after\n     *\n     * @param node\n     */\n    insert(node: XMLQuery) {\n        //let insertId = node.id; //not used atm\n\n        const before = node.attr(XML_TAG_BEFORE);\n        const after = node.attr(XML_TAG_AFTER);\n        const insertNodes = DQ.fromMarkup(<any>node.cDATAAsString);\n\n        if (before.isPresent()) {\n            DQ.byId(before.value, true).insertBefore(insertNodes);\n            this.internalContext.assign(UPDATE_ELEMS).value.push(insertNodes);\n        }\n        if (after.isPresent()) {\n            const domQuery = DQ.byId(after.value, true);\n            domQuery.insertAfter(insertNodes);\n\n            this.internalContext.assign(UPDATE_ELEMS).value.push(insertNodes);\n        }\n    }\n\n    /**\n     * Handler for the case &lt;insert <&lt; before id=\"...\n     *\n     * @param node the node hosting the insert data\n     */\n    insertWithSubTags(node: XMLQuery) {\n        const before = node.querySelectorAll(XML_TAG_BEFORE);\n        const after = node.querySelectorAll(XML_TAG_AFTER);\n\n        before.each(item => {\n            const insertId = item.attr(ATTR_ID);\n            const insertNodes = DQ.fromMarkup(<any>item.cDATAAsString);\n            if (insertId.isPresent()) {\n                DQ.byId(insertId.value, true).insertBefore(insertNodes);\n                this.internalContext.assign(UPDATE_ELEMS).value.push(insertNodes);\n            }\n        });\n\n        after.each(item => {\n            const insertId = item.attr(ATTR_ID);\n            const insertNodes = DQ.fromMarkup(<any>item.cDATAAsString);\n            if (insertId.isPresent()) {\n                DQ.byId(insertId.value, true).insertAfter(insertNodes);\n                this.internalContext.assign(UPDATE_ELEMS).value.push(insertNodes);\n            }\n        });\n    }\n\n    /**\n     * Process the viewState update, update the affected\n     * forms with their respective new viewState values\n     *\n     */\n    processViewState(node: XMLQuery): boolean {\n        if (ResponseProcessor.isViewStateNode(node)) {\n            const state = node.cDATAAsString;\n            this.internalContext.assign(APPLIED_VST, node.id.value).value = new StateHolder($nsp(node.id.value), state);\n            return true;\n        }\n        return false;\n    }\n\n    processClientWindow(node: XMLQuery): boolean {\n        if (ResponseProcessor.isClientWindowNode(node)) {\n            const state = node.cDATAAsString;\n            this.internalContext.assign(APPLIED_CLIENT_WINDOW, node.id.value).value = new StateHolder($nsp(node.id.value), state);\n            return true;\n        }\n    }\n\n    /**\n     * generic global eval which runs the embedded css and scripts\n     */\n    globalEval() {\n        //  phase one, if we have head inserts, we build up those before going into the script eval phase\n        let insertHeadElems = new ExtDomQuery(...this.internalContext.getIf(DEFERRED_HEAD_INSERTS).value);\n        insertHeadElems.runHeadInserts(true);\n\n        // phase 2 we run a script eval on all updated elements in the body\n        let updateElems = new ExtDomQuery(...this.internalContext.getIf(UPDATE_ELEMS).value);\n        updateElems.runCss();\n        // phase 3, we do the same for the css\n        updateElems.runScripts();\n    }\n\n    /**\n     * Postprocessing view state fixing\n     * this appends basically the incoming view states to the forms.\n     * It is called from outside after all forms have been processed basically\n     * as last lifecycle step, before going into the next request.\n     */\n    fixViewStates() {\n        Stream.ofAssoc<StateHolder>(this.internalContext.getIf(APPLIED_VST).orElse({}).value)\n            .each(([, value]) => {\n                const namingContainerId = this.internalContext.getIf(NAMING_CONTAINER_ID);\n                const namedViewRoot = !!this.internalContext.getIf(NAMED_VIEWROOT).value\n                const affectedForms = this.getContainerForms(namingContainerId)\n                    .filter(affectedForm => this.isInExecuteOrRender(affectedForm));\n\n                this.appendViewStateToForms(affectedForms, namedViewRoot, value.value, namingContainerId.orElse(\"\").value);\n            });\n    }\n\n\n\n    /**\n     * same as with view states before applies the incoming client windows as last step after the rest of the processing\n     * is done.\n     */\n    fixClientWindow() {\n        Stream.ofAssoc<StateHolder>(this.internalContext.getIf(APPLIED_CLIENT_WINDOW).orElse({}).value)\n            .each(([, value]) => {\n                const namingContainerId = this.internalContext.getIf(NAMING_CONTAINER_ID);\n                const namedViewRoot = !!this.internalContext.getIf(NAMED_VIEWROOT).value;\n                const affectedForms = this.getContainerForms(namingContainerId)\n                    .filter(affectedForm => this.isInExecuteOrRender(affectedForm));\n\n                this.appendClientWindowToForms(affectedForms, namedViewRoot, value.value, namingContainerId.orElse(\"\").value);\n            });\n    }\n\n    updateNamedViewRootState() {\n        let partialId = this.internalContext.getIf(NAMING_CONTAINER_ID);\n        let namedViewRoot = this.internalContext.getIf(NAMED_VIEWROOT);\n        if(partialId.isPresent() &&\n            (namedViewRoot.isAbsent() ||\n                !namedViewRoot.value)) {\n            const SEP = $faces().separatorchar;\n            this.internalContext.assign(NAMED_VIEWROOT).value = (!!document.getElementById(partialId.value)) || DQ$(`input[name*='${$nsp(P_VIEWSTATE)}']`)\n                .filter(node => node.attr(\"name\").value.indexOf(partialId.value + SEP) == 0).length > 0;\n        }\n    }\n\n    /**\n     * all processing done we can close the request and send the appropriate events\n     */\n    done() {\n        const eventData = EventData.createFromRequest(this.request.value, this.externalContext, SUCCESS);\n\n        //because some frameworks might decorate them over the context in the response\n        const eventHandler = this.externalContext.getIf(ON_EVENT).orElseLazy(() => this.internalContext.getIf(ON_EVENT).value).orElse(EMPTY_FUNC).value;\n        Implementation.sendEvent(eventData, eventHandler);\n    }\n\n    /**\n     * proper viewState -> form assignment\n     *\n     * @param forms the forms to append the viewState to\n     * @param viewState the final viewState\n     * @param namingContainerId\n     */\n    private appendViewStateToForms(forms: DQ, namedViewRoot: boolean, viewState: string, namingContainerId = \"\") {\n        this.assignState(forms, $nsp(SEL_VIEWSTATE_ELEM), namedViewRoot, viewState, namingContainerId);\n    }\n\n\n    /**\n     * proper clientWindow -> form assignment\n     *\n     * @param forms the forms to append the viewState to\n     * @param clientWindow the final viewState\n     * @param namingContainerId\n     */\n    private appendClientWindowToForms(forms: DQ, namedViewRoot: boolean, clientWindow: string, namingContainerId = \"\") {\n        this.assignState(forms, $nsp(SEL_CLIENT_WINDOW_ELEM), namedViewRoot, clientWindow, namingContainerId);\n    }\n\n    /**\n     * generic append state which appends a certain state as hidden element to an existing set of forms\n     *\n     * @param forms the forms to append or change to\n     * @param selector the selector for the state\n     * @param namedViewRoot if set to true, the name is also prefixed\n     * @param state the state itself which needs to be assigned\n     *\n     * @param namingContainerId\n     * @private\n     */\n    private assignState(forms: DQ,  selector: string, namedViewRoot: boolean, state: string, namingContainerId: string) {\n        /**\n         * creates the viewState or client window id element\n         * @param form\n         */\n        const createAndAppendHiddenInput = (form: DomQuery)  => {\n            return new HiddenInputBuilder(selector)\n                .withNamingContainerId(namingContainerId)\n                .withParent(form)\n                .withNamedViewRoot(namedViewRoot)\n                .build();\n        };\n\n        forms.each(form => {\n            const hiddenInput = form.querySelectorAll(selector)\n                .orElseLazy(() => createAndAppendHiddenInput(form));\n            hiddenInput.val = state;\n        });\n    }\n\n    /**\n     * Stores certain aspects of the dom for later post-processing\n     *\n     * @param updateForms the update forms which should receive standardized internal jsf data\n     * @param toBeEvaluated the resulting elements which should be evaluated\n     */\n    private storeForPostProcessing(updateForms: DQ, toBeEvaluated: DQ) {\n        this.storeForUpdate(updateForms);\n        this.storeForEval(toBeEvaluated);\n    }\n\n    /**\n     * helper to store a given form for the update post-processing (viewState)\n     *\n     * @param updateForms the dom query object pointing to the forms which need to be updated\n     */\n    private storeForUpdate(updateForms: DQ) {\n        this.internalContext.assign(UPDATE_FORMS).value.push(updateForms);\n    }\n\n    /**\n     * same for eval (js and css)\n     *\n     * @param toBeEvaluated\n     */\n    private storeForEval(toBeEvaluated: DQ) {\n        this.internalContext.assign(UPDATE_ELEMS).value.push(toBeEvaluated);\n    }\n\n    /**\n     * check whether a given XMLQuery node is an explicit viewState node\n     *\n     * @param node the node to check\n     * @returns if it is a viewState node\n     */\n    private static isViewStateNode(node: XMLQuery): boolean {\n        const SEP = $faces().separatorchar;\n        return \"undefined\" != typeof node?.id?.value && (node?.id?.value == $nsp(P_VIEWSTATE) ||\n            node?.id?.value?.indexOf([SEP, $nsp(P_VIEWSTATE)].join(EMPTY_STR)) != -1 ||\n            node?.id?.value?.indexOf([$nsp(P_VIEWSTATE), SEP].join(EMPTY_STR)) != -1);\n    }\n\n    /**\n     * incoming client window node also needs special processing\n     *\n     * @param node the node to check\n     * @returns true of it ii\n     */\n    private static isClientWindowNode(node: XMLQuery): boolean {\n        const SEP =  $faces().separatorchar;\n        return \"undefined\" != typeof node?.id?.value && (node?.id?.value == $nsp(P_CLIENT_WINDOW) ||\n            node?.id?.value?.indexOf([SEP, $nsp(P_CLIENT_WINDOW)].join(EMPTY_STR)) != -1 ||\n            node?.id?.value?.indexOf([$nsp(P_CLIENT_WINDOW), SEP].join(EMPTY_STR)) != -1);\n    }\n\n    private triggerOnError(errorData: ErrorData) {\n        this.externalContext.getIf(ON_ERROR).orElseLazy(() => this.internalContext.getIf(ON_ERROR).value).orElse(EMPTY_FUNC).value(errorData);\n    }\n\n    /**\n     * filters the forms according to being member of the \"execute\" or \"render\" cycle\n     * @param affectedForm\n     * @private\n     */\n    private isInExecuteOrRender(affectedForm) {\n        const executes = this.externalContext.getIf($nsp(P_EXECUTE)).orElse(\"@none\").value.split(/\\s+/gi);\n        const renders = this.externalContext.getIf(P_RENDER_OVERRIDE)\n            .orElseLazy(() => this.externalContext.getIf($nsp(P_RENDER)).value)\n            .orElse(IDENT_NONE).value.split(/\\s+/gi);\n        const executeAndRenders = executes.concat(...renders);\n        return LazyStream.of(...executeAndRenders).filter(nameOrId => {\n            if ([IDENT_ALL, IDENT_NONE].indexOf(nameOrId) != -1) {\n                return true;\n            }\n\n            const NAME_OR_ID = this.getNameOrIdSelector(nameOrId);\n            //either the form directly is in execute or render or one of its children or one of its parents\n            return affectedForm.matchesSelector(NAME_OR_ID) ||\n                affectedForm.querySelectorAll(NAME_OR_ID).isPresent() ||\n                affectedForm.firstParent(NAME_OR_ID).isPresent();\n        }).first().isPresent();\n    }\n\n    /**\n     * gets all forms under a single naming container id\n     * @param namingContainerId\n     * @private\n     */\n    private getContainerForms(namingContainerId: Config) {\n        if (namingContainerId.isPresent()) {\n            //naming container mode, all forms under naming container id must be processed\n            return DQ$(this.getNameOrIdSelector(namingContainerId.value))\n                // missing condition if the naming container is not present we have to\n                // use the body as fallback\n                .orElseLazy(() => DQ.byTagName(HTML_TAG_BODY))\n                .byTagName(HTML_TAG_FORM, true);\n        } else {\n            return DQ.byTagName(HTML_TAG_FORM);\n        }\n    }\n\n    private getNameOrIdSelector(nameOrId) {\n        return `[id='${nameOrId}'], [name='${nameOrId}']`;\n    }\n}","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {Config, DQ, FormDataCollector, Stream} from \"mona-dish\";\nimport {$nsp, EMPTY_STR, IDENT_NONE, P_VIEWSTATE} from \"../core/Const\";\n\nimport {\n    encodeFormData,\n    fixEmmptyParameters, getFormInputsAsStream\n} from \"../util/FileUtils\";\n\n\ntype ParamsMapper<V, K> = (key: V, item: K) => [V, K];\nconst defaultParamsMapper: ParamsMapper<string, any> = (key, item) => [key, item];\n\n\n/**\n * A unified form data class\n * which builds upon our configuration.\n *\n * We cannot use standard html5 forms everywhere\n * due to api constraints on the HTML Form object in IE11\n * and due to the url encoding constraint given by the faces.js spec\n *\n *\n * internal storage format\n * every value is stored as an array\n * even scalar ones!\n */\nexport class XhrFormData extends Config {\n    /**\n     * Checks if the given datasource is a multipart request source\n     * multipart is only needed if one of the executes is a file input\n     * since file inputs are stateless, they fall out of the view state\n     * and need special handling. With file submits we have to send a formData object\n     * instead of an encoded string files cannot be sent that way\n     */\n    isMultipartRequest: boolean = false;\n\n    /**\n     * data collector from a given form\n     *\n     * @param dataSource either a form as DomQuery object or an encoded url string\n     * @param paramsMapper a remapper for the params keys and values\n     * @param executes the executes id list for the elements to being processed\n     * @param partialIds partial ids to collect, to reduce the data sent down\n     */\n    constructor(private dataSource: DQ, private paramsMapper: ParamsMapper<string, any> = defaultParamsMapper, executes?: string[], private partialIds?: string[]) {\n        super({});\n        //encode and append the issuing item if not a partial ids array of ids is passed\n        /*\n         * Spec. 13.3.1\n         * Collect and encode input elements.\n         * Additionally the hidden element jakarta.faces.ViewState\n         * Enhancement partial page submit\n         */\n        this.resolveRequestType(this.dataSource, executes);\n        this.encodeSubmittableFields(this.dataSource, this.partialIds);\n        this.applyViewState(this.dataSource);\n    }\n\n    /**\n     * @returns a Form data representation, this is needed for file submits\n     */\n    toFormData(): FormData {\n        /*\n         * expands key: [item1, item2]\n         * to: [{key: key,  value: item1}, {key: key, value: item2}]\n         */\n        let expandAssocArray = ([key, item]) =>\n            Stream.of(...(item as Array<any>)).map(value => {\n                return {key, value};\n            });\n\n        /*\n         * remaps the incoming {key, value} tuples\n         * to naming container prefixed keys and values\n         */\n        let remapForNamingContainer = ({key, value}) => {\n            key = this.remapKeyForNamingContainer(key);\n            return {key, value}\n        };\n\n        /*\n         * collects everything into a FormData object\n         */\n        return  Stream.ofAssoc(this.value)\n            .flatMap(expandAssocArray)\n            .map(remapForNamingContainer)\n            .collect(new FormDataCollector() as any);\n    }\n\n    /**\n     * returns an encoded string representation of our xhr form data\n     *\n     * @param defaultStr optional default value if nothing is there to encode\n     */\n    toString(defaultStr = EMPTY_STR): string {\n        return encodeFormData(this, this.paramsMapper, defaultStr);\n    }\n\n    /**\n     * generic post init code, for now, this performs some post assign data post-processing\n     * @param executes the executable dom nodes which need to be processed into the form data, which we can send\n     * in our ajax request\n     */\n    private resolveRequestType(rootElement: DQ, executes?: Array<string>) {\n        if (!executes || executes.indexOf(IDENT_NONE) != -1) {\n            return;\n        }\n        this.isMultipartRequest = rootElement.isMultipartCandidate(true);\n    }\n\n    /**\n     * special case view state handling\n     *\n     * @param form the form holding the view state value\n     */\n    private applyViewState(form: DQ) {\n        if (this.getIf($nsp(P_VIEWSTATE)).isPresent()) {\n            return;\n        }\n        let viewStateElement = form.querySelectorAllDeep(`[name*='${$nsp(P_VIEWSTATE)}'`);\n        let viewState = viewStateElement.inputValue;\n        this.appendIf(viewState.isPresent(), this.remapKeyForNamingContainer(viewStateElement.name.value)).value = viewState.value;\n    }\n\n    /**\n     * determines fields to submit\n     * @param {Object} targetBuf - the target form buffer receiving the data\n     * @param {Node} parentItem - form element item is nested in\n     * @param {Array} partialIds - ids fo PPS\n     */\n    private encodeSubmittableFields(parentItem: DQ, partialIds ?: string[]) {\n\n        const formInputs = getFormInputsAsStream(parentItem);\n        const mergeIntoThis = ([key, value]) => this.append(key).value = value;\n        const namingContainerRemap = ([key, value]) => this.paramsMapper(key as string, value);\n\n        formInputs\n            .map(fixEmmptyParameters)\n            .map(namingContainerRemap)\n            .each(mergeIntoThis);\n    }\n\n    private remapKeyForNamingContainer(key: string): string {\n        return this.paramsMapper(key, \"\")[0];\n    }\n}","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AsyncRunnable} from \"../util/AsyncRunnable\";\nimport {Config, DQ, DQ$, Stream} from \"mona-dish\";\nimport {Implementation} from \"../AjaxImpl\";\n\nimport {XhrFormData} from \"./XhrFormData\";\nimport {ErrorData} from \"./ErrorData\";\nimport {EventData} from \"./EventData\";\nimport {ExtLang} from \"../util/Lang\";\nimport {\n    $faces,\n    BEGIN,\n    COMPLETE,\n    CONTENT_TYPE,\n    CTX_PARAM_MF_INTERNAL,\n    CTX_PARAM_REQ_PASS_THR,\n    ERROR,\n    HEAD_FACES_REQ,\n    MALFORMEDXML,\n    NO_TIMEOUT,\n    ON_ERROR,\n    ON_EVENT, P_EXECUTE,\n    REQ_ACCEPT,\n    REQ_TYPE_GET,\n    REQ_TYPE_POST, SOURCE,\n    STATE_EVT_TIMEOUT,\n    STD_ACCEPT,\n    URL_ENCODED,\n    VAL_AJAX, IDENT_NONE\n} from \"../core/Const\";\nimport {\n    resolveFinalUrl,\n    resolveHandlerFunc,\n    resoveNamingContainerMapper\n} from \"./RequestDataResolver\";\nimport failSaveExecute = ExtLang.failSaveExecute;\nimport {ExtConfig} from \"../util/ExtDomQuery\";\n\n/**\n * Faces XHR Request Wrapper\n * as AsyncRunnable for our Asynchronous queue\n *\n * The idea is that we basically just enqueue\n * a single ajax request into our queue\n * and let the queue do the processing.\n *\n *\n */\n\nexport class XhrRequest implements AsyncRunnable<XMLHttpRequest> {\n\n    private responseContext: Config;\n\n    private stopProgress = false;\n\n    /**\n     * helper support so that we do not have to drag in Promise shims\n     */\n    private catchFunctions: Array<Function> = [];\n    private thenFunctions: Array<Function> = [];\n\n    /**\n     * Required Parameters\n     *\n     * @param source the issuing element\n     * @param sourceForm the form which is related to the issuing element\n     * @param requestContext the request context with all pass through values\n     *\n     * Optional Parameters\n     *\n     * @param internalContext internal context with internal info which is passed through, not used by the user\n     * @param partialIdsArray an optional restricting partial ids array for encoding\n     * @param timeout optional xhr timeout\n     * @param ajaxType optional request type, default \"POST\"\n     * @param contentType optional content type, default \"application/x-www-form-urlencoded\"\n     * @param xhrObject optional xhr object which must fulfill the XMLHTTPRequest api, default XMLHttpRequest\n     */\n    constructor(\n        private source: DQ,\n        private sourceForm: DQ,\n        private requestContext: ExtConfig,\n        private internalContext: Config,\n        private partialIdsArray = [],\n        private timeout = NO_TIMEOUT,\n        private ajaxType = REQ_TYPE_POST,\n        private contentType = URL_ENCODED,\n        private xhrObject = new XMLHttpRequest()\n    ) {\n\n        // we omit promises here because we have to deal with cancel functionality,\n        // and promises to not provide that (yet) instead we have our async queue\n        // which uses an api internally, which is very close to promises\n        this.registerXhrCallbacks((data: any) => {\n            this.resolve(data)\n        }, (data: any) => {\n            this.reject(data)\n        });\n    }\n\n    start(): AsyncRunnable<XMLHttpRequest> {\n\n        let ignoreErr = failSaveExecute;\n        let xhrObject = this.xhrObject;\n\n        let executesArr = () => {\n            return this.requestContext.getIf(CTX_PARAM_REQ_PASS_THR, P_EXECUTE).get(IDENT_NONE).value.split(/\\s+/gi);\n        };\n\n        try {\n            // encoded we need to decode\n            // We generated a base representation of the current form\n            // in case someone has overloaded the viewState with additional decorators we merge\n            // that in, there is no way around it, the spec allows it and getViewState\n            // must be called, so whatever getViewState delivers has higher priority then\n            // whatever the formData object delivers\n            // the partialIdsArray arr is almost deprecated legacy code where we allowed to send a separate list of partial\n            // ids for reduced load and server processing, this will be removed soon, we can handle the same via execute\n            // anyway TODO reimplement the partial ids array, we still do not have it in jsf the way we need it\n            let formData: XhrFormData = new XhrFormData(this.sourceForm, resoveNamingContainerMapper(this.internalContext), executesArr(), this.partialIdsArray);\n\n            this.contentType = formData.isMultipartRequest ? \"undefined\" : this.contentType;\n\n            // next step the pass through parameters are merged in for post params\n            this.requestContext.$nspEnabled = false;\n            let requestContext = this.requestContext;\n            let requestPassThroughParams = requestContext.getIf(CTX_PARAM_REQ_PASS_THR) as ExtConfig;\n\n            // we are turning off here the jsf, faces remapping because we are now dealing with\n            // pass-through parameters\n            requestPassThroughParams.$nspEnabled = false;\n            // this is an extension where we allow pass through parameters to be sent down additionally\n            // this can be used and is used in the impl to enrich the post request parameters with additional\n            // information\n            try {\n                formData.shallowMerge(requestPassThroughParams, true, true);\n            } finally {\n                this.requestContext.$nspEnabled = true;\n                requestPassThroughParams.$nspEnabled = true;\n            }\n\n            this.responseContext = requestPassThroughParams.deepCopy;\n\n            // we have to shift the internal passthroughs around to build up our response context\n            let responseContext = this.responseContext;\n\n            responseContext.assign(CTX_PARAM_MF_INTERNAL).value = this.internalContext.value;\n\n            // per spec the onevent and onerror handlers must be passed through to the response\n            responseContext.assign(ON_EVENT).value = requestContext.getIf(ON_EVENT).value;\n            responseContext.assign(ON_ERROR).value = requestContext.getIf(ON_ERROR).value;\n\n            xhrObject.open(this.ajaxType, resolveFinalUrl(this.sourceForm, formData, this.ajaxType), true);\n\n            // adding timeout\n            this.timeout ? xhrObject.timeout = this.timeout : null;\n\n            // a bug in the xhr stub library prevents the setRequestHeader to be properly executed on fake xhr objects\n            // normal browsers should resolve this\n            // tests can quietly fail on this one\n            if(this.contentType != \"undefined\") {\n                ignoreErr(() => xhrObject.setRequestHeader(CONTENT_TYPE, `${this.contentType}; charset=utf-8`));\n            }\n\n            ignoreErr(() => xhrObject.setRequestHeader(HEAD_FACES_REQ, VAL_AJAX));\n\n            // probably not needed anymore, will test this\n            // some webkit based mobile browsers do not follow the w3c spec of\n            // setting, they accept headers automatically\n            ignoreErr(() => xhrObject.setRequestHeader(REQ_ACCEPT, STD_ACCEPT));\n\n            this.sendEvent(BEGIN);\n            this.sendRequest(formData);\n        } catch (e) {\n            // _onError\n            this.handleError(e);\n        }\n        return this;\n    }\n\n    cancel() {\n        try {\n            this.xhrObject.abort();\n        } catch (e) {\n            this.handleError(e);\n        }\n    }\n\n    resolve(data: any) {\n        Stream.of(...this.thenFunctions).reduce((inputVal: any, thenFunc: any) => {\n            return thenFunc(inputVal);\n        }, data);\n    }\n\n    reject(data: any) {\n        Stream.of(...this.catchFunctions).reduce((inputVal: any, catchFunc: any) => {\n            return catchFunc(inputVal);\n        }, data);\n    }\n\n    catch(func: (data: any) => any): AsyncRunnable<XMLHttpRequest> {\n        this.catchFunctions.push(func);\n        return this;\n    }\n\n    finally(func: () => void): AsyncRunnable<XMLHttpRequest> {\n        // no ie11 support we probably are going to revert to shims for that one\n        this.catchFunctions.push(func);\n        this.thenFunctions.push(func);\n        return this;\n    }\n\n    then(func: (data: any) => any): AsyncRunnable<XMLHttpRequest> {\n        this.thenFunctions.push(func);\n        return this;\n    }\n\n    /**\n     * attaches the internal event and processing\n     * callback within the promise to our xhr object\n     *\n     * @param resolve\n     * @param reject\n     */\n    private registerXhrCallbacks(resolve: Consumer<any>, reject: Consumer<any>) {\n        let xhrObject = this.xhrObject;\n\n        xhrObject.onabort = () => {\n            this.onAbort(reject);\n        };\n        xhrObject.ontimeout = () => {\n            this.onTimeout(reject);\n        };\n        xhrObject.onload = () => {\n            this.onSuccess(resolve)\n        };\n        xhrObject.onloadend = () => {\n            this.onDone(this.xhrObject, resolve);\n        };\n        xhrObject.onerror = (errorData: any) => {\n\n            // some browsers trigger an error when cancelling a request internally\n            // in this case we simply ignore the request and clear up the queue, because\n            // it is not safe anymore to proceed with the current queue\n            // This bypasses a Safari issue where it keeps requests hanging after page unload\n            // and then triggers a cancel error on then instead of just stopping\n            // and clearing the code\n            if(this.isCancelledResponse(this.xhrObject)) {\n                reject();\n                this.stopProgress = true;\n                return;\n            }\n            this.onError(errorData, reject);\n        };\n    }\n\n    private isCancelledResponse(currentTarget: XMLHttpRequest): boolean {\n        return currentTarget?.status === 0 && // cancelled by browser\n            currentTarget?.readyState === 4 &&\n            currentTarget?.responseText === '' &&\n            currentTarget?.responseXML === null;\n    }\n\n    /*\n         * xhr processing callbacks\n         *\n         * Those methods are the callbacks called by\n         * the xhr object depending on its own state\n         */\n\n    private onAbort(reject: Consumer<any>) {\n        reject();\n    }\n\n    private onTimeout(reject: Consumer<any>) {\n        this.sendEvent(STATE_EVT_TIMEOUT);\n        reject();\n    }\n\n    private onSuccess(resolve: Consumer<any>) {\n\n        this.sendEvent(COMPLETE);\n\n        // malformed responses always result in empty response xml\n        // per spec a valid response cannot be empty\n        if (!this?.xhrObject?.responseXML) {\n            this.handleMalFormedXML(resolve);\n            return;\n        }\n\n        $faces().ajax.response(this.xhrObject, this.responseContext.value ?? {});\n    }\n\n    private handleMalFormedXML(resolve: Function) {\n        this.stopProgress = true;\n        let errorData = {\n            type: ERROR,\n            status: MALFORMEDXML,\n            responseCode: 200,\n            responseText: this.xhrObject?.responseText,\n            // we remap the element just in case it gets replaced\n            // it will be unremapped\n            source:  this.source.id.value\n        };\n        try {\n            this.handleError(errorData, true);\n        } finally {\n            // we issue a resolve in this case to allow the system to recover\n            // reject would clean up the queue\n            resolve(errorData);\n        }\n        // non blocking non clearing\n    }\n\n    private onDone(data: any, resolve: Consumer<any>) {\n        // if stop progress a special handling including resolve is already performed\n        if (this.stopProgress) {\n            return;\n        }\n        resolve(data);\n    }\n\n    private onError(errorData: any,  reject: Consumer<any>) {\n        this.handleError(errorData);\n        reject();\n    }\n\n    private sendRequest(formData: XhrFormData) {\n        let isPost = this.ajaxType != REQ_TYPE_GET;\n        if (formData.isMultipartRequest) {\n            // in case of a multipart request we send in a formData object as body\n            this.xhrObject.send((isPost) ? formData.toFormData() : null);\n        } else {\n            // in case of a normal request we send it normally\n            this.xhrObject.send((isPost) ? formData.toString() : null);\n        }\n    }\n\n    /*\n     * other helpers\n     */\n    private sendEvent(evtType: string) {\n        let eventData = EventData.createFromRequest(this.xhrObject, this.requestContext, evtType);\n        try {\n            // User code error, we might cover\n            // this in onError, but also we cannot swallow it.\n            // We need to resolve the local handlers lazily,\n            // because some frameworks might decorate them over the context in the response\n            let eventHandler = resolveHandlerFunc(this.requestContext, this.responseContext, ON_EVENT);\n\n            Implementation.sendEvent(eventData, eventHandler);\n        } catch (e) {\n            e.source = e?.source ?? this.requestContext.getIf(SOURCE).value;\n            this.handleError(e);\n            throw e;\n        }\n    }\n\n    private handleError(exception, responseFormatError: boolean = false) {\n        let errorData = (responseFormatError) ? ErrorData.fromHttpConnection(exception.source, exception.type, exception.status, exception.responseText, exception.responseCode, exception.status) : ErrorData.fromClient(exception);\n\n        let eventHandler = resolveHandlerFunc(this.requestContext, this.responseContext, ON_ERROR);\n        Implementation.sendError(errorData, eventHandler);\n    }\n}","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DQ, Stream} from \"mona-dish\";\n\n/**\n * legacy code to enable various aspects\n * of myfaces, used to be rendered inline\n * for jsf 2.0 we can externalize it into its own custom resource\n *\n * note this is a straight 1:1 port from the existing codebase\n * (not too much work has been spent here, the important thing is, that\n * the namespace and functions need to be kept intact for legacy code)\n *\n * we might move the code over in the future, but for now a straight 1:1 port suffices\n */\nexport module oam {\n    /**\n     * sets a hidden input field\n     * @param formName the formName\n     * @param name the hidden field\n     * @param value the value to be rendered\n     */\n    export const setHiddenInput = function (formName: string, name: string, value: string): void {\n        DQ.byId(document.forms[formName])\n            .each(form => {\n                const input = form.querySelectorAll(`input[type='hidden'][name='${name}']`);\n                if (input.isPresent()) {\n                    input.inputValue.value = value;\n                } else {\n                    const newInput = DQ.fromMarkup(`<input type='hidden' id='${name}' name='${name}'>`);\n                    newInput.inputValue.value = value;\n                    newInput.appendTo(form);\n                }\n            });\n    };\n\n    /**\n     * clears a hidden input field\n     *\n     * @param formName formName for the input\n     * @param name the name of the input field\n     */\n    export const clearHiddenInput = function (formName: string, name: string): void {\n        let element = document.forms?.[formName]?.elements?.[name];\n        if(!element) {\n            return;\n        }\n        DQ.byId(element).delete();\n    };\n\n    // noinspection JSUnusedGlobalSymbols,JSUnusedLocalSymbols\n    /**\n     * does special form submit remapping\n     * re-maps the issuing command link into something,\n     * the \"decode\" of the command link on the server can understand\n     *\n     * @param formName\n     * @param linkId\n     * @param target\n     * @param params\n     */\n    export const submitForm = function (formName: string, linkId: string | null = null, target: string |null = null, params: AssocArr<any> | Tuples<string, any> | null = {} ): boolean {\n\n\n        //handle a possible incoming null, not sure if this is used that way anywhere, but we allow it\n        params = (!params) ? {} : params;\n\n        let clearFn = 'clearFormHiddenParams_' + formName.replace(/-/g, '\\$:').replace(/:/g, '_');\n        window?.[clearFn]?.(formName);\n\n        //autoscroll code\n        if (window?.myfaces?.core?.config?.autoScroll && (window as any)?.getScrolling) {\n            myfaces.oam.setHiddenInput(formName, 'autoScroll', (window as any)?.getScrolling());\n        }\n        let paramsStream: Stream<[string, any]> = Array.isArray(params) ? Stream.of(...params) : Stream.ofAssoc(params);\n        paramsStream.each(([key, data]) => myfaces.oam.setHiddenInput(formName, key, data));\n\n        //we call the namespaced function, to allow decoration, via a direct call we would\n        myfaces.oam.setHiddenInput(formName, `${formName}:_idcl`, linkId ?? '');\n\n\n        DQ.byId(document.forms?.[formName] ?? document.getElementById(formName)).each(form => {\n            const ATTR_TARGET = \"target\";\n            const formElement = form.getAsElem(0).value as HTMLFormElement;\n            const oldTarget = (form.getAsElem(0).value as HTMLFormElement).getAttribute(\"target\");\n\n            if(target != \"null\" && target) {\n                (form.getAsElem(0).value as HTMLFormElement).setAttribute(\"target\", target);\n            }\n\n\n\n            const result = formElement?.onsubmit?.(null);\n\n            try {\n                if ((!!result) || 'undefined' == typeof result) {\n                    formElement.submit();\n                }\n            } catch (e) {\n                window?.console.error(e);\n            } finally {\n                if(oldTarget == null || oldTarget == \"null\") {\n                    (form.getAsElem(0).value as HTMLFormElement).removeAttribute(\"target\");\n                } else {\n                    (form.getAsElem(0).value as HTMLFormElement).setAttribute(\"target\", oldTarget);\n                }\n\n                // noinspection JSUnusedLocalSymbols\n                paramsStream.each(([key, data]) => {\n                    myfaces.oam.clearHiddenInput(formName, key);\n                });\n                myfaces.oam.clearHiddenInput(formName, `${formName}:_idcl`);\n            }\n\n        });\n        return false;\n    };\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http:// www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Config, Optional, ValueEmbedder} from \"./Monad\";\nimport {XMLQuery} from \"./XmlQuery\";\nimport {IStream, LazyStream, Stream} from \"./Stream\";\nimport {\n    ArrayCollector,\n    AssocArrayCollector,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS\n} from \"./SourcesCollectors\";\nimport {Lang} from \"./Lang\";\nimport trim = Lang.trim;\n\nimport isString = Lang.isString;\nimport eqi = Lang.equalsIgnoreCase;\nimport {_global$} from \"./Global\";\nimport objToArray = Lang.objToArray;\n\ndeclare var ownerDocument: any;\n\n/**\n * in order to poss custom parameters we need to extend the mutation observer init\n */\nexport interface WAIT_OPTS extends MutationObserverInit {\n    timeout?: number;\n    /**\n     * interval on non legacy browsers\n     */\n    interval?: number;\n}\n\n\n/**\n *\n *        // - submit checkboxes and radio inputs only if checked\n if ((tagName != \"select\" && elemType != \"button\"\n && elemType != \"reset\" && elemType != \"submit\" && elemType != \"image\")\n && ((elemType != \"checkbox\" && elemType != \"radio\"\n */\n\nenum ALLOWED_SUBMITTABLE_ELEMENTS {\n    SELECT = \"select\",\n    BUTTON = \"button\",\n    SUBMIT = \"submit\",\n    RESET = \"reset\",\n    IMAGE = \"image\",\n    RADIO = \"radio\",\n    CHECKBOX = \"checkbox\"\n\n}\n\n/**\n * helper to fix a common problem that a system has to wait, until a certain condition is reached.\n * Depending on the browser this uses either the Mutation Observer or a semi compatible interval as fallback.\n * @param root the root DomQuery element to start from\n * @param condition the condition lambda to be fulfilled\n * @param options options for the search\n */\nfunction waitUntilDom(root: DomQuery, condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    timeout: 500,\n    interval: 100\n}): Promise<DomQuery> {\n    return new Promise<DomQuery>((success, error) => {\n        let observer: MutationObserver = null;\n        const MUT_ERROR = new Error(\"Mutation observer timeout\");\n\n        // we do the same but for now ignore the options on the dom query\n        // we cannot use absent here, because the condition might search for an absent element\n        function findElement(root: DomQuery, condition: (element: DomQuery) => boolean): DomQuery | null {\n            let found = null;\n            if (!!condition(root)) {\n                return root;\n            }\n            if (options.childList) {\n                found = (condition(root)) ? root : root.childNodes.filter(item => condition(item)).first().value.value;\n            } else if (options.subtree) {\n                found = (condition(root)) ? root : root.querySelectorAll(\" * \").filter(item => condition(item)).first().value.value;\n            } else {\n                found = (condition(root)) ? root : null;\n            }\n            return found;\n        }\n\n        let foundElement = root;\n        if (!!(foundElement = findElement(foundElement, condition))) {\n            success(new DomQuery(foundElement));\n            return;\n        }\n\n        if ('undefined' != typeof MutationObserver) {\n            const mutTimeout = setTimeout(() => {\n                observer.disconnect();\n                return error(MUT_ERROR);\n            }, options.timeout);\n\n            const callback: MutationCallback = (mutationList: MutationRecord[]) => {\n                const found = new DomQuery(mutationList.map((mut) => mut.target)).filter(item => condition(item)).first();\n                if (found.isPresent()) {\n                    clearTimeout(mutTimeout);\n                    observer.disconnect();\n                    success(new DomQuery(found || root));\n                }\n            }\n            observer = new MutationObserver(callback);\n\n            // browsers might ignore it, but we cannot break the api in the case\n            // hence no timeout is passed\n            let observableOpts = {...options};\n            delete observableOpts.timeout;\n            root.eachElem(item => {\n                observer.observe(item, observableOpts)\n            })\n        } else { // fallback for legacy browsers without mutation observer\n\n            let interval = setInterval(() => {\n                let found = findElement(root, condition);\n                if (!!found) {\n                    if (timeout) {\n                        clearTimeout(timeout);\n                        clearInterval(interval);\n                        interval = null;\n                    }\n                    success(new DomQuery(found || root));\n                }\n            }, options.interval);\n            let timeout = setTimeout(() => {\n                if (interval) {\n                    clearInterval(interval);\n                    error(MUT_ERROR);\n                }\n            }, options.timeout)\n\n        }\n    });\n}\n\nexport class ElementAttribute extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return val[0].getAttribute(this.name);\n    }\n\n    set value(value: string) {\n        let val: Element[] = this.element.get(0).orElse(...[]).values;\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].setAttribute(this.name, value);\n        }\n        val[0].setAttribute(this.name, value);\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\nexport class Style extends ValueEmbedder<string> {\n\n    constructor(private element: DomQuery, private name: string, private defaultVal: string = null) {\n        super(element, name);\n    }\n\n    get value(): string {\n        let val: Element[] = this.element.values;\n        if (!val.length) {\n            return this.defaultVal;\n        }\n        return (val[0] as HTMLElement).style[this.name];\n    }\n\n    set value(value: string) {\n        let val: HTMLElement[] = this.element.values as HTMLElement[];\n        for (let cnt = 0; cnt < val.length; cnt++) {\n            val[cnt].style[this.name] = value;\n        }\n    }\n\n    protected getClass(): any {\n        return ElementAttribute;\n    }\n\n    static fromNullable<ElementAttribute, T>(value?: any, valueKey: string = \"value\"): ElementAttribute {\n        return <any>new ElementAttribute(value, valueKey);\n    }\n\n}\n\n/**\n * small helper for the specialized jsf case\n * @constructor\n */\nconst DEFAULT_WHITELIST = () => {\n    return true;\n};\n\ninterface IDomQuery {\n    /**\n     * reference to the systems global object\n     * (globalThis, window, global, depending on the environment)\n     */\n    readonly global: any;\n    /**\n     * reads the first element if it exists and returns an optional\n     */\n    readonly value: Optional<Element>;\n    /**\n     * All elements as array\n     */\n    readonly values: Element[];\n    /**\n     * returns the id as settable value (See also ValueEmbedder)\n     */\n    readonly id: ValueEmbedder<string>;\n    /**\n     * returns the length of embedded nodes (top level)\n     */\n    readonly length: number;\n    /**\n     * the tag name of the first element\n     */\n    readonly tagName: Optional<string>;\n    /**\n     * the node name of the first element\n     */\n    readonly nodeName: Optional<string>;\n    /**\n     * the type of the first element\n     */\n    readonly type: Optional<string>;\n    /**\n     * The name as changeable value\n     */\n    readonly name: ValueEmbedder<string>;\n    /**\n     * The value in case of inputs as changeable value\n     */\n    readonly inputValue: ValueEmbedder<string | boolean>;\n\n    /**\n     * accumulated top element offsetWidth\n     */\n    readonly offsetWidth: number;\n    /**\n     * accumulated top element offsetHeight\n     */\n    readonly offsetHeight: number;\n    /**\n     * accumulated top element offsetLeft\n     */\n    readonly offsetLeft: number;\n    /**\n     * accumulated top element offsetTop\n     */\n    readonly offsetTop: number;\n\n\n    /**\n     * abbreviation for inputValue\\.value to make\n     * the code terser\n     */\n    val: string | boolean;\n\n    /**\n     * the underlying form elements as DomQuery object\n     */\n    readonly elements: DomQuery;\n    /**\n     * settable flag for disabled\n     */\n    disabled: boolean;\n    /**\n     * The child nodes of this node collection as readonly attribute\n     */\n    readonly childNodes: DomQuery;\n    /**\n     * an early stream representation for this DomQuery\n     */\n    readonly stream: Stream<DomQuery>;\n    /**\n     * lazy stream representation for this DomQuery\n     */\n    readonly lazyStream: LazyStream<DomQuery>;\n    /**\n     * transform this node collection to an array\n     */\n    readonly asArray: Array<DomQuery>;\n\n    /**\n     * inner html property\n     * setter and getter which works directly on strings\n     */\n    innerHTML: string;\n\n    /**\n     * same as innerHTML\n     * will be removed once\n     * my code is transitioned\n     * @deprecated do not use anymore, user innerHTML instead\n     */\n    innerHtml: string;\n\n    /**\n     * convenience for dq.id.value to make the code a little bit tighter\n     */\n    nodeId: string;\n\n    /**\n     * returns true if the elements have the tag *tagName* as tag embedded ( highest level )\n     * @param tagName\n     */\n    isTag(tagName: string): boolean;\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery;\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any>): Optional<Element>;\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element>;\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean;\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void): DomQuery;\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete(): void;\n\n    /**\n     * query selector all on the existing dom query object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n\n    /**\n     * closest, walks up the dom tree to fid the closest element to match\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    querySelectorAll(selector): DomQuery;\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery;\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName\n     * @param includeRoot\n     */\n    byTagName(tagName: string, includeRoot ?: boolean): DomQuery;\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string): ElementAttribute;\n\n    /**\n     * style accessor\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     * @param cssProperty\n     */\n    style(cssProperty: string, defaultValue: string): Style;\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string): boolean;\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery;\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery;\n\n    /**\n     * checks whether we have a multipart element in our children\n     */\n    isMultipartCandidate(): boolean;\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string>;\n\n    /**\n     * dispatch event on all children\n     * just a delegated dispatchEvent from the standard\n     * dom working on all queried elements in the monad level\n     *\n     * @param evt the event to be dispatched\n     */\n    dispatchEvent(evt: Event): DomQuery;\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery;\n\n    /**\n     * iterate over each element and perform something on the element\n     * (Dom element is passed instead of DomQuery)\n     * @param func\n     */\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    firstElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * perform an operation on the first element\n     * returns a DomQuery on the first element only\n     * @param func\n     */\n    lastElem(func: (item: Element, cnt?: number) => any): DomQuery;\n\n    /**\n     * same as eachElem, but a DomQuery object is passed down\n     *\n     * @param func\n     */\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any): DomQuery;\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery;\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * Runs an eval and keeps the evaluated code in the head\n     * This is a corner condition, where we want to update the head with custom\n     * code and leave the code in (instead of deleting ig)\n     *\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery;\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {DomQuery} DomQuery of nodes with the detached dom nodes\n     */\n    detach(): DomQuery;\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    append(elem: DomQuery): DomQuery;\n\n    /**\n     * replace convenience function replaces the domquery elements with the\n     * elements passed as parameter\n     * @param toReplace the replacement elements\n     * @return a reference on the replacement elements\n     */\n    replace(toReplace: DomQuery): DomQuery;\n\n    /**\n     * appends the passed elements to our existing queries\n     * note, double appends can happen if you are not careful\n     *\n     * @param elem to append\n     */\n    prepend(elem: DomQuery): DomQuery;\n\n    /**\n     * prepend equivalent to appendTo\n     *\n     * @param elem the element to prepend to\n     */\n    prependTo(elem: DomQuery): DomQuery;\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param charSet\n     */\n    loadScriptEval(src: string, delay: number, charSet: string): void;\n\n    /**\n     * insert toInsert after the current element\n     *\n     * @param toInsert an array of DomQuery objects\n     */\n    insertAfter(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * inserts the elements before the current element\n     *\n     * @param toInsert\n     */\n    insertBefore(...toInsert: Array<DomQuery>): DomQuery;\n\n    /**\n     * in case the DomQuery is pointing to nothing the else value is taken into consideration\n     * als alternative\n     *\n     * @param elseValue the else value\n     */\n    orElse(...elseValue: any): DomQuery;\n\n    /**\n     * the same with lazy evaluation for cases where getting the else value\n     * is a heavy operation\n     *\n     * @param func the else provider function\n     */\n    orElseLazy(func: () => any): DomQuery;\n\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery;\n\n    /**\n     * first parents with a matching selector\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery;\n\n    /**\n     * all parents until the selector match stops\n     * @param tagName\n     */\n    parentsWhileMatch(selector: string): DomQuery;\n\n\n    /**\n     * the parent of the elements\n     */\n    parent(): DomQuery;\n\n    /**\n     * copy all attributes of sourceItem to this DomQuery items\n     *\n     * @param sourceItem the source item to copy over (can be another DomQuery or a parsed XML Query item)\n     */\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery;\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup\n     * @param runEmbeddedScripts\n     * @param runEmbeddedCss\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean): DomQuery;\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the element must be left in the head after eval default === false\n     * @param whiteListed: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky?: boolean, whiteListed?: (val: string) => boolean): DomQuery;\n\n    /**\n     * runs the embedded css\n     */\n    runCss(): DomQuery;\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery;\n\n    /**\n     * adds an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * removes an event listener\n     *\n     * @param type\n     * @param listener\n     * @param options\n     */\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery;\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string): void;\n\n    /*\n     * pushes  in optionally a new textContent, and/or returns the current text content\n     */\n    textContent(joinString?: string): string;\n\n    /*\n     * pushes  in optionally a new innerText, and/or returns the current innerText\n     */\n    innerText(joinString?: string): string;\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge): Config;\n\n    /**\n     * fetches the sub-nodes from ... to..\n     * @param from\n     * @param to\n     */\n    subNodes(from: number, to?: number): DomQuery;\n\n\n    /**\n     * attach shadow elements\n     * 1:1 mapping from attach shadow\n     *\n     * @param modeParams\n     */\n    attachShadow(modeParams: { [key: string]: string }): DomQuery\n\n\n    /**\n     * wait until a condition on the dom is reached\n     *\n     * @return a promise on the affected elements where the condition\n     * @throws an error in case of a timeout\n     */\n    waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS): Promise<DomQuery>;\n\n    // observable: Observable<DomQuery>;\n\n    // observableElem: Observable<Element>;\n}\n\n/**\n * Monadic DomNode representation, ala jquery\n * This is a thin wrapper over querySelectorAll\n * to get slim monadic support\n * to reduce implementation code on the users side.\n * This is vital for frameworks which want to rely on\n * plain dom but still do not want to lose\n * the reduced code footprint of querying dom trees and traversing\n * by using functional patterns.\n *\n * Also, a few convenience methods are added to reduce\n * the code footprint of standard dom processing\n * operations like eval\n *\n * in most older systems\n * Note parts of this code still stem from the Dom.js I have written 10 years\n * ago, those parts look a bit ancient and will be replaced over time.\n *\n */\nexport class DomQuery implements IDomQuery, IStreamDataSource<DomQuery>, Iterable<DomQuery> {\n\n    static absent = new DomQuery();\n\n    /**\n     * reference to the environmental global object\n     */\n    static global = _global$;\n\n    private rootNode: Array<Element> = [];\n\n    pos = -1;\n\n    constructor(...rootNode: Array<Element | ShadowRoot | DomQuery | Document | Array<any> | string>) {\n\n        if (Optional.fromNullable(rootNode).isAbsent() || !rootNode.length) {\n            return;\n        } else {\n            // we need to flatten out the arrays\n\n            for (let cnt = 0; cnt < rootNode.length; cnt++) {\n                if (!rootNode[cnt]) {\n                    // we skip possible null entries which can happen in\n                    // certain corner conditions due to the constructor re-wrapping single elements into arrays.\n                } else if (isString(rootNode[cnt])) {\n                    let foundElement = DomQuery.querySelectorAll(<string>rootNode[cnt]);\n                    if (!foundElement.isAbsent()) {\n                        rootNode.push(...foundElement.values)\n                    }\n                } else if (rootNode[cnt] instanceof DomQuery) {\n                    this.rootNode.push(...(<any>rootNode[cnt]).values);\n                } else {\n                    this.rootNode.push(<any>rootNode[cnt]);\n                }\n            }\n        }\n    }\n\n\n    /**\n     * returns the first element\n     */\n    get value(): Optional<Element> {\n        return this.getAsElem(0);\n    }\n\n    get values(): Element[] {\n        return this.allElems();\n    }\n\n    get global(): any {\n        return _global$;\n    }\n\n    /**\n     * returns the id of the first element\n     */\n    get id(): ValueEmbedder<string> {\n        return new ElementAttribute(this.get(0), \"id\");\n    }\n\n    /**\n     * length of the entire query set\n     */\n    get length(): number {\n        return this.rootNode.length\n    }\n\n    /**\n     * convenience method for tagName\n     */\n    get tagName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"tagName\");\n    }\n\n    /**\n     * convenience method for nodeName\n     */\n    get nodeName(): Optional<string> {\n        return <Optional<string>>this.getAsElem(0).getIf(\"nodeName\");\n    }\n\n    isTag(tagName: string): boolean {\n        return !this.isAbsent()\n            && (this.nodeName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n                || this.tagName.orElse(\"__none___\")\n                    .value.toLowerCase() == tagName.toLowerCase()\n            )\n    }\n\n    /**\n     * convenience property for type\n     *\n     * returns null in case of no type existing otherwise\n     * the type of the first element\n     */\n    get type(): Optional<string> {\n        return this.getAsElem(0).getIf(\"type\");\n    }\n\n    /**\n     * convenience property for name\n     *\n     * returns null in case of no type existing otherwise\n     * the name of the first element\n     */\n    get name(): ValueEmbedder<string> {\n        return new ValueEmbedder(this.getAsElem(0).value, \"name\");\n    }\n\n    /**\n     * convenience property for value\n     *\n     * returns null in case of no type existing otherwise\n     * the value of the first element\n     */\n    get inputValue(): ValueEmbedder<string | boolean> {\n        if (this.getAsElem(0).getIf(\"value\").isPresent()) {\n            return new ValueEmbedder<string>(this.getAsElem(0).value);\n        } else {\n            return <any>ValueEmbedder.absent;\n        }\n    }\n\n    get val(): string | boolean {\n        return this.inputValue.value;\n    }\n\n    set val(value: string | boolean) {\n        this.inputValue.value = value;\n    }\n\n    get nodeId(): string {\n        return this.id.value;\n    }\n\n    set nodeId(value: string) {\n        this.id.value = value;\n    }\n\n    get checked(): boolean {\n        return Stream.of(...this.values).allMatch(el => !!(<any>el).checked);\n    }\n\n    set checked(newChecked: boolean) {\n        this.eachElem(el => (<any>el).checked = newChecked);\n    }\n\n    get elements(): DomQuery {\n        // a simple querySelectorAll should suffice\n        return this.querySelectorAll(\"input, checkbox, select, textarea, fieldset\");\n    }\n\n    get deepElements(): DomQuery {\n        let elemStr = \"input, select, textarea, checkbox, fieldset\";\n        return this.querySelectorAllDeep(elemStr);\n    }\n\n    /**\n     * a deep search which treats the single isolated shadow dom areas\n     * separately and runs the query on each shadow dom\n     * @param queryStr\n     */\n    querySelectorAllDeep(queryStr: string): DomQuery {\n        let found: Array<DomQuery> = [];\n        let queryRes = this.querySelectorAll(queryStr);\n        if (queryRes.length) {\n            found.push(queryRes);\n        }\n        let shadowRoots = this.querySelectorAll(\"*\").shadowRoot;\n        if (shadowRoots.length) {\n            let shadowRes = shadowRoots.querySelectorAllDeep(queryStr);\n            if (shadowRes.length) {\n                found.push(shadowRes);\n            }\n        }\n        return new DomQuery(...found);\n    }\n\n\n    /**\n     * disabled flag\n     */\n    get disabled(): boolean {\n        return this.attr(\"disabled\").isPresent();\n    }\n\n    set disabled(disabled: boolean) {\n        // this.attr(\"disabled\").value = disabled + \"\";\n        if (!disabled) {\n            this.removeAttribute(\"disabled\");\n        } else {\n            this.attr(\"disabled\").value = \"disabled\";\n        }\n\n    }\n\n    removeAttribute(name: string) {\n        this.eachElem(item => item.removeAttribute(name));\n    }\n\n    get childNodes(): DomQuery {\n        let childNodeArr: Array<Element> = [];\n        this.eachElem((item: Element) => {\n            childNodeArr = childNodeArr.concat(objToArray(item.childNodes));\n        });\n        return new DomQuery(...childNodeArr);\n    }\n\n    /**\n     * binding into stream\n     */\n    get stream(): Stream<DomQuery> {\n        return new Stream<DomQuery>(...this.asArray);\n    }\n\n    /**\n     * fetches a lazy stream representation\n     * lazy should be applied if you have some filters etc.\n     * in between, this can reduce the number of post filter operations\n     * and ram usage\n     * significantly because the operations are done lazily and stop\n     * once they hit a dead end.\n     */\n    get lazyStream(): LazyStream<DomQuery> {\n        return LazyStream.of(...this.asArray);\n    }\n\n    get asArray(): Array<DomQuery> {\n        // filter not supported by IE11\n        return [].concat(LazyStream.of(...this.rootNode).filter(item => {\n            return item != null\n        })\n            .map(item => {\n                return DomQuery.byId(item)\n            }).collect(new ArrayCollector()));\n    }\n\n    get offsetWidth(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetWidth)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0).value;\n    }\n\n    get offsetHeight(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetHeight)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0).value;\n    }\n\n    get offsetLeft(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetLeft)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0).value;\n    }\n\n    get offsetTop(): number {\n        return LazyStream.of(...this.rootNode)\n            .filter(item => item != null)\n            .map(elem => (elem as HTMLElement).offsetTop)\n            .reduce((accumulate, incoming) => accumulate + incoming, 0).value;\n    }\n\n    get asNodeArray(): Array<DomQuery> {\n        return [].concat(Stream.of(...this.rootNode).filter(item => item != null).collect(new ArrayCollector()));\n    }\n\n\n    static querySelectorAllDeep(selector: string) {\n        return new DomQuery(document).querySelectorAllDeep(selector);\n    }\n\n    /**\n     * easy query selector all producer\n     *\n     * @param selector the selector\n     * @returns a results dom query object\n     */\n    static querySelectorAll(selector: string): DomQuery {\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return new DomQuery(document)._querySelectorAllDeep(selector);\n        } else {\n            return new DomQuery(document)._querySelectorAll(selector);\n        }\n    }\n\n    /**\n     * byId producer\n     *\n     * @param selector id\n     * @param deep true if you want to go into shadow areas\n     * @return a DomQuery containing the found elements\n     */\n    static byId(selector: string | DomQuery | Element, deep = false): DomQuery {\n        if (isString(selector)) {\n            return (!deep) ? new DomQuery(document).byId(<string>selector) : new DomQuery(document).byIdDeep(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    /**\n     * byTagName producer\n     *\n     * @param selector name\n     * @return a DomQuery containing the found elements\n     */\n    static byTagName(selector: string | DomQuery | Element): DomQuery {\n        if (isString(selector)) {\n            return new DomQuery(document).byTagName(<string>selector);\n        } else {\n            return new DomQuery(<any>selector);\n        }\n    }\n\n    static globalEval(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEval(code, nonce);\n    }\n\n    static globalEvalSticky(code: string, nonce?: string): DomQuery {\n        return new DomQuery(document).globalEvalSticky(code, nonce);\n    }\n\n    /**\n     * builds the ie nodes properly in a placeholder\n     * and bypasses a non script insert bug that way\n     * @param markup the markup code to be executed from\n     */\n    static fromMarkup(markup: string): DomQuery {\n\n        // https:// developer.mozilla.org/de/docs/Web/API/DOMParser license creative commons\n        const doc = document.implementation.createHTMLDocument(\"\");\n        markup = trim(markup);\n        let lowerMarkup = markup.toLowerCase();\n        if (lowerMarkup.search(/\\<\\!doctype[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/\\<html[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/\\<head[^\\w\\-]+/gi) != -1 ||\n            lowerMarkup.search(/\\<body[^\\w\\-]+/gi) != -1) {\n            doc.documentElement.innerHTML = markup;\n            return new DomQuery(doc.documentElement);\n        } else {\n            let startsWithTag = function (str: string, tagName: string) {\n                let tag1 = [\"<\", tagName, \">\"].join(\"\");\n                let tag2 = [\"<\", tagName, \" \"].join(\"\");\n                return (str.indexOf(tag1) == 0) || (str.indexOf(tag2) == 0);\n            };\n\n            let dummyPlaceHolder = new DomQuery(document.createElement(\"div\"));\n\n            // table needs special treatment due to the browsers auto creation\n            if (startsWithTag(lowerMarkup, \"thead\") || startsWithTag(lowerMarkup, \"tbody\")) {\n                dummyPlaceHolder.html(`<table>${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tfoot\")) {\n                dummyPlaceHolder.html(`<table><thead></thead><tbody><tbody${markup}</table>`);\n                return dummyPlaceHolder.querySelectorAll(\"table\").get(2).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"tr\")) {\n                dummyPlaceHolder.html(`<table><tbody>${markup}</tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tbody\").get(0).childNodes.detach();\n            } else if (startsWithTag(lowerMarkup, \"td\")) {\n                dummyPlaceHolder.html(`<table><tbody><tr>${markup}</tr></tbody></table>`);\n                return dummyPlaceHolder.querySelectorAll(\"tr\").get(0).childNodes.detach();\n            }\n\n            dummyPlaceHolder.html(markup);\n            return dummyPlaceHolder.childNodes.detach();\n        }\n\n    }\n\n    /**\n     * returns the nth element as DomQuery\n     * from the internal elements\n     * note if you try to reach a non-existing element position\n     * you will get back an absent entry\n     *\n     * @param index the nth index\n     */\n    get(index: number): DomQuery {\n        return (index < this.rootNode.length) ? new DomQuery(this.rootNode[index]) : DomQuery.absent;\n    }\n\n\n    /**\n     * returns the nth element as optional of an Element object\n     * @param index the number from the index\n     * @param defaults the default value if the index is overrun default Optional\\.absent\n     */\n    getAsElem(index: number, defaults: Optional<any> = Optional.absent): Optional<Element> {\n        return (index < this.rootNode.length) ? Optional.fromNullable(this.rootNode[index]) : defaults;\n    }\n\n    /**\n     * returns the files from a given element\n     * @param index\n     */\n    filesFromElem(index: number): Array<any> {\n        return (index < this.rootNode.length) ? (<any>this.rootNode[index])?.files ? (<any>this.rootNode[index]).files : [] : [];\n    }\n\n    /**\n     * returns the value array< of all elements\n     */\n    allElems(): Array<Element> {\n        return this.rootNode;\n    }\n\n    /**\n     * absent no values reached?\n     */\n    isAbsent(): boolean {\n        return this.length == 0;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     */\n    isPresent(presentRunnable ?: (elem ?: DomQuery) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    /**\n     * should make the code clearer\n     * note if you pass a function\n     * this refers to the active DomQuery object\n     *\n     *\n     * @param presentRunnable\n     */\n    ifPresentLazy(presentRunnable: (elem ?: DomQuery) => void = function () {\n    }): DomQuery {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    /**\n     * remove all affected nodes from this query object from the dom tree\n     */\n    delete() {\n        this.eachElem((node: Element) => {\n            if (node.parentNode) {\n                node.parentNode.removeChild(node);\n            }\n        });\n    }\n\n    querySelectorAll(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._querySelectorAllDeep(selector);\n        } else {\n            return this._querySelectorAll(selector);\n        }\n    }\n\n    closest(selector): DomQuery {\n        // We could merge both methods, but for now this is more readable\n        if (selector.indexOf(\"/shadow/\") != -1) {\n            return this._closestDeep(selector);\n        } else {\n            return this._closest(selector);\n        }\n    }\n\n\n    /**\n     * core byId method\n     * @param id the id to search for\n     * @param includeRoot also match the root element?\n     */\n    byId(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        // for some strange kind of reason the # selector fails\n        // on hidden elements we use the attributes match selector\n        // that works\n        res = res.concat(this.querySelectorAll(`[id=\"${id}\"]`));\n        return new DomQuery(...res);\n    }\n\n\n    byIdDeep(id: string, includeRoot?: boolean): DomQuery {\n        let res: Array<DomQuery> = [];\n        if (includeRoot) {\n            res = res.concat(\n                LazyStream.of(...(this?.rootNode || []))\n                    .filter(item => id == item.id)\n                    .map(item => new DomQuery(item))\n                    .collect(new ArrayCollector())\n            );\n        }\n\n        let subItems = this.querySelectorAllDeep(`[id=\"${id}\"]`);\n        if (subItems.length) {\n            res.push(subItems);\n        }\n\n        return new DomQuery(...res);\n    }\n\n    /**\n     * same as byId just for the tag name\n     * @param tagName the tag-name to search for\n     * @param includeRoot shall the root element be part of this search\n     * @param deep do we also want to go into shadow dom areas\n     */\n    byTagName(tagName: string, includeRoot ?: boolean, deep ?: boolean): DomQuery {\n        let res: Array<Element | DomQuery> = [];\n        if (includeRoot) {\n            res = <any>LazyStream.of(...(this?.rootNode ?? []))\n                .filter(element => element?.tagName == tagName)\n                .reduce<Array<Element | DomQuery>>((reduction: any, item: Element) => reduction.concat([item]), res)\n                .orElse(res).value;\n        }\n\n        (deep) ? res.push(this.querySelectorAllDeep(tagName)) : res.push(this.querySelectorAll(tagName));\n        return new DomQuery(...res);\n    }\n\n    /**\n     * attr accessor, usage myQuery.attr(\"class\").value = \"bla\"\n     * or let value myQuery.attr(\"class\").value\n     * @param attr the attribute to set\n     * @param defaultValue the default value in case nothing is presented (defaults to null)\n     */\n    attr(attr: string, defaultValue: string = null): ElementAttribute {\n        return new ElementAttribute(this, attr, defaultValue);\n    }\n\n    style(cssProperty: string, defaultValue: string = null): Style {\n        return new Style(this, cssProperty, defaultValue);\n    }\n\n\n    /**\n     * Checks for an existing class in the class attributes\n     *\n     * @param clazz the class to search for\n     */\n    hasClass(clazz: string) {\n        let hasIt = false;\n        this.eachElem(node => {\n            hasIt = node.classList.contains(clazz);\n            if (hasIt) {\n                return false;\n            }\n        });\n        return hasIt;\n    }\n\n    /**\n     * appends a class string if not already in the element(s)\n     *\n     * @param clazz the style class to append\n     */\n    addClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.add(clazz))\n        return this;\n    }\n\n    /**\n     * remove the style class if in the class definitions\n     *\n     * @param clazz\n     */\n    removeClass(clazz: string): DomQuery {\n        this.eachElem(item => item.classList.remove(clazz));\n        return this;\n    }\n\n    /**\n     * checks whether we have a multipart element in our children\n     * or are one\n     */\n    isMultipartCandidate(deep = false): boolean {\n        const FILE_INPUT = \"input[type='file']\";\n        return this.matchesSelector(FILE_INPUT) ||\n            ((!deep) ? this.querySelectorAll(FILE_INPUT) :\n                this.querySelectorAllDeep(FILE_INPUT)).first().isPresent();\n    }\n\n    /**\n     * innerHtml\n     * equivalent to jQueries html\n     * as setter the html is set and the\n     * DomQuery is given back\n     * as getter the html string is returned\n     *\n     * @param newInnerHTML the inner html to be inserted\n     */\n    html(newInnerHTML?: string): DomQuery | Optional<string> {\n        if (Optional.fromNullable(newInnerHTML).isAbsent()) {\n            return this.isPresent() ? Optional.fromNullable(this.innerHTML) : Optional.absent;\n        }\n        this.innerHTML = newInnerHTML;\n\n        return this;\n    }\n\n    /**\n     * Standard dispatch event method, delegated from node\n     */\n    dispatchEvent(evt: Event): DomQuery {\n        this.eachElem(elem => elem.dispatchEvent(evt));\n        return this;\n    }\n\n    /**\n     * abbreviation property to use innerHTML directly like on the dom tree\n     * @param newInnerHTML  the new inner html which should be attached to \"this\" domQuery\n     */\n    set innerHTML(newInnerHTML: string) {\n        this.eachElem(elem => elem.innerHTML = newInnerHTML);\n    }\n\n    /**\n     * getter abbreviation to use innerHTML directly\n     */\n    get innerHTML(): string {\n        let retArr = [];\n        this.eachElem(elem => retArr.push(elem.innerHTML));\n        return retArr.join(\"\");\n    }\n\n    /**\n     * since the dom allows both innerHTML and innerHtml we also have to implement both\n     * @param newInnerHtml see above\n     */\n    set innerHtml(newInnerHtml: string) {\n        this.innerHTML = newInnerHtml;\n    }\n\n    /**\n     * same here, getter for allowing innerHtml directly\n     */\n    get innerHtml(): string {\n        return this.innerHTML;\n    }\n\n    /**\n     * filters the current dom query elements\n     * upon a given selector\n     *\n     * @param selector\n     */\n    filterSelector(selector: string): DomQuery {\n        let matched = [];\n\n        this.eachElem(item => {\n            if (this._mozMatchesSelector(item, selector)) {\n                matched.push(item)\n            }\n        });\n        return new DomQuery(...matched);\n    }\n\n    /**\n     * checks whether any item in this domQuery level matches the selector\n     * if there is one element only attached, as root the match is only\n     * performed on this element.\n     * @param selector\n     */\n    matchesSelector(selector: string): boolean {\n        const ret = this.lazyStream\n            .map(item => this._mozMatchesSelector(item.getAsElem(0).value, selector))\n            .filter(match => match)\n            .first();\n        return ret.isPresent();\n    }\n\n    /**\n     * easy node traversal, you can pass\n     * a set of node selectors which are joined as direct children\n     *\n     * Note!!! The root nodes are not in the getIf, those are always the child nodes\n     *\n     * @param nodeSelector\n     */\n    getIf(...nodeSelector: Array<string>): DomQuery {\n\n        let selectorStage: DomQuery = this.childNodes;\n        for (let cnt = 0; cnt < nodeSelector.length; cnt++) {\n            selectorStage = selectorStage.filterSelector(nodeSelector[cnt]);\n            if (selectorStage.isAbsent()) {\n                return selectorStage;\n            }\n        }\n        return selectorStage;\n    }\n\n    eachElem(func: (item: Element, cnt?: number) => any): DomQuery {\n\n        for (let cnt = 0, len = this.rootNode.length; cnt < len; cnt++) {\n            if (func(this.rootNode[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n    firstElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[0], 0);\n        }\n        return this;\n    }\n\n    lastElem(func: (item: Element, cnt?: number) => any = item => item): DomQuery {\n        if (this.rootNode.length > 1) {\n            func(this.rootNode[this.rootNode.length - 1], 0);\n        }\n        return this;\n    }\n\n    each(func: (item: DomQuery, cnt?: number) => any): DomQuery {\n        Stream.of(...this.rootNode)\n            .each((item, cnt) => {\n                // we could use a filter, but for the best performance we don´t\n                if (item == null) {\n                    return;\n                }\n                return func(DomQuery.byId(item), cnt);\n            });\n\n        return this;\n    }\n\n    /**\n     * replace convenience function, replaces one or more elements with\n     * a set of elements passed as DomQuery\n     * @param toReplace the replaced nodes as reference (original node has been replaced)\n     */\n    replace(toReplace: DomQuery): DomQuery {\n        this.each(item => {\n            let asElem = item.getAsElem(0).value;\n            let parent = asElem.parentElement;\n            let nextElement = asElem.nextElementSibling;\n            let previousElement = asElem.previousElementSibling;\n            if(nextElement != null) {\n                new DomQuery(nextElement).insertBefore(toReplace);\n            } else if(previousElement) {\n                new DomQuery(previousElement).insertAfter(toReplace)\n            } else {\n                new DomQuery(parent).append(toReplace);\n            }\n            item.delete();\n        });\n        return toReplace;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    first(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            func(this.get(0), 0);\n            return this.get(0);\n        }\n        return this;\n    }\n\n    /**\n     * returns a new dom query containing only the first element max\n     *\n     * @param func a an optional callback function to perform an operation on the first element\n     */\n    last(func: (item: DomQuery, cnt?: number) => any = (item) => item): DomQuery {\n        if (this.rootNode.length >= 1) {\n            let lastNode = this.get(this.rootNode.length - 1);\n            func(lastNode, 0);\n            return lastNode;\n        }\n        return this;\n    }\n\n    /**\n     * filter function which filters a subset\n     *\n     * @param func\n     */\n    filter(func: (item: DomQuery) => boolean): DomQuery {\n        let reArr: Array<DomQuery> = [];\n        this.each((item: DomQuery) => {\n            func(item) ? reArr.push(item) : null;\n        });\n        return new DomQuery(...<any>reArr);\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEval(code: string, nonce ?: string): DomQuery {\n        const head = document.getElementsByTagName(\"head\")?.[0]\n            ?? document.documentElement.getElementsByTagName(\"head\")?.[0];\n        const script = document.createElement(\"script\");\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        let newScriptElement = head.appendChild(script);\n        head.removeChild(newScriptElement);\n        return this;\n    }\n\n    /**\n     * global eval head appendix method\n     * no other methods are supported anymore\n     * @param code the code to be evaluated\n     * @param  nonce optional  nonce key for higher security\n     */\n    globalEvalSticky(code: string, nonce ?: string): DomQuery {\n        let head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\n        let script = document.createElement(\"script\");\n        this.applyNonce(nonce, script);\n        script.type = \"text/javascript\";\n        script.innerHTML = code;\n        head.appendChild(script);\n        return this;\n    }\n\n    /**\n     * detaches a set of nodes from their parent elements\n     * in a browser independent manner\n     * @return {Array} an array of nodes with the detached dom nodes\n     */\n    detach(): DomQuery {\n        this.eachElem((item: Element) => {\n            item.parentNode.removeChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * appends the current set of elements\n     * to the element or first element passed via elem\n     * @param elem\n     */\n    appendTo(elem: DomQuery | string): DomQuery {\n        if (Lang.isString(elem)) {\n            this.appendTo(DomQuery.querySelectorAll(elem as string));\n            return this;\n        }\n        this.eachElem((item) => {\n            let value1: Element = <Element>(elem as DomQuery).getAsElem(0).orElseLazy(() => {\n                return {\n                    appendChild: () => {\n                    }\n                }\n            }).value;\n            value1.appendChild(item);\n        });\n        return this;\n    }\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce value to allow increased security via nonce crypto token\n     */\n    loadScriptEval(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(false, src, delay, nonce);\n\n        return this;\n    }\n\n\n    /**\n     * loads and evaluates a script from a source uri\n     *\n     * @param src the source to be loaded and evaluated\n     * @param delay in milliseconds execution default (0 == no delay)\n     * @param nonce optional nonce parameter for increased security via nonce crypto token\n     */\n    loadScriptEvalSticky(src: string, delay: number = 0,  nonce?: string) {\n        this._loadScriptEval(true, src, delay, nonce);\n\n        return this;\n    }\n\n    insertAfter(...toInsertParams: Array<DomQuery>): DomQuery {\n\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                let nextSibling: Element = <any>existingElement.nextSibling;\n                toInsertParams[cnt].eachElem(insertElem => {\n                    if (nextSibling) {\n                        rootNode.insertBefore(insertElem, nextSibling);\n                        existingElement = nextSibling;\n                    } else {\n                        rootNode.appendChild(insertElem);\n                    }\n                });\n\n            }\n        });\n\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    insertBefore(...toInsertParams: Array<DomQuery>): DomQuery {\n        this.each(existingItem => {\n            let existingElement = existingItem.getAsElem(0).value;\n            let rootNode = existingElement.parentNode;\n            for (let cnt = 0; cnt < toInsertParams.length; cnt++) {\n                toInsertParams[cnt].eachElem(insertElem => {\n                    rootNode.insertBefore(insertElem, existingElement);\n                });\n            }\n        });\n        let res = [];\n        res.push(this);\n        res = res.concat(toInsertParams);\n        return new DomQuery(...res);\n    }\n\n    orElse(...elseValue: any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(...elseValue);\n        }\n    }\n\n    orElseLazy(func: () => any): DomQuery {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return new DomQuery(func());\n        }\n    }\n\n    /**\n     * find all parents in the hierarchy for which the selector matches\n     * @param selector\n     */\n    allParents(selector: string): DomQuery {\n        let parent = this.parent();\n        let ret = [];\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n               ret.push(parent);\n            }\n            parent = parent.parent();\n        }\n        return new DomQuery(...ret);\n    }\n\n    /**\n     * finds the first parent in the hierarchy for which the selector matches\n     * @param selector\n     */\n    firstParent(selector: string): DomQuery {\n        let parent = this.parent();\n        while(parent.isPresent()) {\n            if(parent.matchesSelector(selector)) {\n                return parent;\n            }\n            parent = parent.parent();\n        }\n        return DomQuery.absent;\n    }\n\n    /**\n     * fetches all parents as long as the filter criterium matches\n     * @param selector\n     */\n    parentsWhileMatch(selector: string): DomQuery {\n        const retArr: Array<DomQuery> = [];\n        let parent = this.parent().filter(item => item.matchesSelector(selector));\n        while(parent.isPresent()) {\n            retArr.push(parent);\n            parent = parent.parent().filter(item => item.matchesSelector(selector));\n        }\n\n        return new DomQuery(...retArr);\n    }\n\n    parent(): DomQuery {\n        let ret = [];\n        this.eachElem((item: Element) => {\n            let parent = item.parentNode || (<any>item).host || item.shadowRoot;\n            if (parent && ret.indexOf(parent) == -1) {\n                ret.push(parent);\n            }\n        });\n\n        return new DomQuery(...ret);\n    }\n\n    copyAttrs(sourceItem: DomQuery | XMLQuery): DomQuery {\n        sourceItem.eachElem((sourceNode: Element) => {\n            let attrs: Array<Attr> = objToArray(sourceNode.attributes);\n            for (let item of attrs) {\n                let value: string = item.value;\n                let name: string = item.name;\n\n                switch (name) {\n                    case \"id\":\n                        this.id.value = value;\n                        break;\n                    case \"disabled\":\n                        this.resolveAttributeHolder(\"disabled\").disabled = value;\n                        break;\n                    case \"checked\":\n                        this.resolveAttributeHolder(\"checked\").checked = value;\n                        break;\n                    default:\n                        this.attr(name).value = value;\n                }\n            }\n        });\n        return this;\n    }\n\n    /**\n     * outerHTML convenience method\n     * browsers only support innerHTML but\n     * for instance for your jsf.js we have a full\n     * replace pattern which needs outerHTML processing\n     *\n     * @param markup the markup which should replace the root element\n     * @param runEmbeddedScripts if true the embedded scripts are executed\n     * @param runEmbeddedCss if true the embedded css are executed\n     * @param deep should this also work for shadow dom (run scripts etc...)\n     */\n    outerHTML(markup: string, runEmbeddedScripts ?: boolean, runEmbeddedCss ?: boolean, deep = false): DomQuery {\n        if (this.isAbsent()) {\n            return;\n        }\n\n        let focusElementId = document?.activeElement?.id;\n        let caretPosition = (focusElementId) ? DomQuery.getCaretPosition(document.activeElement) : null;\n        let nodes = DomQuery.fromMarkup(markup);\n        let res = [];\n        let toReplace = this.getAsElem(0).value;\n        let firstInsert = nodes.get(0);\n        let parentNode = toReplace.parentNode;\n        let replaced = firstInsert.getAsElem(0).value;\n        parentNode.replaceChild(replaced, toReplace);\n        res.push(new DomQuery(replaced));\n        // no replacement possible\n        if (this.isAbsent()) {\n            return this;\n        }\n\n        let insertAdditionalItems = [];\n\n        if (nodes.length > 1) {\n            insertAdditionalItems = insertAdditionalItems.concat(...nodes.values.slice(1));\n            res.push(DomQuery.byId(replaced).insertAfter(new DomQuery(...insertAdditionalItems)));\n        }\n\n        if (runEmbeddedScripts) {\n            this.runScripts();\n        }\n        if (runEmbeddedCss) {\n            this.runCss();\n        }\n\n        let focusElement = DomQuery.byId(focusElementId);\n        if (focusElementId && focusElement.isPresent() &&\n            caretPosition != null && \"undefined\" != typeof caretPosition) {\n            focusElement.eachElem(item => DomQuery.setCaretPosition(item, caretPosition));\n        }\n\n        return nodes;\n    }\n\n    /**\n     * Run through the given nodes in the DomQuery execute the inline scripts\n     * @param sticky if set to true the evaluated elements will stick to the head, default false\n     * @param whitelisted: optional whitelist function which can filter out script tags which are not processed\n     * defaults to the standard jsf.js exclusion (we use this code for myfaces)\n     */\n    runScripts(sticky = false, whitelisted: (val: string) => boolean = DEFAULT_WHITELIST): DomQuery {\n        const evalCollectedScripts = (scriptsToProcess: { evalText: string, nonce: string }[]) => {\n            if (scriptsToProcess.length) {\n                // script source means we have to eval the existing\n                // scripts before we run the 'include' command\n                // this.globalEval(finalScripts.join(\"\\n\"));\n                let joinedScripts = [];\n                Stream.of(...scriptsToProcess).each(item => {\n                    if (!item.nonce) {\n                        joinedScripts.push(item.evalText)\n                    } else {\n                        if (joinedScripts.length) {\n                            this.globalEval(joinedScripts.join(\"\\n\"));\n                            joinedScripts.length = 0;\n                        }\n\n                        (!sticky) ?\n                            this.globalEval(item.evalText, item.nonce) :\n                            this.globalEvalSticky(item.evalText, item.nonce);\n                    }\n                });\n                if (joinedScripts.length) {\n                    (!sticky) ? this.globalEval(joinedScripts.join(\"\\n\")) :\n                        this.globalEvalSticky(joinedScripts.join(\"\\n\"));\n                    joinedScripts.length = 0;\n                }\n\n                scriptsToProcess = [];\n            }\n            return scriptsToProcess;\n        }\n\n        let finalScripts = [],\n            allowedItemTypes = [\"\", \"script\", \"text/javascript\", \"text/ecmascript\", \"ecmascript\"],\n            execScript = (item) => {\n                let tagName = item.tagName;\n                let itemType = (item?.type ?? '').toLowerCase();\n                if (tagName &&\n                    eqi(tagName, \"script\") &&\n                    allowedItemTypes.indexOf(itemType) != -1) {\n                    let src = item.getAttribute('src');\n                    if ('undefined' != typeof src\n                        && null != src\n                        && src.length > 0\n                    ) {\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value;\n                        // we have to move this into an inner if because chrome otherwise chokes\n                        // due to changing the and order instead of relying on left to right\n                        // if jsf.js is already registered we do not replace it anymore\n                        if (whitelisted(src)) {\n                            // we run the collected scripts, before we run the 'include' command\n                            finalScripts = evalCollectedScripts(finalScripts);\n                            if (!sticky) {\n                                (!!nonce) ? this.loadScriptEval(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEval(src, 0);\n                            } else {\n                                (!!nonce) ? this.loadScriptEvalSticky(src, 0,  nonce) :\n                                    // if no nonce is set we do not pass any once\n                                    this.loadScriptEvalSticky(src, 0);\n                            }\n                        }\n\n                    } else {\n                        // embedded script auto eval\n                        // probably not needed anymore\n                        let evalText = trim(item.text || item.innerText || item.innerHTML);\n                        let go = true;\n\n                        while (go) {\n                            go = false;\n                            if (evalText.substring(0, 4) == \"<!--\") {\n                                evalText = evalText.substring(4);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 4) == \"//<!--\") {\n                                evalText = evalText.substring(6);\n                                go = true;\n                            }\n                            if (evalText.substring(0, 11) == \"//<![CDATA[\") {\n                                evalText = evalText.substring(11);\n                                go = true;\n                            }\n                        }\n                        let nonce = item?.nonce ?? item.getAttribute('nonce').value ?? '';\n                        // we have to run the script under a global context\n                        // we store the script for fewer calls to eval\n                        finalScripts.push({\n                            nonce,\n                            evalText\n                        });\n                    }\n                }\n            };\n        try {\n            let scriptElements = new DomQuery(this.filterSelector(\"script\"), this.querySelectorAll(\"script\"));\n            // script execution order by relative pos in their dom tree\n            scriptElements.stream\n                .flatMap(item => Stream.of(...item.values))\n                .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3) // preceding 2, following == 4)\n                .each(item => execScript(item));\n\n            evalCollectedScripts(finalScripts);\n        } catch (e) {\n            if (console && console.error) {\n                // not sure if we\n                // should use our standard\n                // error mechanisms here\n                // because in the head appendix\n                // method only a console\n                // error would be raised as well\n                console.error(e.message || e.description);\n            }\n        } finally {\n            // the usual ie6 fix code\n            // the IE6 garbage collector is broken\n            // nulling closures helps somewhat to reduce\n            // mem leaks, which are impossible to avoid\n            // at this browser\n            execScript = null;\n        }\n        return this;\n    }\n\n    runCss(): DomQuery {\n\n        const execCss = (toReplace: HTMLElement) => {\n                const _toReplace = DomQuery.byId(toReplace);\n                const tagName = _toReplace.tagName.orElse(\"\").value;\n                const head = DomQuery.byTagName(\"head\");\n\n                if (tagName && eqi(tagName, \"link\") && eqi(toReplace.getAttribute(\"rel\"), \"stylesheet\")) {\n                    const rel = toReplace.getAttribute(\"rel\");\n                    //if possible we are now replacing the existing elements where we reference this stylesheet\n                    const matches = head.querySelectorAll(`link[rel='stylesheet'][href='${rel}']`);\n\n                    if(matches.length) {\n                        matches.replace(_toReplace);\n                    } else {\n                        head.append(_toReplace);\n                    }\n                } else if (tagName && eqi(tagName, \"style\")) {\n                    let innerText = _toReplace.innerHTML.replace(/\\s+/gi, \"\");\n                    let styles = head.querySelectorAll(\"style\");\n                    styles = styles.stream.filter(style => {\n                        return style.innerHTML.replace(/\\s+/gi, \"\") == innerText;\n                    }).collect(new DomQueryCollector())\n                    if(!styles.length) { //already present\n                        head.append(_toReplace);\n                    }\n                }\n            };\n\n        const scriptElements: DomQuery = new DomQuery(this.filterSelector(\"link, style\"), this.querySelectorAll(\"link, style\"));\n\n        scriptElements.stream\n            .flatMap(item => Stream.of(...item.values))\n            .sort((node1, node2) => node1.compareDocumentPosition(node2) - 3)\n            .each(item => execCss(item));\n\n        return this;\n    }\n\n    /**\n     * fires a click event on the underlying dom elements\n     */\n    click(): DomQuery {\n        this.fireEvent(\"click\");\n        return this;\n    }\n\n    addEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.addEventListener(type, listener, options));\n        return this;\n    }\n\n    removeEventListener(type: string, listener: (evt: Event) => void, options?: boolean | EventListenerOptions): DomQuery {\n        this.eachElem((node: Element) => node.removeEventListener(type, listener, options));\n        return this;\n    }\n\n    /**\n     * fires an event\n     */\n    fireEvent(eventName: string, options: {[key: string]: any} = {}) {\n        // merge with last one having the highest priority\n        let finalOptions = Stream.ofAssoc({\n            bubbles: true, cancelable: true\n        }).concat(Stream.ofAssoc(options)).collect(new AssocArrayCollector());\n        \n        this.eachElem((node: Element) => {\n            let doc;\n            if (node.ownerDocument) {\n                doc = node.ownerDocument;\n            } else if (node.nodeType == 9) {\n                // the node may be the document itself, nodeType 9 = DOCUMENT_NODE\n                doc = node;\n            } else {\n                throw new Error(\"Invalid node passed to fireEvent: \" + node.id);\n            }\n\n            if (node.dispatchEvent) {\n                // Gecko-style approach (now the standard) takes more work\n                let EventClass = Event;\n\n                // Different events have different event classes.\n                // If this switch statement can't map an eventName to an EventClass,\n                // the event firing is going to fail.\n                // extend this list on demand\n                switch (eventName) {\n                    case \"click\": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.\n                    case \"mousedown\":\n                    case \"mouseup\":\n                    case \"mousemove\":\n                        EventClass = this.global().MouseEvent;\n                        break;\n                    case \"keyup\":\n                    case \"keydown\":\n                    case \"keypress\":\n                        EventClass = this.global().KeyboardEvent;\n                        break;\n                    case \"focus\":\n                    case \"change\":\n                    case \"blur\":\n                    case \"select\":\n                        break;\n                    default:\n                        throw \"fireEvent: Couldn't find an event class for event '\" + eventName + \"'.\";\n                }\n\n                let event = new EventClass(eventName, finalOptions);\n                // this is added as an extra to allow internally the detection of synthetic events\n                // not used atm, but it does not hurt to have the extra info\n                (event as any).synthetic = true; // allow detection of synthetic events\n                // The second parameter says go ahead with the default action\n                node.dispatchEvent(event);\n            } else if ((<any>node).fireEvent) {\n                // IE-old school style, you can drop this if you don't need to support IE8 and lower\n                let event = doc.createEventObject();\n                event.synthetic = true; // allow detection of synthetic events\n                Stream.ofAssoc(finalOptions).each(([key, value]): void => {\n                    event[key] = value;\n                });\n                (<any>node).fireEvent(\"on\" + eventName, event);\n            }\n        })\n    }\n\n    textContent(joinString: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        textContent: \"\"\n                    };\n                }).value;\n                return (<any>item).textContent || \"\";\n            })\n            .reduce((text1, text2) => [text1,joinString,text2].join(\"\"), \"\").value;\n    }\n\n    innerText(joinString: string = \"\"): string {\n        return this.stream\n            .map((value: DomQuery) => {\n                let item = value.getAsElem(0).orElseLazy(() => {\n                    return <any>{\n                        innerText: \"\"\n                    };\n                }).value;\n                return (<any>item).innerText || \"\";\n            })\n            .reduce((text1, text2) => [text1, text2].join(joinString), \"\").value;\n\n    }\n\n    /**\n     * encodes all input elements properly into respective\n     * config entries, this can be used\n     * for legacy systems, for newer use-cases, use the\n     * HTML5 Form class which all newer browsers provide\n     *\n     * @param toMerge optional config which can be merged in\n     * @return a copy pf\n     */\n    encodeFormElement(toMerge = new Config({})): Config {\n\n        // browser behavior no element name no encoding (normal submit fails in that case)\n        // https:// issues.apache.org/jira/browse/MYFACES-2847\n        if (this.name.isAbsent()) {\n            return;\n        }\n\n        // let´s keep it side-effects free\n        let target = toMerge.shallowCopy;\n\n        this.each((element: DomQuery) => {\n            if (element.name.isAbsent()) {// no name, no encoding\n                return;\n            }\n            let name = element.name.value;\n            let tagName = element.tagName.orElse(\"__none__\").value.toLowerCase();\n            let elemType = element.type.orElse(\"__none__\").value.toLowerCase();\n\n            elemType = elemType.toLowerCase();\n\n            // routine for all elements\n            // rules:\n            // - process only input, textarea and select elements\n            // - elements must have attribute \"name\"\n            // - elements must not be disabled\n            if (((tagName == \"input\" || tagName == \"textarea\" || tagName == \"select\") &&\n                (name != null && name != \"\")) && !element.disabled) {\n\n                // routine for select elements\n                // rules:\n                // - if select-one and value-Attribute exist => \"name=value\"\n                // (also if value empty => \"name=\")\n                // - if select-one and value-Attribute don't exist =>\n                // \"name=DisplayValue\"\n                // - if select multi and multiple selected => \"name=value1&name=value2\"\n                // - if select and selectedIndex=-1 don't submit\n                if (tagName == \"select\") {\n                    // selectedIndex must be >= 0 to be submitted\n                    let selectElem: HTMLSelectElement = <HTMLSelectElement>element.getAsElem(0).value;\n                    if (selectElem.selectedIndex >= 0) {\n                        let uLen = selectElem.options.length;\n                        for (let u = 0; u < uLen; u++) {\n                            // find all selected options\n                            // let subBuf = [];\n                            if (selectElem.options[u].selected) {\n                                let elementOption = selectElem.options[u];\n                                target.append(name).value = (elementOption.getAttribute(\"value\") != null) ?\n                                    elementOption.value : elementOption.text;\n                            }\n                        }\n                    }\n                }\n\n                // routine for remaining elements\n                // rules:\n                // - don't submit no selects (processed above), buttons, reset buttons, submit buttons,\n                // - submit checkboxes and radio inputs only if checked\n                if (\n                    (\n                        tagName != ALLOWED_SUBMITTABLE_ELEMENTS.SELECT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.BUTTON &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RESET &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.SUBMIT &&\n                        elemType != ALLOWED_SUBMITTABLE_ELEMENTS.IMAGE\n                    ) && (\n                        (\n                            elemType != ALLOWED_SUBMITTABLE_ELEMENTS.CHECKBOX && elemType != ALLOWED_SUBMITTABLE_ELEMENTS.RADIO) ||\n                        element.checked\n                    )\n                ) {\n                    let uploadedFiles = (<any>element.value)?.value?.files;\n                    let filesArr: any = uploadedFiles ?? [];\n                    if (filesArr?.length) { //files can be empty but set\n                        // xhr level2, single multiple must be passes as they are\n                        target.assign(name).value = Array.from(filesArr);\n                    } else {\n                        if(!!uploadedFiles) { //we skip empty file elements i\n                            return;\n                        }\n                        //checkboxes etc.. need to be appended\n                        target.append(name).value = element.inputValue.value;\n                    }\n                }\n\n            }\n        });\n\n        return target;\n    }\n\n    get cDATAAsString(): string {\n        let TYPE_CDATA_BLOCK = 4;\n\n        let res: any = this.lazyStream.flatMap(item => {\n            return item.childNodes.stream\n        }).filter(item => {\n            return item?.value?.value?.nodeType == TYPE_CDATA_BLOCK;\n        }).reduce((reduced: Array<any>, item: DomQuery) => {\n            reduced.push((<any>item?.value?.value)?.data ?? \"\");\n            return reduced;\n        }, []).value;\n\n        // response may contain several blocks\n        return res.join(\"\");\n    }\n\n    subNodes(from: number, to?: number): DomQuery {\n        if (Optional.fromNullable(to).isAbsent()) {\n            to = this.length;\n        }\n        return new DomQuery(...this.rootNode.slice(from, Math.min(to, this.length)));\n    }\n\n\n    // because we can stream from an array stream directly into the dom query\n    _limits = -1;\n\n    limits(end: number): IStream<DomQuery> {\n        this._limits = end;\n        return <any>this;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext() {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.values.length - 1;\n        return !(isLimitsReached ||\n            isEndOfArray);\n    }\n\n    next(): DomQuery {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    lookAhead(cnt = 1): ITERATION_STATUS | DomQuery {\n        if ((this.values.length - 1) < (this.pos + cnt)) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return new DomQuery(this.values[this.pos + cnt]);\n    }\n\n\n    current(): DomQuery | ITERATION_STATUS {\n        if (this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        return new DomQuery(this.values[this.pos]);\n    }\n\n\n    reset() {\n        this.pos = -1;\n    }\n\n    attachShadow(params: { [key: string]: string } = {mode: \"open\"}): DomQuery {\n        let shadowRoots: DomQuery[] = [];\n        this.eachElem((item: Element) => {\n            let shadowElement: DomQuery;\n            if ((<any>item)?.attachShadow) {\n                shadowElement = DomQuery.byId((<any>item).attachShadow(params));\n                shadowRoots.push(shadowElement);\n            } else {\n                throw new Error(\"Shadow dom creation not supported by the browser, please use a shim, to gain this functionality\");\n            }\n        });\n        return new DomQuery(...shadowRoots);\n    }\n\n    /**\n     * helper to fix a common dom problem\n     * we have to wait until a certain condition is met, in most of the cases we just want to know whether an element is present in the sub dom-tree before being able to proceed\n     * @param condition\n     * @param options\n     */\n    async waitUntilDom(condition: (element: DomQuery) => boolean, options: WAIT_OPTS = {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        timeout: 500,\n        interval: 100\n    }): Promise<DomQuery> {\n        return waitUntilDom(this, condition, options);\n    }\n\n    /**\n     * returns the embedded shadow elements\n     */\n    get shadowElements(): DomQuery {\n        let shadowElements = this.querySelectorAll(\"*\")\n            .filter(item => item.hasShadow);\n\n\n        let mapped: Array<ShadowRoot> = (shadowElements.allElems() || []).map(element => element.shadowRoot);\n        return new DomQuery(...mapped);\n    }\n\n    get shadowRoot(): DomQuery {\n        let shadowRoots = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                shadowRoots.push(this.rootNode[cnt].shadowRoot);\n            }\n        }\n        return new DomQuery(...shadowRoots);\n    }\n\n    get hasShadow(): boolean {\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (this.rootNode[cnt].shadowRoot) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // from\n    // http:// blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n    static getCaretPosition(ctrl: any) {\n        let caretPos = 0;\n\n        try {\n            if ((<any>document)?.selection) {\n                ctrl.focus();\n                let selection = (<any>document).selection.createRange();\n                // the selection now is start zero\n                selection.moveStart('character', -ctrl.value.length);\n                // the caret-position is the selection start\n                caretPos = selection.text.length;\n            }\n        } catch (e) {\n            // now this is ugly, but not supported input types throw errors for selectionStart\n            // just in case someone dumps this code onto unsupported browsers\n        }\n        return caretPos;\n    }\n\n    /**\n     * sets the caret position\n     *\n     * @param ctrl the control to set the caret position to\n     * @param pos the position to set\n     *\n     * note if the control does not have any selectable and focusable behavior\n     * calling this method does nothing (silent fail)\n     *\n     */\n    static setCaretPosition(ctrl: any, pos: number) {\n        ctrl?.focus ? ctrl?.focus() : null;\n        // the selection range is our caret position\n\n        ctrl?.setSelectiongRange ? ctrl?.setSelectiongRange(pos, pos) : null;\n    }\n\n    /**\n     * Implementation of an iterator\n     * to allow loops over dom query collections\n     */\n    [Symbol.iterator](): Iterator<DomQuery, any, undefined> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <DomQuery>val\n                }\n            }\n        }\n    }\n\n    /**\n     * Concatenates the elements of two Dom Queries into a single one\n     * @param toAttach the elements to attach\n     * @param filterDoubles filter out possible double elements (aka same markup)\n     */\n    concat(toAttach: DomQuery, filterDoubles = true): any {\n        const ret = this.lazyStream.concat(toAttach.lazyStream).collect(new DomQueryCollector());\n        // we now filter the doubles out\n        if (!filterDoubles) {\n            return ret;\n        }\n        let idx = {}; // ie11 does not support sets, we have to fake it\n        return ret.lazyStream.filter(node => {\n            const notFound = !(idx?.[node.value.value.outerHTML as any]);\n            idx[node.value.value.outerHTML as any] = true;\n            return notFound;\n        }).collect(new DomQueryCollector());\n    }\n\n    append(elem: DomQuery): DomQuery {\n        this.each(item => elem.appendTo(item));\n        return this;\n    }\n\n    prependTo(elem: DomQuery): DomQuery {\n        elem.eachElem(item => {\n            item.prepend(...this.allElems());\n        });\n        return this;\n    }\n\n    prepend(elem: DomQuery): DomQuery {\n        this.eachElem(item => {\n            item.prepend(...elem.allElems());\n        })\n        return this;\n    }\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _querySelectorAll(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.querySelectorAll) {\n                continue;\n            }\n            let res = this.rootNode[cnt].querySelectorAll(selector);\n            nodes = nodes.concat(objToArray(res));\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _querySelectorAllDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.querySelectorAll(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n\n    /**\n     * query selector all on the existing dom queryX object\n     *\n     * @param selector the standard selector\n     * @return a DomQuery with the results\n     */\n    private _closest(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n        let nodes = [];\n        for (let cnt = 0; cnt < this.rootNode.length; cnt++) {\n            if (!this.rootNode[cnt]?.closest) {\n                continue;\n            }\n            let res = [this.rootNode[cnt].closest(selector)];\n            nodes = nodes.concat(...res);\n        }\n\n        return new DomQuery(...nodes);\n    }\n\n    /*deep with a selector and a pseudo /shadow/ marker to break into the next level*/\n    private _closestDeep(selector): DomQuery {\n        if (!this?.rootNode?.length) {\n            return this;\n        }\n\n        let foundNodes: DomQuery = new DomQuery(...this.rootNode);\n        let selectors = selector.split(/\\/shadow\\//);\n\n        for (let cnt2 = 0; cnt2 < selectors.length; cnt2++) {\n            if (selectors[cnt2] == \"\") {\n                continue;\n            }\n            let levelSelector = selectors[cnt2];\n            foundNodes = foundNodes.closest(levelSelector);\n            if (cnt2 < selectors.length - 1) {\n                foundNodes = foundNodes.shadowRoot;\n            }\n        }\n\n        return foundNodes;\n    }\n\n    // source: https:// developer.mozilla.org/en-US/docs/Web/API/Element/matches\n    // code snippet license: https:// creativecommons.org/licenses/by-sa/2.5/\n    /**\n     * matches selector call in a browser independent manner\n     *\n     * @param toMatch\n     * @param selector\n     * @private\n     */\n    private _mozMatchesSelector(toMatch: Element, selector: string): boolean {\n        let prototypeOwner: { [key: string]: Function } = (<any>toMatch);\n        let matchesSelector: Function = prototypeOwner.matches ||\n            prototypeOwner.matchesSelector ||\n            prototypeOwner.mozMatchesSelector ||\n            prototypeOwner.msMatchesSelector ||\n            prototypeOwner.oMatchesSelector ||\n            prototypeOwner.webkitMatchesSelector ||\n            function (s: string) {\n                let matches: NodeListOf<HTMLElement> = (document || ownerDocument).querySelectorAll(s),\n                    i = matches.length;\n                while (--i >= 0 && matches.item(i) !== toMatch) {\n                }\n                return i > -1;\n            };\n        return matchesSelector.call(toMatch, selector);\n    }\n\n    /**\n     * sticky non-sticky unified code of the load script eval\n     * implementation if programmatic &gt;script src=\"... loading\n     *\n     * @param sticky if set to true a head element is left in the dom tree after the script has loaded\n     *\n     * @param src the sec to load\n     * @param delay delay the script loading x ms (default immediately === 0)\n     * @param nonce optional nonce token to be passed into the script tag\n     * @private\n     */\n    private _loadScriptEval(sticky: boolean, src: string, delay: number = 0, nonce ?: string) {\n        let srcNode = this.createSourceNode(src, nonce);\n        let nonceCheck = this.createSourceNode(null, nonce);\n        let marker = `nonce_${Date.now()}_${Math.random()}`;\n        nonceCheck.innerHTML = `document.head[\"${marker}\"] = true` // noop\n\n        let head = document.head;\n        //  upfront nonce check, needed mostly for testing\n        //  but cannot hurt to block src calls which have invalid nonce on localhost\n        // the reason for doing this up until now we have a similar construct automatically\n        // by loading the scripts via xhr and then embedding them.\n        // this is not needed anymore but the nonce is more relaxed with script src\n        // we now enforce it the old way\n\n        head.appendChild(nonceCheck);\n        head.removeChild(nonceCheck);\n        if(!head[marker]) {\n            return;\n        }\n        try {\n            if (!delay) {\n                head.appendChild(srcNode);\n                if(!sticky) {\n                    head.removeChild(srcNode);\n                }\n            } else {\n                setTimeout(() => {\n                    head.appendChild(srcNode);\n                    if(!sticky) {\n                        head.removeChild(srcNode);\n                    }\n                }, delay);\n            }\n        } finally {\n            delete head[marker];\n        }\n\n        return this;\n    }\n\n    /**\n     * resolves an attribute holder compared\n     * @param attrName the attribute name\n     */\n    private resolveAttributeHolder(attrName: string = \"value\"): HTMLFormElement | any {\n        let ret = [];\n        ret[attrName] = null;\n        return (attrName in this.getAsElem(0).value) ?\n            this.getAsElem(0).value :\n            ret;\n    }\n\n    private createSourceNode(src: string | null, nonce?: string) {\n        let srcNode: HTMLScriptElement = document.createElement(\"script\");\n        srcNode.type = \"text/javascript\";\n        if (!!nonce) {\n            if ('undefined' != typeof srcNode?.nonce) {\n                srcNode.nonce = nonce;\n            } else {\n                srcNode.setAttribute(\"nonce\", nonce);\n            }\n        }\n        if(!!src) {\n            srcNode.src = src;\n        }\n\n        return srcNode;\n    }\n\n    private applyNonce(nonce: string, script: HTMLScriptElement) {\n        if (nonce) {\n            if ('undefined' != typeof script?.nonce) {\n                script.nonce = nonce;\n            } else {\n                script.setAttribute(\"nonce\", nonce);\n            }\n        }\n    }\n\n}\n\n\n/**\n * Various collectors\n * which can be used in conjunction with Streams\n */\n\n/**\n * A collector which bundles a full dom query stream into a single dom query element\n *\n * This connects basically our stream back into DomQuery\n */\nexport class DomQueryCollector implements ICollector<DomQuery, DomQuery> {\n\n    data: DomQuery[] = [];\n\n    collect(element: DomQuery) {\n        this.data.push(element);\n    }\n\n    get finalValue(): DomQuery {\n        return new DomQuery(...this.data);\n    }\n}\n\n/**\n * abbreviation for DomQuery\n */\nexport const DQ = DomQuery;\nexport type DQ = DomQuery;\n// noinspection JSUnusedGlobalSymbols\n/**\n * replacement for the jquery $\n */\nexport const DQ$ = DomQuery.querySelectorAll;\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/**\n * various environments handle the global variable different\n * we have to deal with this.\n */\nexport function _global$(): any | null {\n    let _global$: any =  ('undefined' != typeof globalThis && globalThis.window) ? globalThis.window:\n        ('undefined' != typeof window) ? window :\n            ('undefined' != typeof globalThis) ? globalThis :\n                ('undefined' != typeof global && global?.window) ? global.window :\n                    ('undefined' != typeof global) ? global : null;\n    //under test systems we often have a lazy init of the window object under global.window, but we\n    //want the window object\n    return _global$?.window ?? _global$;\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Optional} from \"./Monad\";\n\n/**\n * Lang helpers crossported from the apache myfaces project\n */\nexport module Lang {\n    \n\n    //should be in lang, but for now here to avoid recursive imports, not sure if typescript still has a problem with those\n    /**\n     * helper function to savely resolve anything\n     * this is not an elvis operator, it resolves\n     * a value without exception in a tree and if\n     * it is not resolvable then an optional of\n     * a default value is restored or Optional.empty\n     * if none is given\n     *\n     * usage\n     * <code>\n     *     let var: Optiona<string> = saveResolve(() => a.b.c.d.e, \"foobaz\")\n     * </code>\n     *\n     * @param resolverProducer a lambda which can produce the value\n     * @param defaultValue an optional default value if the producer failes to produce anything\n     * @returns an Optional of the produced value\n     */\n    export function saveResolve<T>(resolverProducer: () => T, defaultValue: T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue);\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    export function saveResolveLazy<T>(resolverProducer: () => T, defaultValue: () => T = null): Optional<T> {\n        try {\n            let result = resolverProducer();\n            return Optional.fromNullable(result ?? defaultValue());\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n    /**\n     * String to array function performs a string to array transformation\n     * @param {String} it the string which has to be changed into an array\n     * @param {RegExp} splitter our splitter reglar expression\n     * @return a trimmed array of the splitted string\n     */\n    export function strToArray(it: string, splitter: string | RegExp = /\\./gi): Array<string> {\n\n        let ret = [];\n        it.split(splitter).forEach((element => {\n            ret.push(trim(element));\n        }));\n        return ret;\n    }\n\n    /**\n     * hyperfast trim\n     * http://blog.stevenlevithan.com/archives/faster-trim-javascript\n     * crossported from dojo\n     */\n    export function trim(str: string): string {\n        str = str.replace(/^\\s\\s*/, '');\n        let ws = /\\s/, i = str.length;\n\n        while (ws.test(str.charAt(--i))) {\n            //do nothing\n        }\n        return str.slice(0, i + 1);\n    }\n\n    /**\n     * generic object arrays like dom definitions to array conversion method which\n     * transforms any object to something array like\n     * @param obj\n     * @param offset\n     * @param pack\n     * @returns an array converted from the object\n     */\n    export function objToArray<T>(obj: any, offset: number = 0, pack: Array<T> = []): Array<T> {\n        if ((obj ?? \"__undefined__\") == \"__undefined__\") {\n            return pack ?? null;\n        }\n        //since offset is numeric we cannot use the shortcut due to 0 being false\n        //special condition array delivered no offset no pack\n        if ((<any>obj) instanceof Array && !offset && !pack) return obj;\n\n        return pack.concat(Array.prototype.slice.call(obj, offset));\n    }\n\n    /**\n     * equalsIgnoreCase, case insensitive comparison of two strings\n     *\n     * @param source\n     * @param destination\n     */\n    export function equalsIgnoreCase(source?: string, destination?: string): boolean {\n        let finalSource = source ?? \"___no_value__\";\n        let finalDest = destination ?? \"___no_value__\";\n\n        //in any other case we do a strong string comparison\n        return finalSource.toLowerCase() === finalDest.toLowerCase();\n    }\n\n\n    /**\n     * runtime type assertion\n     *\n     * @param probe the probe to be tested for a type\n     * @param theType the type to be tested for\n     */\n    export function assertType(probe: any, theType: any): boolean {\n        return isString(theType) ? typeof probe == theType : probe instanceof theType;\n    }\n\n    /**\n     * Backported from dojo\n     * a failsafe string determination method\n     * (since in javascript String != \"\" typeof alone fails!)\n     * @param it {|Object|} the object to be checked for being a string\n     * @return true in case of being a string false otherwise\n     */\n    export function isString(it?: any): boolean {\n        //\tsummary:\n        //\t\tReturn true if it is a String\n        return !!arguments.length && it != null && (typeof it == \"string\" || it instanceof String); // Boolean\n    }\n\n    export function isFunc(it: any): boolean {\n        return it instanceof Function || typeof it === \"function\";\n    }\n\n    // code from https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    // license https://creativecommons.org/licenses/by-sa/2.5/\n    export function objAssign(target: any, ...theArgs: any) { // .length of function is 2\n        if (target == null) { // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        let to = Object(target);\n        if((<any>Object).assign) {\n            theArgs.forEach(item => (<any>Object).assign(to, item));\n            return to;\n        }\n\n        theArgs.filter(item => item != null).forEach(item => {\n            let nextSource = item;\n            Object.keys(nextSource)\n                .filter(nextKey => Object.prototype.hasOwnProperty.call(nextSource, nextKey))\n                .forEach(nextKey => to[nextKey] = nextSource[nextKey]);\n        });\n        return to;\n    }\n\n\n}\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A module which keeps  basic monadish like definitions in place without any sidedependencies to other modules.\n * Useful if you need the functions in another library to keep its dependencies down\n */\n\n/*IMonad definitions*/\n\nimport {Lang} from \"./Lang\";\nimport {ArrayCollector, AssocArrayCollector} from \"./SourcesCollectors\";\nimport {Stream} from \"./Stream\";\nimport objAssign = Lang.objAssign;\n\n\n/**\n * IFunctor interface,\n * defines an interface which allows to map a functor\n * via a first order function to another functor\n */\nexport interface IFunctor<T> {\n    map<R>(fn: (data: T) => R): IFunctor<R>;\n}\n\n/**\n * IMonad definition, basically a functor with a flaptmap implementation (flatmap reduces all nested monads after a\n * function call f into a monad with the nesting level of 1\n *\n * flatmap flats nested Monads into a IMonad of the deepest nested implementation\n */\nexport interface IMonad<T, M extends IMonad<any, any>> extends IFunctor<T> {\n    flatMap<T, M>(f: (T) => M): IMonad<any, any>;\n}\n\n/**\n * a stateful functor which holds a value upn which a\n * function can be applied\n *\n * as value holder of type T\n */\nexport interface IIdentity<T> extends IFunctor<T> {\n    readonly value: T;\n}\n\n/**\n *  custom value holder definition, since we are not pure functional\n *  but iterative we have structures which allow the assignment of a value\n *  also not all structures are sideffect free\n */\nexport interface IValueHolder<T> {\n    value: T | Array<T>;\n}\n\n/**\n * Implementation of a monad\n * (Sideffect free), no write allowed directly on the monads\n * value state\n */\nexport class Monad<T> implements IMonad<T, Monad<any>>, IValueHolder<T> {\n    constructor(value: T) {\n        this._value = value;\n    }\n\n    protected _value: T;\n\n    get value(): T {\n        return this._value;\n    }\n\n    map<R>(fn?: (data: T) => R): Monad<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let result: R = fn(this.value);\n        return new Monad(result);\n    }\n\n    flatMap<R>(fn?: (data: T) => R): Monad<any> {\n        let mapped: Monad<any> = this.map(fn);\n        while (mapped?.value instanceof Monad) {\n            mapped = mapped.value\n        }\n        return mapped;\n    }\n\n}\n\n/**\n * optional implementation, an optional is basically an implementation of a Monad with additional syntactic\n * sugar on top\n * (Sideeffect free, since value assignment is not allowed)\n * */\nexport class Optional<T> extends Monad<T> {\n\n    /*default value for absent*/\n    static absent = Optional.fromNullable(null);\n\n    constructor(value: T) {\n        super(value);\n    }\n\n    get value(): T {\n        if (this._value instanceof Monad) {\n            return this._value.flatMap().value\n        }\n        return this._value;\n    }\n\n    static fromNullable<V extends Optional<T>, T>(value?: T): Optional<T> {\n        return <V> new Optional(value);\n    }\n\n    /*syntactic sugar for absent and present checks*/\n    isAbsent(): boolean {\n        return \"undefined\" == typeof this.value || null == this.value;\n    }\n\n    /**\n     * any value present\n     */\n    isPresent(presentRunnable ?: (val ?: Monad<T>) => void): boolean {\n        let absent = this.isAbsent();\n        if (!absent && presentRunnable) {\n            presentRunnable.call(this, this)\n        }\n        return !absent;\n    }\n\n    ifPresentLazy(presentRunnable: (val ?: Monad<T>) => void = () => {\n    }): Monad<T> {\n        this.isPresent.call(this, presentRunnable);\n        return this;\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            //shortcut\n            if (elseValue == null) {\n                return Optional.absent;\n            }\n            return this.flatMap(() => elseValue);\n        }\n    }\n\n    /**\n     * lazy, passes a function which then is lazily evaluated\n     * instead of a direct value\n     * @param func\n     */\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            return this.flatMap(func);\n        }\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n    flatMap<R>(fn?: (data: T) => R): Optional<any> {\n        let val = super.flatMap(fn);\n        if (!(val instanceof Optional)) {\n            return Optional.fromNullable(val.value);\n        }\n\n        return <Optional<any>>val.flatMap();\n    }\n\n    /*\n     * elvis operation, take care, if you use this you lose typesafety and refactoring\n     * capabilites, unfortunately typesceript does not allow to have its own elvis operator\n     * this is some syntactic sugar however which is quite useful*/\n    getIf<R>(...key: string[]): Optional<R> {\n\n        key = this.preprocessKeys(...key);\n\n        let currentPos: Optional<any> = this;\n        for (let cnt = 0; cnt < key.length; cnt++) {\n            let currKey = this.keyVal(key[cnt]);\n            let arrPos = this.arrayIndex(key[cnt]);\n\n            if (currKey === \"\" && arrPos >= 0) {\n                currentPos = this.getClass().fromNullable(!(currentPos.value instanceof Array) ? null : (currentPos.value.length < arrPos ? null : currentPos.value[arrPos]));\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n            } else if (currKey && arrPos >= 0) {\n                if (currentPos.getIfPresent(currKey).isAbsent()) {\n                    return currentPos;\n                }\n                currentPos = (currentPos.getIfPresent(currKey).value instanceof Array) ? this.getClass().fromNullable(currentPos.getIfPresent(currKey).value[arrPos]) : this.getClass().absent;\n                if (currentPos.isAbsent()) {\n                    return currentPos;\n                }\n                continue;\n\n            } else {\n                currentPos = currentPos.getIfPresent(currKey);\n            }\n            if (currentPos.isAbsent()) {\n                return currentPos;\n            } else if (arrPos > -1) {\n                currentPos = this.getClass().fromNullable(currentPos.value[arrPos]);\n            }\n        }\n        let retVal = currentPos;\n\n        return retVal;\n    }\n\n    /**\n     * simple match, if the first order function call returns\n     * true then there is a match, if the value is not present\n     * it never matches\n     *\n     * @param fn the first order function performing the match\n     */\n    match(fn: (item: T) => boolean): boolean {\n        if (this.isAbsent()) {\n            return false\n        }\n        return fn(this.value);\n    }\n\n    /**\n     * convenience function to flatmap the internal value\n     * and replace it with a default in case of being absent\n     *\n     * @param defaultVal\n     * @returns {Optional<any>}\n     */\n    get<R>(defaultVal: any = Optional.absent): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().fromNullable(defaultVal).flatMap();\n        }\n\n        return this.getClass().fromNullable(this.value).flatMap();\n    }\n\n    toJson(): string {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return Optional;\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected arrayIndex(key: string): number {\n        let start = key.indexOf(\"[\");\n        let end = key.indexOf(\"]\");\n        if (start >= 0 && end > 0 && start < end) {\n            return parseInt(key.substring(start + 1, end));\n        } else {\n            return -1;\n        }\n    }\n\n    /*helper method for getIf with array access aka <name>[<indexPos>]*/\n    protected keyVal(key: string): string {\n        let start = key.indexOf(\"[\");\n\n        if (start >= 0) {\n            return key.substring(0, start);\n        } else {\n            return key;\n        }\n    }\n\n    /**\n     * additional syntactic sugar which is not part of the usual optional implementation\n     * but makes life easier, if you want to sacrifice typesafety and refactoring\n     * capabilities in typescript\n     */\n    getIfPresent<R>(key: string): Optional<R> {\n        if (this.isAbsent()) {\n            return this.getClass().absent;\n        }\n        return this.getClass().fromNullable(this.value[key]).flatMap();\n    }\n\n    /**\n     * elvis like typesafe functional save resolver\n     * a typesafe option for getIfPresent\n     *\n     * usage myOptional.resolve(value => value.subAttr.subAttr2).orElseLazy(....)\n     * if this is resolvable without any errors an Optional with the value is returned\n     * if not, then an Optional absent is returned, also if you return Optional absent\n     * it is flatmapped into absent\n     *\n     * @param resolver the resolver function, can throw any arbitrary errors, int  the error case\n     * the resolution goes towards absent\n     */\n    resolve<V>(resolver: (item: T) => V): Optional<V> {\n        if (this.isAbsent()) {\n            return Optional.absent;\n        }\n        try {\n            return Optional.fromNullable(resolver(this.value))\n        } catch (e) {\n            return Optional.absent;\n        }\n    }\n\n\n    protected preprocessKeys(...keys): string[] {\n        return Stream.of(...keys)\n            .flatMap(item => {\n                return Stream.of(...item.split(/\\]\\s*\\[/gi))\n                    .map(item => {\n                        item = item.replace(/^\\s+|\\s+$/g, \"\");\n                        if(item.indexOf(\"[\") == -1 && item.indexOf(\"]\") != -1) {\n                            item = \"[\" + item;\n                        }\n                        if(item.indexOf(\"]\") == -1 && item.indexOf(\"[\") != -1) {\n                            item = item + \"]\";\n                        }\n                        return item;\n                    })\n            })\n\n            .collect(new ArrayCollector());\n    }\n}\n\n// --------------------- From here onwards we break out the sideffects free limits ------------\n\n/**\n * ValueEmbedder is the writeable version\n * of optional, it basically is a wrappber\n * around a construct which has a state\n * and can be written to.\n *\n * For the readonly version see Optional\n */\nexport class ValueEmbedder<T> extends Optional<T> implements IValueHolder<T> {\n\n    /*default value for absent*/\n    static absent = ValueEmbedder.fromNullable(null);\n\n    protected key: string;\n\n    constructor(rootElem: any, valueKey: string = \"value\") {\n        super(rootElem);\n\n        this.key = valueKey;\n    }\n\n    get value(): T {\n        return this._value ? <T>this._value[this.key] : null;\n    }\n\n    set value(newVal: T) {\n        if (!this._value) {\n            return;\n        }\n        this._value[this.key] = newVal\n    }\n\n    orElse(elseValue: any): Optional<any> {\n        let alternative = {};\n        alternative[this.key] = elseValue;\n        return this.isPresent() ? this : new ValueEmbedder(alternative, this.key);\n    }\n\n    orElseLazy(func: () => any): Optional<any> {\n        if (this.isPresent()) {\n            return this;\n        } else {\n            let alternative = {};\n            alternative[this.key] = func();\n            return new ValueEmbedder(alternative, this.key);\n        }\n    }\n\n    /**\n     * helper to override several implementations in a more fluent way\n     * by having a getClass operation we can avoid direct calls into the constructor or\n     * static methods and do not have to implement several methods which rely on the type\n     * of \"this\"\n     * @returns {Monadish.Optional}\n     */\n    protected getClass(): any {\n        return ValueEmbedder;\n    }\n\n    static fromNullable<V extends Optional<T>,T>(value?: any, valueKey: string = \"value\"): V {\n        return <any> new ValueEmbedder<T>(value, valueKey);\n    }\n\n}\n\n/**\n * specialized value embedder\n * for our Configuration\n */\nclass ConfigEntry<T> extends ValueEmbedder<T> {\n\n    /*default value for absent*/\n    static absent = ConfigEntry.fromNullable(null);\n\n    /**\n     * arrayed value positions\n     */\n    arrPos: number;\n\n    constructor(rootElem: any, key: any, arrPos?: number) {\n        super(rootElem, key);\n\n        this.arrPos = arrPos ?? -1;\n    }\n\n    get value() {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            return this._value[this.arrPos];\n        } else if (this.key && this.arrPos >= 0) {\n            return this._value[this.key][this.arrPos];\n        }\n        return this._value[this.key];\n    }\n\n    set value(val: T) {\n        if (this.key == \"\" && this.arrPos >= 0) {\n            this._value[this.arrPos] = val;\n            return;\n        } else if (this.key && this.arrPos >= 0) {\n            this._value[this.key][this.arrPos] = val;\n            return;\n        }\n        this._value[this.key] = val;\n    }\n}\n\n\nexport const CONFIG_VALUE = \"__END_POINT__\";\nexport const CONFIG_ANY = \"__ANY_POINT__\";\nconst ALL_VALUES = \"*\";\n\n\n\nexport type ConfigDef = {[key: string]: any};\n\n\n/**\n * Config, basically an optional wrapper for a json structure\n * (not sideeffect free, since we can alter the internal config state\n * without generating a new config), not sure if we should make it sideffect free\n * since this would swallow a lot of performane and ram\n */\nexport class Config extends Optional<any> {\n    constructor(root: any, private configDef ?: ConfigDef) {\n        super(root);\n    }\n\n    /**\n     * shallow copy getter, copies only the first level, references the deeper nodes\n     * in a shared manner\n     */\n    get shallowCopy(): Config {\n        return this.shallowCopy$();\n    }\n\n    protected shallowCopy$(): Config {\n        return new Config(Stream.ofAssoc(this.value).collect(new AssocArrayCollector()));\n    }\n\n    /**\n     * deep copy, copies all config nodes\n     */\n    get deepCopy(): Config {\n        return this.deepCopy$();\n    }\n\n    protected deepCopy$(): Config {\n        return new Config(objAssign({}, this.value));\n    }\n\n    /**\n     * creates a config from an initial value or null\n     * @param value\n     */\n    static fromNullable<T>(value?: T | null): Config {\n        return new Config(value);\n    }\n\n    /**\n     * simple merge for the root configs\n     */\n    shallowMerge(other: Config, overwrite = true, withAppend = false) {\n        for (let key in other.value) {\n            if('undefined' == typeof key || null == key) {\n                continue;\n            }\n            if (overwrite || !(key in this.value)) {\n                if (!withAppend) {\n                    this.assign(key).value = other.getIf(key).value;\n                } else {\n                    if (Array.isArray(other.getIf(key).value)) {\n                        Stream.of(...other.getIf(key).value).each(item => this.append(key).value = item);\n                    } else {\n                        this.append(key).value = other.getIf(key).value;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * assigns a single value as array, or appends it\n     * to an existing value mapping a single value to array\n     *\n     *\n     * usage myConfig.append(\"foobaz\").value = \"newValue\"\n     *       myConfig.append(\"foobaz\").value = \"newValue2\"\n     *\n     * resulting in myConfig.foobaz == [\"newValue, newValue2\"]\n     *\n     * @param {string[]} accessPath\n     */\n    append(...accessPath: string[]): IValueHolder<any> {\n        let noKeys = accessPath.length < 1;\n        if (noKeys) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        let lastKey = accessPath[accessPath.length - 1];\n        let currKey, finalKey = this.keyVal(lastKey);\n\n        let pathExists = this.getIf(...accessPath).isPresent();\n        this.buildPath(...accessPath);\n\n        let finalKeyArrPos = this.arrayIndex(lastKey);\n        if (finalKeyArrPos > -1) {\n            throw Error(\"Append only possible on non array properties, use assign on indexed data\");\n        }\n        let value = <any>this.getIf(...accessPath).value;\n        if (!Array.isArray(value)) {\n            value = this.assign(...accessPath).value = [value];\n        }\n        if (pathExists) {\n            value.push({});\n        }\n        finalKeyArrPos = value.length - 1;\n\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            lastKey, finalKeyArrPos\n        );\n\n        return retVal;\n    }\n\n    /**\n     * appends to an existing entry (or extends into an array and appends)\n     * if the condition is met\n     * @param {boolean} condition\n     * @param {string[]} accessPath\n     */\n    appendIf(condition: boolean, ...accessPath: string[]): IValueHolder<any> {\n        if (!condition) {\n            return {value: null};\n        }\n        return this.append(...accessPath);\n    }\n\n    /**\n     * assings an new value on the given access path\n     * @param accessPath\n     */\n    assign(...accessPath): IValueHolder<any> {\n        if (accessPath.length < 1) {\n            return;\n        }\n        this.assertAccessPath(...accessPath);\n\n        this.buildPath(...accessPath);\n\n        let currKey = this.keyVal(accessPath[accessPath.length - 1]);\n        let arrPos = this.arrayIndex(accessPath[accessPath.length - 1]);\n        let retVal = new ConfigEntry(accessPath.length == 1 ? this.value : this.getIf.apply(this, accessPath.slice(0, accessPath.length - 1)).value,\n            currKey, arrPos\n        );\n\n        return retVal;\n    }\n\n\n    /**\n     * assign a value if the condition is set to true, otherwise skip it\n     *\n     * @param condition the condition, the access accessPath into the config\n     * @param accessPath\n     */\n    assignIf(condition: boolean, ...accessPath: Array<any>): IValueHolder<any> {\n        return condition ? this.assign(...accessPath) : {value: null};\n    }\n\n    /**\n     * get if the access path is present (get is reserved as getter with a default, on the current path)\n     * TODO will be renamed to something more meaningful and deprecated, the name is ambigous\n     * @param accessPath the access path\n     */\n    getIf(...accessPath: Array<string>): Config {\n        this.assertAccessPath(...accessPath);\n        return this.getClass().fromNullable(super.getIf.apply(this, accessPath).value);\n    }\n\n\n\n    /**\n     * gets the current node and if none is present returns a config with a default value\n     * @param defaultVal\n     */\n    get(defaultVal: any): Config {\n        return this.getClass().fromNullable(super.get(defaultVal).value);\n    }\n\n    //empties the current config entry\n    delete(key: string): Config {\n        if (key in this.value) {\n            delete this.value[key];\n        }\n        return this;\n    }\n\n    /**\n     * converts the entire config into a json object\n     */\n    toJson(): any {\n        return JSON.stringify(this.value);\n    }\n\n    /**\n     * returns the first config level as streeam\n     */\n    get stream(): Stream<[string, any]> {\n        return Stream.of(... Object.keys(this.value)).map(key => [key, this.value[key]]);\n    }\n    \n    protected getClass(): any {\n        return Config;\n    }\n\n    private setVal(val: any) {\n        this._value = val;\n    }\n\n\n    /**\n     * asserts the access path for a semy typed access\n      * @param accessPath\n     * @private\n     */\n    private assertAccessPath(...accessPath: Array<string>) {\n        accessPath = this.preprocessKeys(...accessPath);\n        if(!this.configDef) {\n            //untyped\n            return;\n        }\n\n        let currAccessPos = null;\n\n        const ERR_ACCESS_PATH = \"Access Path to config invalid\";\n        const ABSENT = \"__ABSENT__\";\n        currAccessPos = this.configDef;\n\n\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            //key index\n            if(this.isArray(arrPos)) {\n                if(currKey != \"\") {\n                    currAccessPos = (Array.isArray(currAccessPos)) ?\n                        Stream.of(...currAccessPos)\n                            .filter(item => !!(item?.[currKey] ?? false))\n                            .map(item => item?.[currKey]).first() :\n                        Optional.fromNullable(currAccessPos?.[currKey] ?? null);\n                } else {\n                    currAccessPos = (Array.isArray(currAccessPos)) ?\n                        Stream.of(...currAccessPos)\n                            .filter(item => Array.isArray(item))\n                            .flatMap(item => Stream.of(...item)).first() : Optional.absent;\n                }\n                //we noe store either the current array or the filtered look ahead to go further\n            } else {\n                //we now have an array and go further with a singular key\n                currAccessPos = (Array.isArray(currAccessPos)) ? Stream.of(...currAccessPos)\n                        .filter(item => !! (item?.[currKey] ?? false))\n                        .map(item => item?.[currKey])\n                        .first():\n                Optional.fromNullable(currAccessPos?.[currKey] ?? null);\n            }\n            if(!currAccessPos.isPresent()) {\n                throw Error(ERR_ACCESS_PATH)\n            }\n            currAccessPos = currAccessPos.value;\n\n            //no further testing needed, from this point onwards we are on our own\n            if(currAccessPos == CONFIG_ANY) {\n                return;\n            }\n        }\n\n    }\n\n\n    /**\n     * builds the config path\n     *\n     * @param accessPath a sequential array of accessPath containing either a key name or an array reference name[<index>]\n     */\n    private buildPath(...accessPath: string[]): Config {\n        accessPath = this.preprocessKeys(...accessPath);\n        let val = this;\n        let parentVal = this.getClass().fromNullable(null);\n        let parentPos = -1;\n        let alloc = function (arr: Array<any>, length: number) {\n            let length1 = arr.length;\n            let length2 = length1 + length;\n            for (let cnt = length1; cnt < length2; cnt++) {\n                arr.push({});\n            }\n        };\n\n        for (let cnt = 0; cnt < accessPath.length; cnt++) {\n            let currKey = this.keyVal(accessPath[cnt]);\n            let arrPos = this.arrayIndex(accessPath[cnt]);\n\n            if (this.isArrayPos(currKey, arrPos)) {\n\n                val.setVal((val.value instanceof Array) ? val.value : []);\n                alloc(val.value, arrPos + 1);\n                if (parentPos >= 0) {\n                    parentVal.value[parentPos] = val.value;\n                }\n                parentVal = val;\n                parentPos = arrPos;\n                val = this.getClass().fromNullable(val.value[arrPos]);\n                continue;\n            }\n\n            let tempVal = <Config>val.getIf(currKey);\n            if (this.isNoArray(arrPos)) {\n                if (tempVal.isAbsent()) {\n                    tempVal = <Config>this.getClass().fromNullable(val.value[currKey] = {});\n                } else {\n                    val = <any>tempVal;\n                }\n            } else {\n                let arr = (tempVal.value instanceof Array) ? tempVal.value : [];\n                alloc(arr, arrPos + 1);\n                val.value[currKey] = arr;\n                tempVal = this.getClass().fromNullable(arr[arrPos]);\n            }\n            parentVal = val;\n            parentPos = arrPos;\n            val = <any>tempVal;\n        }\n\n        return this;\n    }\n\n    private isNoArray(arrPos: number) {\n        return arrPos == -1;\n    }\n\n    private isArray(arrPos: number) {\n        return !this.isNoArray(arrPos);\n    }\n\n    private isArrayPos(currKey: string, arrPos: number) {\n            return currKey === \"\" && arrPos >= 0;\n    }\n\n}\n\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Stream, StreamMapper} from \"./Stream\";\nimport {DomQuery} from \"./DomQuery\";\n\nimport {Config} from \"./Monad\";\n\n/**\n * special status of the datasource location pointer\n * if an access, outside of the possible data boundaries is happening\n * (example for instance current without a first next call, or next\n * which goes over the last possible dataset), an iteration status return\n * value is returned marking this boundary instead of a classical element\n *\n * Note this is only internally used but must be implemented to fullfill\n * internal contracts, the end user will never see those values if he uses\n * streams!\n */\nexport enum ITERATION_STATUS {\n    EO_STRM = '__EO_STRM__',\n    BEF_STRM = '___BEF_STRM__',\n}\n\n/**\n * Every data source wich feeds data into the lazy stream\n * or stream generally must implement this interface\n *\n * It is basically an iteratable to the core\n */\nexport interface IStreamDataSource<T> {\n\n    /**\n     * @returns true if additional data is present false if not\n     */\n    hasNext(): boolean;\n\n    /**\n     * returns the next element in the stream\n     */\n    next(): T | ITERATION_STATUS;\n\n    /**\n     * returns the next element in the stream\n     * difference to next is, that the internal data position\n     * is not changed, so next still will deliver the next item from the current\n     * data position. Look ahead is mostly needed internally\n     * by possible endless data constructs which have no fixed data boundary, or index\n     * positions. (aka infinite sets, or flatmapped constructs)\n     */\n    lookAhead(cnt ?: number): T | ITERATION_STATUS;\n\n    /**\n     * returns the current element, returns the same element as the previous next call\n     * if there is no next before current called then we will call next as initial element\n     */\n    current(): T | ITERATION_STATUS;\n\n    /**\n     * resets the position to the beginning\n     */\n    reset(): void;\n}\n\n/**\n * A collector, needs to be implemented\n */\nexport interface ICollector<T, S> {\n    /**\n     * this method basically takes a single stream element\n     * and does something with it (collecting it one way or the other\n     * in most cases)\n     *\n     * @param element\n     */\n    collect(element: T);\n\n    /**\n     * the final result after all the collecting is done\n     */\n    finalValue: S;\n}\n\nfunction calculateSkips(next_strm: IStreamDataSource<any>) {\n    let pos = 1;\n    while (next_strm.lookAhead(pos) != ITERATION_STATUS.EO_STRM) {\n        pos++;\n    }\n    return --pos;\n}\n\nexport class MultiStreamDatasource<T> implements IStreamDataSource<T> {\n\n    private  activeStrm;\n    private  selectedPos = 0;\n    private  strms;\n\n    constructor(private first, ...strms: Array<IStreamDataSource<T>>) {\n        this.strms = [first].concat(...strms);\n        this.activeStrm = this.strms[this.selectedPos];\n    }\n\n    current(): any {\n        return this.activeStrm.current();\n    }\n\n    hasNext(): boolean {\n        if(this.activeStrm.hasNext()) {\n            return true;\n        }\n        if(this.selectedPos >= this.strms.length) {\n            return false;\n        }\n        return this.findNextStrm() != -1;\n    }\n\n    private findNextStrm(): number {\n        let hasNext = false;\n        let cnt = this.selectedPos;\n        while(!hasNext && cnt < this.strms.length) {\n            hasNext = this.strms[cnt].hasNext();\n            if(!hasNext) {\n                cnt++;\n            }\n        }\n        return hasNext ? cnt : -1;\n    }\n\n    lookAhead(cnt: number = 1): T | ITERATION_STATUS {\n        //lets clone\n        const strms = this.strms.slice(this.selectedPos);\n\n        if(!strms.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n\n        const all_strms = [...strms];\n        while(all_strms.length) {\n            let next_strm = all_strms.shift();\n            let lookAhead = next_strm.lookAhead(cnt);\n\n            if (lookAhead != ITERATION_STATUS.EO_STRM) {\n                return lookAhead;\n            }\n            cnt = cnt - calculateSkips(next_strm);\n        }\n        return ITERATION_STATUS.EO_STRM;\n    }\n\n\n    next(): any {\n        if(this.activeStrm.hasNext()) {\n            return this.activeStrm.next();\n        }\n        this.selectedPos = this.findNextStrm();\n        if(this.selectedPos == -1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        this.activeStrm = this.strms[this.selectedPos];\n        return this.activeStrm.next();\n    }\n\n    reset(): void {\n        this.activeStrm = this.strms[0];\n        this.selectedPos = 0;\n        for(let cnt = 0; cnt < this.strms.length; cnt++) {\n            this.strms[cnt].reset();\n        }\n    }\n\n}\n\n/**\n * defines a sequence of numbers for our stream input\n */\nexport class SequenceDataSource implements IStreamDataSource<number> {\n\n    start: number;\n    total: number;\n    value: number;\n\n    constructor(start: number, total: number) {\n        this.total = total;\n        this.start = start;\n        this.value = start - 1;\n    }\n\n\n    hasNext(): boolean {\n        return this.value < (this.total - 1);\n    }\n\n    next(): number | ITERATION_STATUS {\n        this.value++;\n        return this.value <= (this.total - 1) ? this.value : ITERATION_STATUS.EO_STRM;\n    }\n\n    lookAhead(cnt = 1): number | ITERATION_STATUS {\n        if ((this.value + cnt) > this.total - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        } else {\n            return this.value + cnt;\n        }\n    }\n\n    reset(): void {\n        this.value = this.start - 1;\n    }\n\n    current(): number | ITERATION_STATUS {\n        //first condition current without initial call for next\n        return (this.start - 1) ? ITERATION_STATUS.BEF_STRM : this.value;\n    }\n}\n\n\n/**\n * implementation of iteratable on top of array\n */\nexport class ArrayStreamDataSource<T> implements IStreamDataSource<T> {\n    value: Array<T>;\n    dataPos = -1;\n\n    constructor(...value: Array<T>) {\n        this.value = value;\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if ((this.dataPos + cnt) > this.value.length - 1) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.dataPos + cnt];\n    }\n\n    hasNext(): boolean {\n        return this.value.length - 1 > this.dataPos;\n    }\n\n    next(): T | ITERATION_STATUS {\n        this.dataPos++;\n        return this?.value[this.dataPos] ?? ITERATION_STATUS.EO_STRM;\n    }\n\n    reset() {\n        this.dataPos = -1;\n    }\n\n    current(): T {\n        return this.value[Math.max(0, this.dataPos)];\n    }\n}\n\n/**\n * an intermediate data source which prefilters\n * incoming stream data\n * and lets only the data out which\n * passes the filter function check\n */\nexport class FilteredStreamDatasource<T> implements IStreamDataSource<T> {\n\n    filterFunc: (T) => boolean;\n    inputDataSource: IStreamDataSource<T>;\n\n    _current: T | ITERATION_STATUS = ITERATION_STATUS.BEF_STRM;\n    // we have to add a filter idx because the external filter values might change over time, so\n    // we cannot reset the state properly unless we do it from a snapshot\n    _filterIdx = {};\n    _unfilteredPos = 0;\n\n    constructor(filterFunc: (T) => boolean, parent: IStreamDataSource<T>) {\n        this.filterFunc = filterFunc;\n        this.inputDataSource = parent;\n    }\n\n    /**\n     * in order to filter we have to make a look ahead until the\n     * first next allowed element\n     * hence we prefetch the element and then\n     * serve it via next\n     */\n    hasNext(): boolean {\n        let steps = 1;\n        let found = false;\n        let next;\n\n        while (!found && (next = this.inputDataSource.lookAhead(steps)) != ITERATION_STATUS.EO_STRM) {\n            if (this.filterFunc(next)) {\n                this._filterIdx[this._unfilteredPos + steps] = true;\n                found = true;\n            } else {\n                steps++;\n            }\n        }\n        return found;\n    }\n\n    /**\n     * serve the next element\n     */\n    next(): T | ITERATION_STATUS {\n        let found: T | ITERATION_STATUS = ITERATION_STATUS.EO_STRM;\n        while (this.inputDataSource.hasNext()) {\n            this._unfilteredPos++;\n            let next: T = <T>this.inputDataSource.next();\n            //again here we cannot call the filter function twice, because its state might change, so if indexed, we have a decent snapshot, either has next or next can trigger\n            //the snapshot\n            if (next != ITERATION_STATUS.EO_STRM &&\n                ((this._filterIdx?.[this._unfilteredPos] ?? false) || this.filterFunc(next))) {\n                this._filterIdx[this._unfilteredPos] = true;\n                found = next;\n                break;\n            }\n        }\n        this._current = found as T;\n        return found;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | T {\n        let lookupVal: T | ITERATION_STATUS;\n\n        for (let loop = 1; cnt > 0 && (lookupVal = this.inputDataSource.lookAhead(loop)) != ITERATION_STATUS.EO_STRM; loop++) {\n            let inCache = this._filterIdx?.[this._unfilteredPos + loop];\n            if (inCache || this.filterFunc(lookupVal)) {\n                cnt--;\n                this._filterIdx[this._unfilteredPos + loop] = true;\n            }\n        }\n        return lookupVal;\n    }\n\n    current(): T | ITERATION_STATUS {\n        return this._current;\n    }\n\n    reset(): void {\n        this._current = ITERATION_STATUS.BEF_STRM;\n        this._filterIdx = {};\n        this._unfilteredPos = 0;\n        this.inputDataSource.reset();\n    }\n}\n\n/**\n * an intermediate datasource which maps the items from\n * one into another\n */\nexport class MappedStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: (T) => S;\n    inputDataSource: IStreamDataSource<T>;\n\n    constructor(mapFunc: (T) => S, parent: IStreamDataSource<T>) {\n        this.mapFunc = mapFunc;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.inputDataSource.hasNext();\n    }\n\n    next(): S {\n        return this.mapFunc(this.inputDataSource.next());\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n    }\n\n    current(): S {\n        return this.mapFunc(this.inputDataSource.current());\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n        const lookAheadVal = this.inputDataSource.lookAhead(cnt);\n        return (lookAheadVal == ITERATION_STATUS.EO_STRM) ? lookAheadVal as ITERATION_STATUS : this.mapFunc(lookAheadVal) as S;\n    }\n}\n\n/**\n * Same for flatmap to deal with element -> stream mappings\n */\nexport class FlatMapStreamDataSource<T, S> implements IStreamDataSource<S> {\n\n    mapFunc: StreamMapper<T>;\n\n    inputDataSource: IStreamDataSource<T>;\n\n    /**\n     * the currently active stream\n     * coming from an incoming element\n     * once the end of this one is reached\n     * it is swapped out by another one\n     * from the next element\n     */\n    activeDataSource: IStreamDataSource<S>;\n    walkedDataSources = [];\n    _currPos = 0;\n\n    constructor(func: StreamMapper<T>, parent: IStreamDataSource<T>) {\n        this.mapFunc = func;\n        this.inputDataSource = parent;\n    }\n\n    hasNext(): boolean {\n        return this.resolveActiveHasNext() || this.resolveNextHasNext();\n    }\n\n    private resolveActiveHasNext() {\n        let next = false;\n        if (this.activeDataSource) {\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    lookAhead(cnt = 1): ITERATION_STATUS | S {\n\n        let lookAhead = this?.activeDataSource?.lookAhead(cnt);\n        if (this?.activeDataSource && lookAhead != ITERATION_STATUS.EO_STRM) {\n            //this should cover 95% of all cases\n            return lookAhead;\n        }\n\n        if (this.activeDataSource) {\n            cnt -= calculateSkips(this.activeDataSource)\n        }\n\n        //the idea is basically to look into the streams sub-sequentially for a match\n        //after each stream we have to take into consideration that the skipCnt is\n        //reduced by the number of datasets we already have looked into in the previous stream/datasource\n        //unfortunately for now we have to loop into them, so we introduce a small o2 here\n        for (let dsLoop = 1; true; dsLoop++) {\n            let datasourceData = this.inputDataSource.lookAhead(dsLoop);\n            //we have looped out\n            //no embedded data anymore? we are done, data\n            //can either be a scalar an array or another datasource\n            if (datasourceData === ITERATION_STATUS.EO_STRM) {\n                return ITERATION_STATUS.EO_STRM;\n            }\n            let mappedData = this.mapFunc(datasourceData as T);\n\n            //it either comes in as datasource or as array\n            //both cases must be unified into a datasource\n            let currentDataSource = this.toDatasource(mappedData);\n            //we now run again  a lookahead\n            let ret = currentDataSource.lookAhead(cnt);\n            //if the value is found then we are set\n            if (ret != ITERATION_STATUS.EO_STRM) {\n                return ret;\n            }\n            //reduce the next lookahead by the number of elements\n            //we are now skipping in the current data source\n            cnt -= calculateSkips(currentDataSource);\n        }\n    }\n\n    private toDatasource(mapped: Array<S> | IStreamDataSource<S>) {\n        let ds = Array.isArray(mapped) ? new ArrayStreamDataSource(...mapped) : mapped;\n        this.walkedDataSources.push(ds)\n        return ds;\n    }\n\n    private resolveNextHasNext() {\n        let next = false;\n        while (!next && this.inputDataSource.hasNext()) {\n            let mapped = this.mapFunc(this.inputDataSource.next() as T);\n            this.activeDataSource = this.toDatasource(mapped);\n            next = this.activeDataSource.hasNext();\n        }\n        return next;\n    }\n\n    next(): S | ITERATION_STATUS {\n        if (this.hasNext()) {\n            this._currPos++;\n            return this.activeDataSource.next();\n        }\n    }\n\n    reset(): void {\n        this.inputDataSource.reset();\n        this.walkedDataSources.forEach(ds => ds.reset());\n        this.walkedDataSources = [];\n        this._currPos = 0;\n        this.activeDataSource = null;\n    }\n\n    current(): S | ITERATION_STATUS {\n        if (!this.activeDataSource) {\n            this.hasNext();\n        }\n        return this.activeDataSource.current();\n    }\n}\n\n/**\n * For the time being we only need one collector\n * a collector which collects a stream back into arrays\n */\nexport class ArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.push(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n/**\n * collects the values as inverse array\n */\nexport class InverseArrayCollector<S> implements ICollector<S, Array<S>> {\n    private data: Array<S> = [];\n\n    collect(element: S) {\n        this.data.unshift(element);\n    }\n\n    get finalValue(): Array<S> {\n        return this.data;\n    }\n}\n\n\n/**\n * collects an tuple array stream into an assoc array with elements being collected into arrays\n *\n */\nexport class ArrayAssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        let key = element?.[0] ?? <string>element;\n        this.finalValue[key] = this.finalValue?.[key] ?? [];\n        this.finalValue[key].push(element?.[1] ?? true);\n    }\n}\n\n/**\n * dummy collector which just triggers a run\n * on lazy streams without collecting anything\n */\nexport class Run<S> implements ICollector<S, any> {\n    collect(element: S) {\n\n    }\n\n    get finalValue(): any {\n        return null;\n    }\n}\n\n/**\n * collects an assoc stream back to an assoc array\n */\nexport class AssocArrayCollector<S> implements ICollector<[string, S] | string, { [key: string]: S }> {\n\n    finalValue: { [key: string]: any } = {};\n\n    collect(element: [string, S] | string) {\n        this.finalValue[element[0] ?? <string>element] = element[1] ?? true;\n    }\n}\n\n\n/**\n * A Config collector similar to the FormDFata Collector\n */\nexport class ConfigCollector implements ICollector<{ key: string, value: any }, Config> {\n    finalValue: Config = new Config({});\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key).value = element.value;\n    }\n}\n\n\n/**\n * Form data collector for key value pair streams\n */\nexport class FormDataCollector implements ICollector<{ key: string, value: any }, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: { key: string; value: any }) {\n        this.finalValue.append(element.key, element.value);\n    }\n}\n\n/**\n * Form data collector for DomQuery streams\n */\nexport class QueryFormDataCollector implements ICollector<DomQuery, FormData> {\n    finalValue: FormData = new FormData();\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.finalValue.append(element.name.value, toMerge.get(element.name).value);\n        }\n    }\n}\n\n/**\n * Encoded String collector from dom query streams\n */\nexport class QueryFormStringCollector implements ICollector<DomQuery, string> {\n\n    formData: [[string, string]] = <any>[];\n\n    collect(element: DomQuery) {\n        let toMerge = element.encodeFormElement();\n        if (toMerge.isPresent()) {\n            this.formData.push([element.name.value, toMerge.get(element.name).value]);\n        }\n    }\n\n    get finalValue(): string {\n        return Stream.of(...this.formData)\n            .map<string>(keyVal => keyVal.join(\"=\"))\n            .reduce((item1, item2) => [item1, item2].join(\"&\"))\n            .orElse(\"\").value;\n    }\n}","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*\n * A small stream implementation\n */\nimport {IMonad, IValueHolder, Optional} from \"./Monad\";\nimport {\n    ArrayCollector,\n    ArrayStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    ICollector,\n    IStreamDataSource,\n    ITERATION_STATUS,\n    MappedStreamDataSource, MultiStreamDatasource\n} from \"./SourcesCollectors\";\n//import {from, Observable} from \"rxjs\";\n\n\n/*\n * some typedefs to make the code more reabable\n */\nexport type StreamMapper<T> = (data: T) => IStreamDataSource<any>;\nexport type ArrayMapper<T> = (data: T) => Array<any>;\nexport type IteratableConsumer<T> = (data: T, pos ?: number) => void | boolean;\nexport type Reducable<T, V> = (val1: T | V, val2: T) => V;\nexport type Matchable<T> = (data: T) => boolean;\nexport type Mappable<T, R> = (data: T) => R;\nexport type Comparator<T> = (el1: T, el2: T) => number;\n\n/**\n * Generic interface defining a stream\n */\nexport interface IStream<T> {\n    /**\n     * Perform the operation fn on a single element in the stream at a time\n     * then pass the stream over for further processing\n     * This is basically an intermediate point in the stream\n     * with further processing happening later, do not use\n     * this method to gather data or iterate over all date for processing\n     * (for the second case each has to be used)\n     *\n     * @param fn the processing function, if it returns false, further processing is stopped\n     */\n    onElem(fn: IteratableConsumer<T>): IStream<T>;\n\n    /**\n     * Iterate over all elements in the stream and do some processing via fn\n     *\n     * @param fn takes a single element and if it returns false\n     * then further processing is stopped\n     */\n    each(fn: IteratableConsumer<T>): void;\n\n\n    /**\n     * maps a single element into another via fn\n     * @param fn function which takes one element in and returns another\n     */\n    map<R>(fn?: Mappable<T, R>): IStream<R>;\n\n    /**\n     * Takes an element in and returns a set of something\n     * the set then is flatted into a single stream to be further processed\n     *\n     * @param fn\n     */\n    flatMap<R>(fn?: StreamMapper<T> | ArrayMapper<T>): IStream<R>;\n\n    /**\n     * filtering, takes an element in and is processed by fn.\n     * If it returns false then further processing on this element is skipped\n     * if it returns true it is passed down the chain.\n     *\n     * @param fn\n     */\n    filter(fn?: Matchable<T>): IStream<T>;\n\n    /**\n     * functional reduce... takes two elements in the stream and reduces to\n     * one from left to right\n     *\n     * @param fn the reduction function for instance (val1,val2) => val1l+val2\n     * @param startVal an optional starting value, if provided the the processing starts with this element\n     * and further goes down into the stream, if not, then the first two elements are taken as reduction starting point\n     */\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V): Optional<T | V>;\n\n    /**\n     * returns the first element in the stream is given as Optional\n     */\n    first(): Optional<T>;\n\n    /**\n     * Returns the last stream element (note in endless streams without filtering and limiting you will never reach that\n     * point hence producing an endless loop)\n     */\n    last(): Optional<T>;\n\n    /**\n     * returns true if there is at least one element where a call fn(element) produces true\n     *\n     * @param fn\n     */\n    anyMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if all elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    allMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * returns true if no elmements produce true on a call to fn(element)\n     *\n     * @param fn\n     */\n    noneMatch(fn: Matchable<T>): boolean;\n\n    /**\n     * Collect the elements with a collector given\n     * There are a number of collectors provided\n     *\n     * @param collector\n     */\n    collect(collector: ICollector<T, any>): any;\n\n    /**\n     * sort on the stream, this is a special case\n     * of an endpoint, so your data which is fed in needs\n     * to be limited otherwise it will fail\n     * it still returns a stream for further processing\n     *\n     * @param comparator\n     */\n    sort(comparator: Comparator<T>): IStream<T>;\n\n    /**\n     * Limits the stream to a certain number of elements\n     *\n     * @param end the limit of the stream\n     */\n    limits(end: number): IStream<T>;\n\n\n    concat(...toAppend: Array<IStream<T>>): IStream<T>\n\n    /**\n     * returns the stream collected into an array (90% use-case abbreviation\n     */\n    value: Array<T>;\n\n    /**\n     * returns the currently element selected in the stream\n     */\n    current(): T | ITERATION_STATUS\n\n    /**\n     * returns an observable of the given stream\n     */\n    [Symbol.iterator](): Iterator<T>;\n\n    //observable: Observable<T>;\n}\n\n/**\n * A simple typescript based reimplementation of streams\n *\n * This is the early eval version\n * for a lazy eval version check, LazyStream, which is api compatible\n * to this implementation, however with the benefit of being able\n * to provide infinite data sources and generic data providers, the downside\n * is, it might be a tad slower in some situations\n */\nexport class Stream<T> implements IMonad<T, Stream<any>>, IValueHolder<Array<T>>, IStream<T>, IStreamDataSource<T> {\n\n    value: Array<T>;\n    _limits = -1;\n\n    private pos = -1;\n\n    constructor(...value: T[]) {\n        this.value = value;\n    }\n\n    static of<T>(...data: Array<T>): Stream<T> {\n        return new Stream<T>(...data);\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): Stream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofDataSource<T>(dataSource: IStreamDataSource<T>) {\n        let value: T[] = [];\n        while (dataSource.hasNext()) {\n            value.push(dataSource.next() as T);\n        }\n\n        return new Stream(...value);\n    }\n\n    current(): T | ITERATION_STATUS {\n        if(this.pos == -1) {\n            return ITERATION_STATUS.BEF_STRM;\n        }\n        if(this.pos >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos];\n    }\n\n    limits(end: number): Stream<T> {\n        this._limits = end;\n        return this;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): Stream<T> {\n        let toConcat = [this].concat(toAppend as any);\n        return Stream.of(...toConcat).flatMap(item => item);\n    }\n\n\n    onElem(fn: (data: T, pos ?: number) => void | boolean): Stream<T> {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt], cnt) === false) {\n                break;\n            }\n        }\n        return this;\n    }\n\n\n    each(fn: (data: T, pos ?: number) => void | boolean) {\n        this.onElem(fn);\n        this.reset();\n    }\n\n    map<R>(fn?: (data: T) => R): Stream<R> {\n        if (!fn) {\n            fn = (inval: any) => <R>inval;\n        }\n        let res: R[] = [];\n        this.each((item) => {\n            res.push(fn(item))\n        });\n\n        return new Stream<R>(...res);\n    }\n\n    /*\n     * we need to implement it to fullfill the contract, although it is used only internally\n     * all values are flattened when accessed anyway, so there is no need to call this methiod\n     */\n\n    flatMap<IStreamDataSource>(fn: (data: T) => IStreamDataSource | Array<any>): Stream<any> {\n        let ret = [];\n        this.each(item => {\n            let strmR: any = fn(item);\n            ret = Array.isArray(strmR) ? ret.concat(strmR) : ret.concat(strmR.value);\n        });\n        return <Stream<any>>Stream.of(...ret);\n    }\n\n    filter(fn?: (data: T) => boolean): Stream<T> {\n        let res: Array<T> = [];\n        this.each((data) => {\n            if (fn(data)) {\n                res.push(data);\n            }\n        });\n        return new Stream<T>(...res);\n    }\n\n    reduce<V>(fn: Reducable<T, V | T>, startVal: V = null): Optional<V | T> {\n        let offset = startVal != null ? 0 : 1;\n        let val1: V | T = startVal != null ? startVal : this.value.length ? this.value[0] : null;\n\n        for (let cnt = offset; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            val1 = fn(val1, this.value[cnt]);\n        }\n        this.reset();\n        return Optional.fromNullable<Optional<any>, V | T>(val1);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        return this.value && this.value.length ? Optional.fromNullable(this.value[0]) : Optional.absent;\n    }\n\n    last(): Optional<T> {\n        //could be done via reduce, but is faster this way\n        let length = this._limits > 0 ? Math.min(this._limits, this.value.length) : this.value.length;\n        this.reset();\n        return Optional.fromNullable(length ? this.value[length - 1] : null);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        for (let cnt = 0; cnt < this.value.length && (this._limits == -1 || cnt < this._limits); cnt++) {\n            if (fn(this.value[cnt])) {\n                return true;\n            }\n        }\n        this.reset();\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        if (!this.value.length) {\n            return false;\n        }\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        let matches = 0;\n        for (let cnt = 0; cnt < this.value.length; cnt++) {\n            if (!fn(this.value[cnt])) {\n                matches++;\n            }\n        }\n        this.reset();\n        return matches == this.value.length;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let newArr = this.value.slice().sort(comparator);\n        return Stream.of(...newArr);\n    }\n\n\n    collect(collector: ICollector<T, any>): any {\n        this.each(data => collector.collect(data));\n        this.reset();\n        return collector.finalValue;\n    }\n\n    //-- internally exposed methods needed for the interconnectivity\n    hasNext(): boolean {\n        let isLimitsReached = this._limits != -1 && this.pos >= this._limits - 1;\n        let isEndOfArray = this.pos >= this.value.length - 1;\n        return !(isLimitsReached || isEndOfArray);\n    }\n\n    next(): T {\n        if (!this.hasNext()) {\n            return null;\n        }\n        this.pos++;\n        return this.value[this.pos];\n    }\n\n    lookAhead(cnt = 1): T | ITERATION_STATUS {\n        if((this.pos + cnt) >= this.value.length) {\n            return ITERATION_STATUS.EO_STRM;\n        }\n        return this.value[this.pos + cnt];\n    }\n\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    reset() {\n        this.pos = -1;\n    }\n}\n\n/**\n * Lazy implementation of a Stream\n * The idea is to connect the intermediate\n * streams as datasources like a linked list\n * with reverse referencing and for special\n * operations like filtering flatmapping\n * have intermediate datasources in the list\n * with specialized functions.\n *\n * Sort of a modified pipe valve pattern\n * the streams are the pipes the intermediate\n * data sources are the valves\n *\n * We then can use passed in functions to control\n * the flow in the valves\n *\n * That way we can have a lazy evaluating stream\n *\n * So if an endpoint requests data\n * a callback trace goes back the stream list\n * which triggers an operation upwards\n * which sends data down the drain which then is processed\n * and filtered until one element hits the endpoint.\n *\n * That is repeated, until all elements are processed\n * or an internal limit is hit.\n *\n */\nexport class LazyStream<T> implements IStreamDataSource<T>, IStream<T>, IMonad<T, LazyStream<any>> {\n\n    protected dataSource: IStreamDataSource<T>;\n    _limits = -1;\n\n    /*\n     * needed to have the limits check working\n     * we need to keep track of the current position\n     * in the stream\n     */\n    pos = -1;\n\n    static of<T>(...values: Array<T>): LazyStream<T> {\n        return new LazyStream<T>(new ArrayStreamDataSource(...values));\n    }\n\n    static ofAssoc<T>(data: { [key: string]: T }): LazyStream<[string, T]> {\n        return this.of(...Object.keys(data)).map(key => [key, data[key]]);\n    }\n\n    static ofStreamDataSource<T>(value: IStreamDataSource<T>): LazyStream<T> {\n        return new LazyStream(value);\n    }\n\n    constructor(parent: IStreamDataSource<T>) {\n        this.dataSource = parent;\n\n    }\n\n    hasNext(): boolean {\n        if (this.isOverLimits()) {\n            return false;\n        }\n\n        return this.dataSource.hasNext();\n    }\n\n    next(): T | ITERATION_STATUS {\n        let next = this.dataSource.next();\n        // @ts-ignore\n        this.pos++;\n        return next;\n    }\n\n    lookAhead(cnt= 1): ITERATION_STATUS | T {\n        return this.dataSource.lookAhead(cnt);\n    }\n\n\n\n    current(): T | ITERATION_STATUS {\n        return this.dataSource.current();\n    }\n\n    reset(): void {\n        this.dataSource.reset();\n        this.pos = -1;\n        this._limits = -1;\n    }\n\n    /**\n     * concat for streams, so that you can concat two streams together\n     * @param toAppend\n     */\n    concat(...toAppend: Array<IStream<T>>): LazyStream<T> {\n        //this.dataSource =  new MultiStreamDatasource<T>(this, ... toAppend);\n        //return this;\n        return LazyStream.ofStreamDataSource(new MultiStreamDatasource(this, toAppend as any) as any)\n        //return LazyStream.of(<IStream<T>>this, ...toAppend).flatMap(item => item);\n    }\n\n    nextFilter(fn: Matchable<T>): T {\n        if (this.hasNext()) {\n            let newVal: T = this.next() as T;\n            if (!fn(newVal)) {\n                return this.nextFilter(fn);\n            }\n            return <T>newVal;\n        }\n        return null;\n    }\n\n    limits(max: number): LazyStream<T> {\n        this._limits = max;\n        return this;\n    }\n\n    //main stream methods\n    collect(collector: ICollector<T, any>): any {\n        while (this.hasNext()) {\n            let t = this.next();\n            collector.collect(<T>t);\n        }\n        this.reset();\n        return collector.finalValue;\n    }\n\n    onElem(fn: IteratableConsumer<T>): LazyStream<T> {\n        return new LazyStream(new MappedStreamDataSource((el) => {\n            if (fn(el, this.pos) === false) {\n                this.stop();\n            }\n            return el;\n        }, this));\n    }\n\n    filter(fn: Matchable<T>): LazyStream<T> {\n        return <LazyStream<T>>new LazyStream<T>(new FilteredStreamDatasource<any>(fn, this));\n    }\n\n    map<R>(fn: Mappable<T, R>): LazyStream<any> {\n        return new LazyStream(new MappedStreamDataSource(fn, this));\n    }\n\n    flatMap<StreamMapper>(fn: StreamMapper | ArrayMapper<any>): LazyStream<any> {\n        return new LazyStream<any>(new FlatMapStreamDataSource(<any>fn, this));\n    }\n\n    //endpoint\n    each(fn: IteratableConsumer<T>) {\n        while (this.hasNext()) {\n            if (fn(this.next() as T) === false) {\n                this.stop();\n            }\n        }\n        this.reset();\n    }\n\n    reduce<V>(fn: Reducable<T, V>, startVal: T | V = null): Optional<T | V> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        let value1;\n        let value2 = null;\n        if (startVal != null) {\n            value1 = startVal;\n            value2 = this.next();\n        } else {\n            value1 = this.next();\n            if (!this.hasNext()) {\n                return Optional.fromNullable(value1);\n            }\n            value2 = this.next();\n        }\n        value1 = fn(value1, value2);\n        while (this.hasNext()) {\n            value2 = this.next();\n            value1 = fn(value1, value2);\n        }\n        this.reset();\n        return Optional.fromNullable(value1);\n    }\n\n    last(): Optional<T> {\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return this.reduce((el1, el2) => el2);\n    }\n\n    first(): Optional<T> {\n        this.reset();\n        if (!this.hasNext()) {\n            return Optional.absent;\n        }\n        return Optional.fromNullable(this.next() as T);\n    }\n\n    anyMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    allMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (!fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    noneMatch(fn: Matchable<T>): boolean {\n        while (this.hasNext()) {\n            if (fn(this.next() as T)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    sort(comparator: Comparator<T>): IStream<T> {\n        let arr = this.collect(new ArrayCollector());\n        arr = arr.sort(comparator);\n        return LazyStream.of(...arr);\n    }\n\n    get value(): Array<T> {\n        return this.collect(new ArrayCollector<T>());\n    }\n\n    [Symbol.iterator]() : Iterator<T> {\n        return {\n            next: () => {\n                let done = !this.hasNext();\n                let val = this.next();\n                return {\n                    done: done,\n                    value: <T>val\n                }\n            }\n        }\n    }\n\n    /*get observable(): Observable<T> {\n        return from(this);\n    }*/\n\n    private stop() {\n        this.pos = this._limits + 1000000000;\n        this._limits = 0;\n    }\n\n    private isOverLimits() {\n        return this._limits != -1 && this.pos >= this._limits - 1;\n    }\n\n}\n\n\n","/*!\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Lang} from \"./Lang\";\nimport {DomQuery} from \"./DomQuery\";\nimport isString = Lang.isString;\nimport {_global$} from \"./Global\";\n\ndeclare let ActiveXObject: any;\n\n/**\n * xml query as specialized case for DomQuery\n */\nexport class XMLQuery extends DomQuery {\n\n    constructor(rootNode: Document | string | DomQuery, docType: string = \"text/xml\") {\n\n        let createIe11DomQueryShim = (): DOMParser => {\n            //at the time if wroting ie11 is the only relevant browser\n            //left withut any DomQuery support\n            let parser = new ActiveXObject(\"Microsoft.XMLDOM\");\n            parser.async = false;\n            //we shim th dom parser from ie in\n            return <any>{\n                parseFromString: (text: string, contentType: string): Document => {\n                    return parser.loadXML(text);\n                }\n            }\n        };\n\n        let parseXML = (xml: string): Document => {\n            if (xml == null) {\n                return null;\n            }\n            let domParser: DOMParser = Lang.saveResolveLazy<DOMParser>(\n                () => new (_global$()).DOMParser(),\n                (): DOMParser => createIe11DomQueryShim()\n            ).value;\n            return domParser.parseFromString(xml, <any> docType);\n        };\n\n        if (isString(rootNode)) {\n            super(parseXML(<string>rootNode))\n        } else {\n            super(rootNode);\n        }\n    }\n\n    isXMLParserError(): boolean {\n        return this.querySelectorAll(\"parsererror\").isPresent();\n    }\n\n    toString(): string {\n        let ret = [];\n        this.eachElem((node: any) => {\n            let serialized = (_global$())?.XMLSerializer?.constructor()?.serializeToString(node) ?? node?.xml;\n            if (!!serialized) {\n                ret.push(serialized);\n            }\n        });\n        return ret.join(\"\");\n    }\n\n    parserErrorText(joinstr: string): string {\n        return this.querySelectorAll(\"parsererror\").textContent(joinstr);\n    }\n\n    static parseXML(txt: string): XMLQuery {\n        return new XMLQuery(txt);\n    }\n\n    static parseHTML(txt: string): XMLQuery {\n        return new XMLQuery(txt, \"text/html\");\n    }\n\n    static fromString(txt: string, parseType: string = \"text/xml\"): XMLQuery {\n        return new XMLQuery(txt, parseType);\n    }\n}\n\nexport const XQ = XMLQuery;\nexport type XQ = XMLQuery;","/*!\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport {DomQuery, ElementAttribute, DomQueryCollector, DQ, DQ$} from \"./DomQuery\";\nexport {Lang} from \"./Lang\";\nexport {Config, CONFIG_VALUE, CONFIG_ANY, ConfigDef, Monad, IValueHolder, IFunctor, IMonad, IIdentity, Optional, ValueEmbedder} from \"./Monad\";\nexport {XMLQuery, XQ} from \"./XmlQuery\";\nexport {Stream, LazyStream, IteratableConsumer, IStream} from \"./Stream\";\nexport {\n    ArrayStreamDataSource,\n    MappedStreamDataSource,\n    FilteredStreamDatasource,\n    FlatMapStreamDataSource,\n    SequenceDataSource,\n    QueryFormStringCollector,\n    IStreamDataSource,\n    ICollector,\n    ArrayCollector,\n    AssocArrayCollector,\n    FormDataCollector,\n    QueryFormDataCollector\n} from \"./SourcesCollectors\";\n\n\n\n\n\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","/*! Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\n\n/**\n * faces.js init layer which provides as per spec the proper\n * window namespace if it does not exist already\n *\n * The idea is that we use a small shim on top of\n * the implementation to provide the window namespace.\n * The implementation itself is in a protected namespace\n * which will be bound by the build system\n *\n * The documentation nevertheless targets the _api file, which\n * hosts the full api\n */\nif(!window.faces) {\n    //we lazily load the code to prevent ram bloat\n    const faces = require(\"./_api\").faces;\n    window['faces'] = window?.faces ?? faces;\n}\nif(!window?.myfaces?.ab) {\n    const myfaces = require(\"./_api\").myfaces;\n\n    //namespace might be extended is not exclusively reserved so we merge\n    (window as any)[\"myfaces\"] = window?.myfaces ?? {};\n    Object.keys(myfaces).forEach(key => window.myfaces[key] = window.myfaces?.[key] ?? myfaces[key]);\n}\nexport var faces = window.faces;\nexport var myfaces = window.myfaces;\n"],"names":["faces","ajax","util","push","specversion","implversion","separatorchar","sep","match","Implementation","getSeparatorChar","contextpath","getProjectStage","getViewState","formElement","getClientWindow","rootNode","request","element","event","options","response","context","addOnError","errorFunc","addOnEvent","eventFunc","chain","source","funcs","init","socketClientId","url","channel","onopen","onmessage","onerror","onclose","behaviors","autoConnect","PushImpl","open","close","myfaces","ab","eventName","execute","render","CTX_OPTIONS_PARAMS","$nsp","P_BEHAVIOR_EVENT","CTX_OPTIONS_EXECUTE","CTX_PARAM_RENDER","window","jsf","oam","ProjectStages","BlockFilter","trim","Lang","getMessage","ExtLang","getGlobalConfig","assert","Assertions","projectStage","separator","eventQueue","errorQueue","resolveProjectStateFromURL","foundStage","ExtDomQuery","searchJsfJsFor","value","Production","sendError","errorData","localHandler","data","forEach","errorCallback","console","error","alert","displayError","assignNamingContainerData","internalContext","viewRootId","resolveViewRootId","assign","NAMED_VIEWROOT","NAMING_CONTAINER_ID","remapDefaultConstants","targetConfig","targetKey","userValues","issuingForm","issuingElementId","rootNamingContainerId","SEP","$faces","iterValues","split","ret","processed","remapNamingContainer","componentIdToTransform","rootNamingContainerPrefix","EMPTY_STR","formClientId","id","nearestNamingContainer","substring","lastIndexOf","nearestNamingContainerPrefix","hasLeadingSep","indexOf","finalIdentifier","length","join","document","getElementById","cnt","IDENT_NONE","delete","IDENT_ALL","IDENT_FORM","IDENT_THIS","resolveGlobalConfig","MYFACES","config","requestQueue","this","orElse","reset","LazyStream","of","map","func","call","sourceCode","Function","resolveAndExecute","onElem","opResult","last","el","opts","elem","elementId","windowId","isResetValues","resolveDefaults","requestCtx","ExtConfig","internalCtx","assertRequestIntegrity","form","resolveForm","viewId","resolveViewId","formId","delay","resolveDelay","timeout","resolveTimeout","mappedOpts","assignIf","P_WINDOW_ID","CTX_PARAM_REQ_PASS_THR","Stream","ofAssoc","filter","item","collect","AssocArrayCollector","params","arrayedParams","getIf","Array","isArray","ctxPassthrough","requestOptions","targetContext","sourceElementId","$nspEnabled","shallowMerge","Config","P_EVT","type","SOURCE","VIEW_ID","ON_EVENT","onevent","ON_ERROR","P_PARTIAL_SOURCE","P_AJAX","P_RESET_VALUES","CTX_PARAM_SRC_FRM_ID","CTX_PARAM_SRC_CTL_ID","clientWindow","getAsElem","P_CLIENT_WINDOW","assignClientWindowId","isPresent","get","P_EXECUTE","P_RENDER","assignRender","queueHandler","addRequestToQueue","Response","processResponse","errorListener","eventListener","sendEvent","fn","stdErrorHandler","exception","clearRequestQueue","ErrorData","fromClient","cleanup","node","ALTERED","INIT","formWindowId","DQ","body","querySelectorAll","stream","attr","reduce","value1","value2","byId","isTag","HTML_TAG_FORM","Error","dummyContext","formElements","deepElements","encodeFormElement","encodeFormData","resoveNamingContainerMapper","reqCtx","respPassThr","AsynchronousQueue","enqueue","XhrRequest","URL_PROTOCOL","global","location","protocol","replace","sockets","components","clientIdsByTokens","resolveFunction","WebSocket","channelToken","substr","Socket","base","hostname","port","getBaseURL","getSocket","constructor","reconnectAttempts","socket","readyState","bindCallbacks","clientIds","i","message","JSON","parse","e","splice","onmmessage","functions","j","code","reason","REASON_EXPIRED","MAX_RECONNECT_ATTEMPTS","setTimeout","RECONNECT_INTERVAL","s","XML_ATTR_NAMED_VIEWROOT","P_VIEWSTATE","P_VIEWROOT","P_VIEWHEAD","P_VIEWBODY","P_RESOURCE","EMPTY_FUNC","Object","freeze","EMPTY_MAP","HTML_VIEWSTATE","HTML_CLIENT_WINDOW","P_RENDER_OVERRIDE","WINDOW_ID","ERROR","EVENT","BEGIN","COMPLETE","SUCCESS","STATUS","ERROR_NAME","ERROR_MESSAGE","RESPONSE_TEXT","RESPONSE_XML","HTTPERROR","EMPTY_RESPONSE","MALFORMEDXML","SERVER_ERROR","CLIENT_ERROR","TIMEOUT_EVENT","CTX_OPTIONS_DELAY","DELAY_NONE","CTX_OPTIONS_TIMEOUT","CTX_OPTIONS_RESET","CTX_PARAM_MF_INTERNAL","CONTENT_TYPE","HEAD_FACES_REQ","REQ_ACCEPT","VAL_AJAX","ENCODED_URL","REQ_TYPE_GET","REQ_TYPE_POST","STATE_EVT_BEGIN","STATE_EVT_TIMEOUT","STATE_EVT_COMPLETE","URL_ENCODED","MULTIPART","NO_TIMEOUT","STD_ACCEPT","HTML_TAG_HEAD","HTML_TAG_BODY","HTML_TAG_LINK","HTML_TAG_SCRIPT","HTML_TAG_STYLE","SEL_VIEWSTATE_ELEM","SEL_CLIENT_WINDOW_ELEM","SEL_RESPONSE_XML","PHASE_PROCESS_RESPONSE","ERR_NO_PARTIAL_RESPONSE","ATTR_URL","ATTR_NAME","ATTR_VALUE","ATTR_ID","XML_TAG_PARTIAL_RESP","XML_TAG_CHANGES","XML_TAG_UPDATE","XML_TAG_DELETE","XML_TAG_INSERT","XML_TAG_EVAL","XML_TAG_ERROR","XML_TAG_ATTRIBUTES","XML_TAG_EXTENSION","XML_TAG_REDIRECT","XML_TAG_BEFORE","XML_TAG_AFTER","XML_TAG_ATTR","UPDATE_FORMS","UPDATE_ELEMS","DEFERRED_HEAD_INSERTS","MF_NONE","APPLIED_VST","APPLIED_CLIENT_WINDOW","UNKNOWN","inputNamespace","viewStatePos","nameSpace","hasNameSpace","MSG_TEST","MSG_DEV_MODE","MSG_AFFECTED_CLASS","MSG_AFFECTED_METHOD","MSG_ERROR_NAME","MSG_ERROR_MESSAGE","MSG_SERVER_ERROR_NAME","MSG_ERROR_DESC","MSG_ERROR_NO","MSG_ERROR_LINENO","ERR_FORM","ERR_VIEWSTATE","ERR_TRANSPORT","ERR_EVT_PASS","ERR_CONSTRUCT","ERR_MALFORMEDXML","ERR_SOURCE_FUNC","ERR_EV_OR_UNKNOWN","ERR_SOURCE_NOSTR","ERR_SOURCE_DEF_NULL","ERR_MUST_STRING","ERR_REF_OR_ID","ERR_PARAM_GENERIC","ERR_PARAM_STR","ERR_PARAM_STR_RE","ERR_PARAM_MIXMAPS","ERR_MUST_BE_PROVIDED","ERR_MUST_BE_PROVIDED1","ERR_REPLACE_EL","ERR_EMPTY_RESPONSE","ERR_ITEM_ID_NOTFOUND","ERR_PPR_IDREQ","ERR_PPR_INSERTBEFID","ERR_PPR_INSERTBEFID_1","ERR_PPR_INSERTBEFID_2","ERR_PPR_DELID","ERR_PPR_UNKNOWNCID","ERR_NO_VIEWROOTATTR","ERR_NO_HEADATTR","ERR_RED_URL","ERR_REQ_FAILED_UNKNOWN","ERR_REQU_FAILED","msg","caller","title","raiseError","assertType","theType","assertFunction","assertUrlExists","isAbsent","assertValidXMLResponse","responseXML","isXMLParserError","parserErrorText","name","finalTitle","finalName","finalMessage","makeException","arguments","toString","assertDelay","runnableQueue","isEmpty","delayTimeout","clearTimeout","appendElement","dequeue","shift","currentlyRunning","cancel","callForNextElementToProcess","runEntry","catch","then","start","IS_FACES_SOURCE","search","ATTR_SRC","nonce","fetchWindowIdFromURL","href","results","RegExp","exec","result","curScript","currentScript","extractNonce","nonceScript","lazyStream","first","static","regExp","decodeURIComponent","globalEval","super","globalEvalSticky","runScripts","sticky","whiteListed","src","runHeadInserts","suppressDoubleIncludes","head","processedScripts","tagName","reference","orElseLazy","each","append","selector","deep","DomQuery","ExtDQ","root","condition","accessPath","accessPathMapped","remap","appendIf","defaultVal","key","getClass","shallowCopy$","deepCopy","deepCopy$","ArrayCollector","decodeEncodedValues","encoded","requestParamEntries","line","index","resolveFiles","dataSource","querySelectorAllDeep","fileInput","filesFromElem","flatMap","files","file","formData","paramsMapper","inStr","inVal","defaultStr","assocValues","keys","hasOwnProperty","val","File","keyVal","encodeURIComponent","parentItem","standardInputs","resolveViewState","fileInputs","concat","namedViewRoot","isViewState","template","withNamingContainerId","namingContainer","namingContainerId","withParent","parent","withNamedViewRoot","build","DQ$","state","ident","parseInt","isNaN","item1","item2","Math","max","newElement","fromMarkup","installedLocale","defaultMessage","templateParams","Messages","param","callerCls","callFunc","getLanguage","language","navigator","languages","failSaveResolve","resolverProducer","defaultValue","saveResolve","failSaveExecute","keyValToStr","delimiter","configName","getForm","queryElem","eventTarget","getEventTarget","absent","foundForm","firstParent","byTagName","assertFormExists","getLocalOrGlobalConfig","localOptions","ErrorType","EventData","errorName","errorMessage","responseText","responseCode","status","sourceId","typeDetails","serverErrorName","serverErrorMessage","stack","HTTP_ERROR","errorCode","errorType","getMsg","fromGeneric","eventData","resolveTargetUrl","srcFormElement","elements","action","resolveWindowId","requestContext","responseContext","funcName","sourceForm","ajaxType","viewState","divider","viewStateViewId","prefix","getCfg","evt","finalEvent","t","srcElement","target","nodeType","parentNode","resetValues","XMLQuery","externalContext","fromNullable","elemId","resolveSourceElementId","sourceFormId","forms","req","resolveContexts","resolveResponseXML","responseProcessor","ResponseProcessor","partialId","updateNamedViewRootState","SEL_SUB_TAGS","redirect","ALLOWED_TAGS","processViewState","processClientWindow","storeState","cdataBlock","cDATAAsString","replaceViewRoot","replaceHead","replaceBody","addToHead","update","handleElementUpdate","processUpdateTag","eval","insertWithSubTags","insert","processInsert","attributes","processChangesTag","processPartialTag","fixViewStates","fixClientWindow","done","shadowDocument","shadowHead","childNodes","copyAttrs","mappedHeadData","scriptTags","scriptElements","DomQueryCollector","addToHeadDeferred","newElements","shadowBody","shadowInnerHTML","innerHTML","resultingBody","updateForms","html","storeForPostProcessing","mergedErrorData","textContent","hasResponseXML","fromServerError","triggerOnError","redirectUrl","outerHTML","before","after","insertNodes","insertBefore","insertAfter","insertId","isViewStateNode","StateHolder","isClientWindowNode","updateElems","runCss","affectedForms","getContainerForms","affectedForm","isInExecuteOrRender","appendViewStateToForms","appendClientWindowToForms","createFromRequest","eventHandler","assignState","HiddenInputBuilder","createAndAppendHiddenInput","toBeEvaluated","storeForUpdate","storeForEval","executes","renders","executeAndRenders","nameOrId","NAME_OR_ID","getNameOrIdSelector","matchesSelector","defaultParamsMapper","XhrFormData","partialIds","isMultipartRequest","resolveRequestType","encodeSubmittableFields","applyViewState","toFormData","remapKeyForNamingContainer","FormDataCollector","rootElement","isMultipartCandidate","viewStateElement","inputValue","getFormInputsAsStream","fixEmmptyParameters","partialIdsArray","contentType","xhrObject","XMLHttpRequest","stopProgress","catchFunctions","thenFunctions","registerXhrCallbacks","resolve","reject","ignoreErr","executesArr","requestPassThroughParams","resolveFinalUrl","setRequestHeader","sendRequest","handleError","abort","inputVal","thenFunc","catchFunc","finally","onabort","onAbort","ontimeout","onTimeout","onload","onSuccess","onloadend","onDone","isCancelledResponse","onError","currentTarget","handleMalFormedXML","isPost","send","evtType","resolveHandlerFunc","responseFormatError","fromHttpConnection","setHiddenInput","formName","input","newInput","appendTo","clearHiddenInput","submitForm","linkId","clearFn","core","autoScroll","getScrolling","paramsStream","oldTarget","getAttribute","setAttribute","onsubmit","submit","removeAttribute","isString","eqi","equalsIgnoreCase","ALLOWED_SUBMITTABLE_ELEMENTS","objToArray","ElementAttribute","ValueEmbedder","values","valueKey","Style","style","DEFAULT_WHITELIST","pos","_limits","Optional","foundElement","allElems","_global$","nodeName","toLowerCase","nodeId","checked","allMatch","newChecked","eachElem","queryStr","found","queryRes","shadowRoots","shadowRoot","shadowRes","disabled","childNodeArr","asArray","offsetWidth","accumulate","incoming","offsetHeight","offsetLeft","offsetTop","asNodeArray","_querySelectorAllDeep","_querySelectorAll","byIdDeep","markup","doc","implementation","createHTMLDocument","lowerMarkup","documentElement","startsWithTag","str","tag1","tag2","dummyPlaceHolder","createElement","detach","defaults","presentRunnable","ifPresentLazy","removeChild","closest","_closestDeep","_closest","includeRoot","res","subItems","reduction","cssProperty","hasClass","clazz","hasIt","classList","contains","addClass","add","removeClass","remove","FILE_INPUT","newInnerHTML","dispatchEvent","retArr","innerHtml","newInnerHtml","filterSelector","matched","_mozMatchesSelector","nodeSelector","selectorStage","len","firstElem","lastElem","toReplace","asElem","parentElement","nextElement","nextElementSibling","previousElement","previousElementSibling","lastNode","reArr","getElementsByTagName","script","newScriptElement","appendChild","applyNonce","loadScriptEval","_loadScriptEval","loadScriptEvalSticky","toInsertParams","existingItem","existingElement","nextSibling","insertElem","elseValue","allParents","parentsWhileMatch","host","sourceItem","sourceNode","attrs","resolveAttributeHolder","runEmbeddedScripts","runEmbeddedCss","focusElementId","activeElement","caretPosition","getCaretPosition","nodes","firstInsert","replaced","replaceChild","insertAdditionalItems","slice","focusElement","setCaretPosition","whitelisted","evalCollectedScripts","scriptsToProcess","joinedScripts","evalText","finalScripts","allowedItemTypes","execScript","itemType","text","innerText","go","sort","node1","node2","compareDocumentPosition","description","_toReplace","rel","matches","styles","execCss","click","fireEvent","addEventListener","listener","removeEventListener","finalOptions","bubbles","cancelable","ownerDocument","EventClass","Event","MouseEvent","KeyboardEvent","synthetic","createEventObject","joinString","text1","text2","toMerge","shallowCopy","elemType","selectElem","selectedIndex","uLen","u","selected","elementOption","SELECT","BUTTON","RESET","SUBMIT","IMAGE","CHECKBOX","RADIO","uploadedFiles","filesArr","from","reduced","subNodes","to","min","limits","end","hasNext","isLimitsReached","isEndOfArray","next","lookAhead","ITERATION_STATUS","EO_STRM","current","BEF_STRM","attachShadow","mode","shadowElement","waitUntilDom","childList","subtree","interval","Promise","success","observer","MUT_ERROR","findElement","MutationObserver","mutTimeout","disconnect","callback","mutationList","mut","observableOpts","observe","setInterval","clearInterval","shadowElements","mapped","hasShadow","ctrl","caretPos","selection","focus","createRange","moveStart","setSelectiongRange","Symbol","iterator","toAttach","filterDoubles","idx","notFound","prependTo","prepend","foundNodes","selectors","cnt2","levelSelector","toMatch","prototypeOwner","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","srcNode","createSourceNode","nonceCheck","marker","Date","now","random","attrName","finalValue","globalThis","g","ws","test","charAt","it","String","saveResolveLazy","strToArray","splitter","obj","offset","pack","prototype","destination","finalDest","probe","isFunc","objAssign","theArgs","TypeError","nextSource","nextKey","Monad","_value","inval","preprocessKeys","currentPos","currKey","arrPos","arrayIndex","getIfPresent","toJson","stringify","resolver","rootElem","newVal","alternative","ConfigEntry","CONFIG_VALUE","CONFIG_ANY","configDef","other","overwrite","withAppend","assertAccessPath","lastKey","pathExists","buildPath","finalKeyArrPos","apply","setVal","currAccessPos","parentVal","parentPos","alloc","arr","length1","length2","isArrayPos","tempVal","isNoArray","calculateSkips","next_strm","strms","selectedPos","activeStrm","findNextStrm","all_strms","total","ArrayStreamDataSource","dataPos","filterFunc","_current","_filterIdx","_unfilteredPos","inputDataSource","steps","lookupVal","loop","mapFunc","lookAheadVal","walkedDataSources","_currPos","resolveActiveHasNext","resolveNextHasNext","activeDataSource","dsLoop","datasourceData","mappedData","currentDataSource","toDatasource","ds","unshift","FormData","toAppend","toConcat","strmR","startVal","val1","anyMatch","noneMatch","comparator","newArr","collector","isOverLimits","ofStreamDataSource","MultiStreamDatasource","nextFilter","MappedStreamDataSource","stop","FilteredStreamDatasource","FlatMapStreamDataSource","el1","el2","docType","xml","DOMParser","parser","ActiveXObject","async","parseFromString","loadXML","createIe11DomQueryShim","serialized","XMLSerializer","serializeToString","joinstr","txt","parseType","XQ","SequenceDataSource","QueryFormStringCollector","QueryFormDataCollector","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__"],"sourceRoot":""}